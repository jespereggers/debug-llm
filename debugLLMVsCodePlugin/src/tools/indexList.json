{
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\.vscode\\pre-selective-indexing\\indexProject.ts": [
    {
      "name": "saveDataStructureToJson",
      "args": [
        "data",
        "fileName"
      ],
      "returnType": "void"
    },
    {
      "name": "extractFunctionDetails",
      "args": [
        "filePath"
      ],
      "returnType": ""
    },
    {
      "name": "dfs",
      "args": [
        "dirPath",
        "result"
      ],
      "returnType": ""
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\ascii.d.ts": [
    {
      "name": "emitForest",
      "args": [
        "trees"
      ],
      "returnType": "string;"
    },
    {
      "name": "emitForestLines",
      "args": [
        "trees"
      ],
      "returnType": "string[];"
    },
    {
      "name": "parseFunctionRanges",
      "args": [
        "text",
        "offsetMap",
        "number>"
      ],
      "returnType": "RangeCov[];"
    },
    {
      "name": "parseOffsets",
      "args": [
        "text"
      ],
      "returnType": "Map<number, number>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\clone.d.ts": [
    {
      "name": "cloneProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "ProcessCov;"
    },
    {
      "name": "cloneScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "ScriptCov;"
    },
    {
      "name": "cloneFunctionCov",
      "args": [
        "functionCov"
      ],
      "returnType": "FunctionCov;"
    },
    {
      "name": "cloneRangeCov",
      "args": [
        "rangeCov"
      ],
      "returnType": "RangeCov;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\compare.d.ts": [
    {
      "name": "compareScriptCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number;"
    },
    {
      "name": "compareFunctionCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number;"
    },
    {
      "name": "compareRangeCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\merge.d.ts": [
    {
      "name": "mergeProcessCovs",
      "args": [
        "processCovs"
      ],
      "returnType": "ProcessCov;"
    },
    {
      "name": "mergeScriptCovs",
      "args": [
        "scriptCovs"
      ],
      "returnType": "ScriptCov | undefined;"
    },
    {
      "name": "mergeFunctionCovs",
      "args": [
        "funcCovs"
      ],
      "returnType": "FunctionCov | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\normalize.d.ts": [
    {
      "name": "normalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void;"
    },
    {
      "name": "deepNormalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void;"
    },
    {
      "name": "normalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void;"
    },
    {
      "name": "deepNormalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void;"
    },
    {
      "name": "normalizeFunctionCov",
      "args": [
        "funcCov"
      ],
      "returnType": "void;"
    },
    {
      "name": "normalizeRangeTree",
      "args": [
        "tree"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\ascii.ts": [
    {
      "name": "emitForest",
      "args": [
        "trees"
      ],
      "returnType": "string"
    },
    {
      "name": "emitForestLines",
      "args": [
        "trees"
      ],
      "returnType": "string[]"
    },
    {
      "name": "getColMap",
      "args": [
        "trees"
      ],
      "returnType": "Map<number, number>"
    },
    {
      "name": "emitTree",
      "args": [
        "tree",
        "colMap",
        "number>"
      ],
      "returnType": "string[]"
    },
    {
      "name": "parseFunctionRanges",
      "args": [
        "text",
        "offsetMap",
        "number>"
      ],
      "returnType": "RangeCov[]"
    },
    {
      "name": "emitTreeLayer",
      "args": [
        "layer",
        "colMap",
        "number>"
      ],
      "returnType": "string"
    },
    {
      "name": "parseTreeLayer",
      "args": [
        "text",
        "offsetMap",
        "number>"
      ],
      "returnType": "RangeCov[]"
    },
    {
      "name": "emitRange",
      "args": [
        "count",
        "len"
      ],
      "returnType": "string"
    },
    {
      "name": "emitOffsets",
      "args": [
        "colMap",
        "number>"
      ],
      "returnType": "string"
    },
    {
      "name": "parseOffsets",
      "args": [
        "text"
      ],
      "returnType": "Map<number, number>"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\clone.ts": [
    {
      "name": "cloneProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "ProcessCov"
    },
    {
      "name": "cloneScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "ScriptCov"
    },
    {
      "name": "cloneFunctionCov",
      "args": [
        "functionCov"
      ],
      "returnType": "FunctionCov"
    },
    {
      "name": "cloneRangeCov",
      "args": [
        "rangeCov"
      ],
      "returnType": "RangeCov"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\compare.ts": [
    {
      "name": "compareScriptCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    },
    {
      "name": "compareFunctionCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    },
    {
      "name": "compareRangeCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\merge.ts": [
    {
      "name": "mergeProcessCovs",
      "args": [
        "processCovs"
      ],
      "returnType": "ProcessCov"
    },
    {
      "name": "mergeScriptCovs",
      "args": [
        "scriptCovs"
      ],
      "returnType": "ScriptCov | undefined"
    },
    {
      "name": "stringifyFunctionRootRange",
      "args": [
        "funcCov"
      ],
      "returnType": "string"
    },
    {
      "name": "mergeFunctionCovs",
      "args": [
        "funcCovs"
      ],
      "returnType": "FunctionCov | undefined"
    },
    {
      "name": "mergeRangeTrees",
      "args": [
        "trees"
      ],
      "returnType": "RangeTree | undefined"
    },
    {
      "name": "mergeRangeTreeChildren",
      "args": [
        "parentTrees"
      ],
      "returnType": "RangeTree[]"
    },
    {
      "name": "insertChild",
      "args": [
        "parentToNested",
        "RangeTree[]>",
        "parentIndex",
        "tree"
      ],
      "returnType": "void"
    },
    {
      "name": "nextChild",
      "args": [
        "openRange",
        "parentToNested",
        "RangeTree[]>"
      ],
      "returnType": "RangeTree"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\normalize.ts": [
    {
      "name": "normalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void"
    },
    {
      "name": "deepNormalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void"
    },
    {
      "name": "deepNormalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeFunctionCov",
      "args": [
        "funcCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeRangeTree",
      "args": [
        "tree"
      ],
      "returnType": "void"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\range-tree.ts": [
    {
      "name": "endChain",
      "args": [],
      "returnType": "void"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\ascii.ts": [
    {
      "name": "emitForest",
      "args": [
        "trees"
      ],
      "returnType": "string"
    },
    {
      "name": "emitForestLines",
      "args": [
        "trees"
      ],
      "returnType": "string[]"
    },
    {
      "name": "getColMap",
      "args": [
        "trees"
      ],
      "returnType": "Map<number, number>"
    },
    {
      "name": "emitTree",
      "args": [
        "tree",
        "colMap",
        "number>"
      ],
      "returnType": "string[]"
    },
    {
      "name": "parseFunctionRanges",
      "args": [
        "text",
        "offsetMap",
        "number>"
      ],
      "returnType": "RangeCov[]"
    },
    {
      "name": "emitTreeLayer",
      "args": [
        "layer",
        "colMap",
        "number>"
      ],
      "returnType": "string"
    },
    {
      "name": "parseTreeLayer",
      "args": [
        "text",
        "offsetMap",
        "number>"
      ],
      "returnType": "RangeCov[]"
    },
    {
      "name": "emitRange",
      "args": [
        "count",
        "len"
      ],
      "returnType": "string"
    },
    {
      "name": "emitOffsets",
      "args": [
        "colMap",
        "number>"
      ],
      "returnType": "string"
    },
    {
      "name": "parseOffsets",
      "args": [
        "text"
      ],
      "returnType": "Map<number, number>"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\clone.ts": [
    {
      "name": "cloneProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "ProcessCov"
    },
    {
      "name": "cloneScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "ScriptCov"
    },
    {
      "name": "cloneFunctionCov",
      "args": [
        "functionCov"
      ],
      "returnType": "FunctionCov"
    },
    {
      "name": "cloneRangeCov",
      "args": [
        "rangeCov"
      ],
      "returnType": "RangeCov"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\compare.ts": [
    {
      "name": "compareScriptCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    },
    {
      "name": "compareFunctionCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    },
    {
      "name": "compareRangeCovs",
      "args": [
        "a",
        "b"
      ],
      "returnType": "number"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\merge.ts": [
    {
      "name": "mergeProcessCovs",
      "args": [
        "processCovs"
      ],
      "returnType": "ProcessCov"
    },
    {
      "name": "mergeScriptCovs",
      "args": [
        "scriptCovs"
      ],
      "returnType": "ScriptCov | undefined"
    },
    {
      "name": "stringifyFunctionRootRange",
      "args": [
        "funcCov"
      ],
      "returnType": "string"
    },
    {
      "name": "mergeFunctionCovs",
      "args": [
        "funcCovs"
      ],
      "returnType": "FunctionCov | undefined"
    },
    {
      "name": "mergeRangeTrees",
      "args": [
        "trees"
      ],
      "returnType": "RangeTree | undefined"
    },
    {
      "name": "mergeRangeTreeChildren",
      "args": [
        "parentTrees"
      ],
      "returnType": "RangeTree[]"
    },
    {
      "name": "insertChild",
      "args": [
        "parentToNested",
        "RangeTree[]>",
        "parentIndex",
        "tree"
      ],
      "returnType": "void"
    },
    {
      "name": "nextChild",
      "args": [
        "openRange",
        "parentToNested",
        "RangeTree[]>"
      ],
      "returnType": "RangeTree"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\normalize.ts": [
    {
      "name": "normalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void"
    },
    {
      "name": "deepNormalizeProcessCov",
      "args": [
        "processCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void"
    },
    {
      "name": "deepNormalizeScriptCov",
      "args": [
        "scriptCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeFunctionCov",
      "args": [
        "funcCov"
      ],
      "returnType": "void"
    },
    {
      "name": "normalizeRangeTree",
      "args": [
        "tree"
      ],
      "returnType": "void"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\lib\\range-tree.ts": [
    {
      "name": "endChain",
      "args": [],
      "returnType": "void"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@bcoe\\v8-coverage\\src\\test\\merge.spec.ts": [
    {
      "name": "loadFixture",
      "args": [
        "name"
      ]
    },
    {
      "name": "void",
      "args": []
    },
    {
      "name": "testBench",
      "args": [
        "this"
      ]
    },
    {
      "name": "getSourceFiles",
      "args": []
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@discoveryjs\\json-ext\\index.d.ts": [
    {
      "name": "parseChunked",
      "args": [
        "input"
      ],
      "returnType": "Promise<any>;"
    },
    {
      "name": "parseChunked",
      "args": [
        "input"
      ]
    },
    {
      "name": "stringifyStream",
      "args": [
        "value",
        "replacer?",
        "space?"
      ],
      "returnType": "Readable;"
    },
    {
      "name": "stringifyInfo",
      "args": [
        "value",
        "replacer?",
        "space?",
        "options?\n            async?: boolean;\n            continueOnCircular?: boolean;\n        }"
      ],
      "returnType": ""
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@eslint-community\\regexpp\\index.d.ts": [
    {
      "name": "parseRegExpLiteral",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "AST.RegExpLiteral;"
    },
    {
      "name": "validateRegExpLiteral",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "visitRegExpAST",
      "args": [
        "node",
        "handlers"
      ],
      "returnType": "void;"
    },
    {
      "name": "newRegExpSyntaxError",
      "args": [
        "srcCtx",
        "flags\n      unicode: boolean;\n      unicodeSets: boolean;\n    }",
        "index",
        "message"
      ],
      "returnType": "RegExpSyntaxError;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@isaacs\\cliui\\node_modules\\ansi-regex\\index.d.ts": [
    {
      "name": "ansiRegex",
      "args": [
        "options?"
      ],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@isaacs\\cliui\\node_modules\\strip-ansi\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\gen-mapping\\dist\\types\\gen-mapping.d.ts": [
    {
      "name": "addSegment",
      "args": [
        "map",
        "genLine",
        "genColumn",
        "source?",
        "sourceLine?",
        "sourceColumn?",
        "name?",
        "content?"
      ],
      "returnType": "void;"
    },
    {
      "name": "addSegment",
      "args": [
        "map",
        "genLine",
        "genColumn",
        "source",
        "sourceLine",
        "sourceColumn",
        "name?",
        "content?"
      ],
      "returnType": "void;"
    },
    {
      "name": "addSegment",
      "args": [
        "map",
        "genLine",
        "genColumn",
        "source",
        "sourceLine",
        "sourceColumn",
        "name",
        "content?"
      ],
      "returnType": "void;"
    },
    {
      "name": "addMapping",
      "args": [
        "map",
        "mapping\n    generated: Pos;\n    source?: null;\n    original?: null;\n    name?: null;\n    content?: null;\n}"
      ],
      "returnType": "void;"
    },
    {
      "name": "addMapping",
      "args": [
        "map",
        "mapping\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name?: null;\n    content?: string | null;\n}"
      ],
      "returnType": "void;"
    },
    {
      "name": "addMapping",
      "args": [
        "map",
        "mapping\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name: string;\n    content?: string | null;\n}"
      ],
      "returnType": "void;"
    },
    {
      "name": "setSourceContent",
      "args": [
        "map",
        "source",
        "content"
      ],
      "returnType": "void;"
    },
    {
      "name": "setIgnore",
      "args": [
        "map",
        "source",
        "ignore?"
      ],
      "returnType": "void;"
    },
    {
      "name": "toDecodedMap",
      "args": [
        "map"
      ],
      "returnType": "DecodedSourceMap;"
    },
    {
      "name": "toEncodedMap",
      "args": [
        "map"
      ],
      "returnType": "EncodedSourceMap;"
    },
    {
      "name": "fromMap",
      "args": [
        "input"
      ],
      "returnType": "GenMapping;"
    },
    {
      "name": "allMappings",
      "args": [
        "map"
      ],
      "returnType": "Mapping[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\resolve-uri\\dist\\types\\resolve-uri.d.ts": [
    {
      "name": "resolve",
      "args": [
        "input",
        "base"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\sourcemap-codec\\dist\\types\\sourcemap-codec.d.ts": [
    {
      "name": "decode",
      "args": [
        "mappings"
      ],
      "returnType": "SourceMapMappings;"
    },
    {
      "name": "encode",
      "args": [
        "decoded"
      ],
      "returnType": "string;"
    },
    {
      "name": "encode",
      "args": [
        "decoded"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\binary-search.d.ts": [
    {
      "name": "binarySearch",
      "args": [
        "haystack",
        "needle",
        "low",
        "high"
      ],
      "returnType": "number;"
    },
    {
      "name": "upperBound",
      "args": [
        "haystack",
        "needle",
        "index"
      ],
      "returnType": "number;"
    },
    {
      "name": "lowerBound",
      "args": [
        "haystack",
        "needle",
        "index"
      ],
      "returnType": "number;"
    },
    {
      "name": "memoizedState",
      "args": [],
      "returnType": "MemoState;"
    },
    {
      "name": "memoizedBinarySearch",
      "args": [
        "haystack",
        "needle",
        "state",
        "key"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\by-source.d.ts": [
    {
      "name": "buildBySources",
      "args": [
        "decoded",
        "memos"
      ],
      "returnType": "Source[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\resolve.d.ts": [
    {
      "name": "resolve",
      "args": [
        "input",
        "base"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\sort.d.ts": [
    {
      "name": "maybeSort",
      "args": [
        "mappings",
        "owned"
      ],
      "returnType": "SourceMapSegment[][];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\strip-filename.d.ts": [
    {
      "name": "stripFilename",
      "args": [
        "path"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@jridgewell\\trace-mapping\\dist\\types\\trace-mapping.d.ts": [
    {
      "name": "encodedMappings",
      "args": [
        "map"
      ],
      "returnType": "EncodedSourceMap['mappings'];"
    },
    {
      "name": "decodedMappings",
      "args": [
        "map"
      ],
      "returnType": "Readonly<DecodedSourceMap['mappings']>;"
    },
    {
      "name": "traceSegment",
      "args": [
        "map",
        "line",
        "column"
      ],
      "returnType": "Readonly<SourceMapSegment> | null;"
    },
    {
      "name": "originalPositionFor",
      "args": [
        "map",
        "needle"
      ],
      "returnType": "OriginalMapping | InvalidOriginalMapping;"
    },
    {
      "name": "generatedPositionFor",
      "args": [
        "map",
        "needle"
      ],
      "returnType": "GeneratedMapping | InvalidGeneratedMapping;"
    },
    {
      "name": "allGeneratedPositionsFor",
      "args": [
        "map",
        "needle"
      ],
      "returnType": "GeneratedMapping[];"
    },
    {
      "name": "eachMapping",
      "args": [
        "map",
        "cb"
      ]
    },
    {
      "name": "sourceContentFor",
      "args": [
        "map",
        "source"
      ],
      "returnType": "string | null;"
    },
    {
      "name": "isIgnored",
      "args": [
        "map",
        "source"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "presortedDecodedMap",
      "args": [
        "map",
        "mapUrl?"
      ],
      "returnType": "TraceMap;"
    },
    {
      "name": "decodedMap",
      "args": [
        "map"
      ],
      "returnType": "Omit<DecodedSourceMap, 'mappings'> &"
    },
    {
      "name": "encodedMap",
      "args": [
        "map"
      ],
      "returnType": "EncodedSourceMap;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\adapters\\fs.d.ts": [
    {
      "name": "createFileSystemAdapter",
      "args": [
        "fsMethods?"
      ],
      "returnType": "FileSystemAdapter;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\index.d.ts": [
    {
      "name": "scandir",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "scandir",
      "args": [
        "path",
        "optionsOrSettings",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "optionsOrSettings?"
      ],
      "returnType": "Promise<Entry[]>;"
    },
    {
      "name": "scandirSync",
      "args": [
        "path",
        "optionsOrSettings?"
      ],
      "returnType": "Entry[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\providers\\async.d.ts": [
    {
      "name": "read",
      "args": [
        "directory",
        "settings",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "readdirWithFileTypes",
      "args": [
        "directory",
        "settings",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "readdir",
      "args": [
        "directory",
        "settings",
        "callback"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\providers\\common.d.ts": [
    {
      "name": "joinPathSegments",
      "args": [
        "a",
        "b",
        "separator"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\providers\\sync.d.ts": [
    {
      "name": "read",
      "args": [
        "directory",
        "settings"
      ],
      "returnType": "Entry[];"
    },
    {
      "name": "readdirWithFileTypes",
      "args": [
        "directory",
        "settings"
      ],
      "returnType": "Entry[];"
    },
    {
      "name": "readdir",
      "args": [
        "directory",
        "settings"
      ],
      "returnType": "Entry[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.scandir\\out\\utils\\fs.d.ts": [
    {
      "name": "createDirentFromStats",
      "args": [
        "name",
        "stats"
      ],
      "returnType": "Dirent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.stat\\out\\adapters\\fs.d.ts": [
    {
      "name": "createFileSystemAdapter",
      "args": [
        "fsMethods?"
      ],
      "returnType": "FileSystemAdapter;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.stat\\out\\index.d.ts": [
    {
      "name": "stat",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "stat",
      "args": [
        "path",
        "optionsOrSettings",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "optionsOrSettings?"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "statSync",
      "args": [
        "path",
        "optionsOrSettings?"
      ],
      "returnType": "Stats;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.stat\\out\\providers\\async.d.ts": [
    {
      "name": "read",
      "args": [
        "path",
        "settings",
        "callback"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.stat\\out\\providers\\sync.d.ts": [
    {
      "name": "read",
      "args": [
        "path",
        "settings"
      ],
      "returnType": "Stats;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.walk\\out\\index.d.ts": [
    {
      "name": "walk",
      "args": [
        "directory",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "walk",
      "args": [
        "directory",
        "optionsOrSettings",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "directory",
        "optionsOrSettings?"
      ],
      "returnType": "Promise<Entry[]>;"
    },
    {
      "name": "walkSync",
      "args": [
        "directory",
        "optionsOrSettings?"
      ],
      "returnType": "Entry[];"
    },
    {
      "name": "walkStream",
      "args": [
        "directory",
        "optionsOrSettings?"
      ],
      "returnType": "Readable;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@nodelib\\fs.walk\\out\\readers\\common.d.ts": [
    {
      "name": "isFatalError",
      "args": [
        "settings",
        "error"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "replacePathSegmentSeparator",
      "args": [
        "filepath",
        "separator"
      ],
      "returnType": "string;"
    },
    {
      "name": "joinPathSegments",
      "args": [
        "a",
        "b",
        "separator"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\eslint-scope\\index.d.ts": [
    {
      "name": "analyze",
      "args": [
        "ast",
        "options?"
      ],
      "returnType": "ScopeManager;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\istanbul-lib-coverage\\index.d.ts": [
    {
      "name": "createCoverageMap",
      "args": [
        "data?"
      ],
      "returnType": "CoverageMap;"
    },
    {
      "name": "createCoverageSummary",
      "args": [
        "obj?"
      ],
      "returnType": "CoverageSummary;"
    },
    {
      "name": "createFileCoverage",
      "args": [
        "pathOrObject"
      ],
      "returnType": "FileCoverage;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\json-schema\\index.d.ts": [
    {
      "name": "validate",
      "args": [
        "instance",
        "schema"
      ],
      "returnType": "ValidationResult;"
    },
    {
      "name": "checkPropertyChange",
      "args": [
        "value",
        "schema",
        "property"
      ],
      "returnType": "ValidationResult;"
    },
    {
      "name": "mustBeValid",
      "args": [
        "result"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\mocha\\index.d.ts": [
    {
      "name": "slug",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "clean",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "highlight",
      "args": [
        "js"
      ],
      "returnType": "string;"
    },
    {
      "name": "type",
      "args": [
        "value"
      ],
      "returnType": "string;"
    },
    {
      "name": "stringify",
      "args": [
        "value"
      ],
      "returnType": "string;"
    },
    {
      "name": "canonicalize",
      "args": [
        "value",
        "stack",
        "typeHint"
      ],
      "returnType": "any;"
    },
    {
      "name": "undefinedError",
      "args": [],
      "returnType": "Error;"
    },
    {
      "name": "getError",
      "args": [
        "err"
      ],
      "returnType": "Error;"
    },
    {
      "name": "stackTraceFilter",
      "args": [],
      "returnType": "(stack: string) => string;"
    },
    {
      "name": "bdd",
      "args": [
        "suite"
      ],
      "returnType": "void;"
    },
    {
      "name": "tdd",
      "args": [
        "suite"
      ],
      "returnType": "void;"
    },
    {
      "name": "qunit",
      "args": [
        "suite"
      ],
      "returnType": "void;"
    },
    {
      "name": "exports",
      "args": [
        "suite"
      ],
      "returnType": "void;"
    },
    {
      "name": "run",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "color",
      "args": [
        "type",
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "hide",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "show",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "deleteLine",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "beginningOfLine",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "CR",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "generateDiff",
      "args": [
        "actual",
        "expected"
      ],
      "returnType": "string;"
    },
    {
      "name": "list",
      "args": [
        "failures"
      ],
      "returnType": "void;"
    },
    {
      "name": "run",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "createStatsCollector",
      "args": [
        "runner"
      ],
      "returnType": "void;"
    },
    {
      "name": "common",
      "args": [
        "suites",
        "context",
        "mocha"
      ],
      "returnType": "common.CommonFunctions;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\assert.d.ts": [
    {
      "name": "assert",
      "args": [
        "value",
        "message?"
      ],
      "returnType": "asserts value;"
    },
    {
      "name": "func",
      "args": []
    },
    {
      "name": "func",
      "args": []
    },
    {
      "name": "func",
      "args": []
    },
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "func",
      "args": []
    },
    {
      "name": "func",
      "args": []
    },
    {
      "name": "fail",
      "args": [
        "message?"
      ],
      "returnType": "never;"
    },
    {
      "name": "fail",
      "args": [
        "actual",
        "expected",
        "message?",
        "operator?",
        "// eslint-disable-next-line @typescript-eslint/ban-types\n            stackStartFn?"
      ],
      "returnType": "never;"
    },
    {
      "name": "ok",
      "args": [
        "value",
        "message?"
      ],
      "returnType": "asserts value;"
    },
    {
      "name": "equal",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "notEqual",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "deepEqual",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "notDeepEqual",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "notStrictEqual",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "notDeepStrictEqual",
      "args": [
        "actual",
        "expected",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "throwingFirst",
      "args": []
    },
    {
      "name": "throwingSecond",
      "args": []
    },
    {
      "name": "notThrowing",
      "args": []
    },
    {
      "name": "throws",
      "args": [
        "block"
      ]
    },
    {
      "name": "throws",
      "args": [
        "block"
      ]
    },
    {
      "name": "doesNotThrow",
      "args": [
        "block"
      ]
    },
    {
      "name": "doesNotThrow",
      "args": [
        "block"
      ]
    },
    {
      "name": "errorFrame",
      "args": []
    },
    {
      "name": "ifErrorFrame",
      "args": []
    },
    {
      "name": "ifError",
      "args": [
        "value"
      ],
      "returnType": "asserts value is null | undefined;"
    },
    {
      "name": "rejects",
      "args": [
        "block"
      ]
    },
    {
      "name": "rejects",
      "args": [
        "block"
      ]
    },
    {
      "name": "doesNotReject",
      "args": [
        "block"
      ]
    },
    {
      "name": "doesNotReject",
      "args": [
        "block"
      ]
    },
    {
      "name": "match",
      "args": [
        "value",
        "regExp",
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "doesNotMatch",
      "args": [
        "value",
        "regExp",
        "message?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\async_hooks.d.ts": [
    {
      "name": "executionAsyncId",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "executionAsyncResource",
      "args": [],
      "returnType": "object;"
    },
    {
      "name": "triggerAsyncId",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "createHook",
      "args": [
        "callbacks"
      ],
      "returnType": "AsyncHook;"
    },
    {
      "name": "logWithId",
      "args": [
        "msg"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\buffer.d.ts": [
    {
      "name": "isUtf8",
      "args": [
        "input"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isAscii",
      "args": [
        "input"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "transcode",
      "args": [
        "source",
        "fromEnc",
        "toEnc"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "resolveObjectURL",
      "args": [
        "id"
      ],
      "returnType": "Blob | undefined;"
    },
    {
      "name": "atob",
      "args": [
        "data"
      ],
      "returnType": "string;"
    },
    {
      "name": "btoa",
      "args": [
        "data"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\child_process.d.ts": [
    {
      "name": "spawn",
      "args": [
        "command",
        "options?"
      ],
      "returnType": "ChildProcessWithoutNullStreams;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioPipe",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<Writable, Readable, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioPipe",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<Writable, Readable, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioNull",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<Writable, null, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioPipe",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<null, Readable, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioNull",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<Writable, null, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioPipe",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<null, Readable, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioNull",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<null, null, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options",
        "StdioNull",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<null, null, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "options"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args?",
        "options?"
      ],
      "returnType": "ChildProcessWithoutNullStreams;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioPipe",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<Writable, Readable, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioPipe",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<Writable, Readable, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioNull",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<Writable, null, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioPipe",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<null, Readable, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioNull",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<Writable, null, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioPipe",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<null, Readable, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioNull",
        "StdioPipe>"
      ],
      "returnType": "ChildProcessByStdio<null, null, Readable>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options",
        "StdioNull",
        "StdioNull>"
      ],
      "returnType": "ChildProcessByStdio<null, null, null>;"
    },
    {
      "name": "spawn",
      "args": [
        "command",
        "args",
        "options"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "lsExample",
      "args": []
    },
    {
      "name": "exec",
      "args": [
        "command",
        "callback?",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "exec",
      "args": [
        "command",
        "options\n            encoding: \"buffer\" | null;\n        } & ExecOptions",
        "callback?",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "exec",
      "args": [
        "command",
        "options\n            encoding: BufferEncoding;\n        } & ExecOptions",
        "callback?",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "exec",
      "args": [
        "command",
        "options\n            encoding: BufferEncoding;\n        } & ExecOptions",
        "callback?",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "exec",
      "args": [
        "command",
        "options",
        "callback?",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "exec",
      "args": [
        "command",
        "options"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "command"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "command",
        "options\n                encoding: \"buffer\" | null;\n            } & ExecOptions"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "command",
        "options\n                encoding: BufferEncoding;\n            } & ExecOptions"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "command",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "command",
        "options?"
      ]
    },
    {
      "name": "getVersion",
      "args": []
    },
    {
      "name": "execFile",
      "args": [
        "file"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options",
        "callback",
        "stdout",
        "stderr"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "options"
      ]
    },
    {
      "name": "execFile",
      "args": [
        "file",
        "args",
        "options"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "file"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "PromiseWithChild<"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "options"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "args",
        "options"
      ]
    },
    {
      "name": "fork",
      "args": [
        "modulePath",
        "options?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "fork",
      "args": [
        "modulePath",
        "args?",
        "options?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command"
      ],
      "returnType": "SpawnSyncReturns<Buffer>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "options"
      ],
      "returnType": "SpawnSyncReturns<string>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "options"
      ],
      "returnType": "SpawnSyncReturns<Buffer>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "options?"
      ],
      "returnType": "SpawnSyncReturns<string | Buffer>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "args"
      ],
      "returnType": "SpawnSyncReturns<Buffer>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "args",
        "options"
      ],
      "returnType": "SpawnSyncReturns<string>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "args",
        "options"
      ],
      "returnType": "SpawnSyncReturns<Buffer>;"
    },
    {
      "name": "spawnSync",
      "args": [
        "command",
        "args?",
        "options?"
      ],
      "returnType": "SpawnSyncReturns<string | Buffer>;"
    },
    {
      "name": "execSync",
      "args": [
        "command"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execSync",
      "args": [
        "command",
        "options"
      ],
      "returnType": "string;"
    },
    {
      "name": "execSync",
      "args": [
        "command",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execSync",
      "args": [
        "command",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "options"
      ],
      "returnType": "string;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "args"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "string;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "args",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "execFileSync",
      "args": [
        "file",
        "args?",
        "options?"
      ],
      "returnType": "string | Buffer;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\crypto.d.ts": [
    {
      "name": "createHash",
      "args": [
        "algorithm",
        "options?"
      ],
      "returnType": "Hash;"
    },
    {
      "name": "createHmac",
      "args": [
        "algorithm",
        "key",
        "options?"
      ],
      "returnType": "Hmac;"
    },
    {
      "name": "createCipher",
      "args": [
        "algorithm",
        "password",
        "options"
      ],
      "returnType": "CipherCCM;"
    },
    {
      "name": "createCipher",
      "args": [
        "algorithm",
        "password",
        "options?"
      ],
      "returnType": "CipherGCM;"
    },
    {
      "name": "createCipher",
      "args": [
        "algorithm",
        "password",
        "options?"
      ],
      "returnType": "Cipher;"
    },
    {
      "name": "createCipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options"
      ],
      "returnType": "CipherCCM;"
    },
    {
      "name": "createCipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options"
      ],
      "returnType": "CipherOCB;"
    },
    {
      "name": "createCipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options?"
      ],
      "returnType": "CipherGCM;"
    },
    {
      "name": "createCipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options?"
      ],
      "returnType": "Cipher;"
    },
    {
      "name": "createDecipher",
      "args": [
        "algorithm",
        "password",
        "options"
      ],
      "returnType": "DecipherCCM;"
    },
    {
      "name": "createDecipher",
      "args": [
        "algorithm",
        "password",
        "options?"
      ],
      "returnType": "DecipherGCM;"
    },
    {
      "name": "createDecipher",
      "args": [
        "algorithm",
        "password",
        "options?"
      ],
      "returnType": "Decipher;"
    },
    {
      "name": "createDecipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options"
      ],
      "returnType": "DecipherCCM;"
    },
    {
      "name": "createDecipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options"
      ],
      "returnType": "DecipherOCB;"
    },
    {
      "name": "createDecipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options?"
      ],
      "returnType": "DecipherGCM;"
    },
    {
      "name": "createDecipheriv",
      "args": [
        "algorithm",
        "key",
        "iv",
        "options?"
      ],
      "returnType": "Decipher;"
    },
    {
      "name": "generateKey",
      "args": [
        "type",
        "options\n            length: number;\n        }",
        "callback",
        "key"
      ]
    },
    {
      "name": "generateKeySync",
      "args": [
        "type",
        "options\n            length: number;\n        }"
      ],
      "returnType": "KeyObject;"
    },
    {
      "name": "createPrivateKey",
      "args": [
        "key"
      ],
      "returnType": "KeyObject;"
    },
    {
      "name": "createPublicKey",
      "args": [
        "key"
      ],
      "returnType": "KeyObject;"
    },
    {
      "name": "createSecretKey",
      "args": [
        "key"
      ],
      "returnType": "KeyObject;"
    },
    {
      "name": "createSecretKey",
      "args": [
        "key",
        "encoding"
      ],
      "returnType": "KeyObject;"
    },
    {
      "name": "createSign",
      "args": [
        "algorithm",
        "options?"
      ],
      "returnType": "Sign;"
    },
    {
      "name": "createVerify",
      "args": [
        "algorithm",
        "options?"
      ],
      "returnType": "Verify;"
    },
    {
      "name": "createDiffieHellman",
      "args": [
        "primeLength",
        "generator?"
      ],
      "returnType": "DiffieHellman;"
    },
    {
      "name": "createDiffieHellman",
      "args": [
        "prime",
        "generator?"
      ],
      "returnType": "DiffieHellman;"
    },
    {
      "name": "createDiffieHellman",
      "args": [
        "prime",
        "generator",
        "generatorEncoding"
      ],
      "returnType": "DiffieHellman;"
    },
    {
      "name": "createDiffieHellman",
      "args": [
        "prime",
        "primeEncoding",
        "generator?"
      ],
      "returnType": "DiffieHellman;"
    },
    {
      "name": "createDiffieHellman",
      "args": [
        "prime",
        "primeEncoding",
        "generator",
        "generatorEncoding"
      ],
      "returnType": "DiffieHellman;"
    },
    {
      "name": "getDiffieHellman",
      "args": [
        "groupName"
      ],
      "returnType": "DiffieHellmanGroup;"
    },
    {
      "name": "createDiffieHellmanGroup",
      "args": [
        "name"
      ],
      "returnType": "DiffieHellmanGroup;"
    },
    {
      "name": "pbkdf2",
      "args": [
        "password",
        "salt",
        "iterations",
        "keylen",
        "digest",
        "callback",
        "derivedKey"
      ]
    },
    {
      "name": "pbkdf2Sync",
      "args": [
        "password",
        "salt",
        "iterations",
        "keylen",
        "digest"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "randomBytes",
      "args": [
        "size"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "randomBytes",
      "args": [
        "size",
        "callback",
        "buf"
      ]
    },
    {
      "name": "pseudoRandomBytes",
      "args": [
        "size"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "pseudoRandomBytes",
      "args": [
        "size",
        "callback",
        "buf"
      ]
    },
    {
      "name": "randomInt",
      "args": [
        "max"
      ],
      "returnType": "number;"
    },
    {
      "name": "randomInt",
      "args": [
        "min",
        "max"
      ],
      "returnType": "number;"
    },
    {
      "name": "randomInt",
      "args": [
        "max",
        "callback",
        "value"
      ]
    },
    {
      "name": "randomInt",
      "args": [
        "min",
        "max",
        "callback",
        "value"
      ]
    },
    {
      "name": "scrypt",
      "args": [
        "password",
        "salt",
        "keylen",
        "callback",
        "derivedKey"
      ]
    },
    {
      "name": "scrypt",
      "args": [
        "password",
        "salt",
        "keylen",
        "options",
        "callback",
        "derivedKey"
      ]
    },
    {
      "name": "scryptSync",
      "args": [
        "password",
        "salt",
        "keylen",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "publicEncrypt",
      "args": [
        "key",
        "buffer"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "publicDecrypt",
      "args": [
        "key",
        "buffer"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "privateDecrypt",
      "args": [
        "privateKey",
        "buffer"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "privateEncrypt",
      "args": [
        "privateKey",
        "buffer"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "getCiphers",
      "args": [],
      "returnType": "string[];"
    },
    {
      "name": "getCurves",
      "args": [],
      "returnType": "string[];"
    },
    {
      "name": "getFips",
      "args": [],
      "returnType": "1 | 0;"
    },
    {
      "name": "setFips",
      "args": [
        "bool"
      ],
      "returnType": "void;"
    },
    {
      "name": "getHashes",
      "args": [],
      "returnType": "string[];"
    },
    {
      "name": "createECDH",
      "args": [
        "curveName"
      ],
      "returnType": "ECDH;"
    },
    {
      "name": "timingSafeEqual",
      "args": [
        "a",
        "b"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<string, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<string, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, string>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "KeyPairSyncResult<Buffer, Buffer>;"
    },
    {
      "name": "generateKeyPairSync",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "KeyPairKeyObjectResult;"
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"pem\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "\"der\">",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "generateKeyPair",
      "args": [
        "type",
        "options",
        "callback",
        "publicKey",
        "privateKey"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"pem\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options",
        "\"der\">"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "__promisify__",
      "args": [
        "type",
        "options?"
      ],
      "returnType": "Promise<KeyPairKeyObjectResult>;"
    },
    {
      "name": "sign",
      "args": [
        "algorithm",
        "data",
        "key"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "sign",
      "args": [
        "algorithm",
        "data",
        "key",
        "callback",
        "data"
      ]
    },
    {
      "name": "verify",
      "args": [
        "algorithm",
        "data",
        "key",
        "signature"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "verify",
      "args": [
        "algorithm",
        "data",
        "key",
        "signature",
        "callback",
        "result"
      ]
    },
    {
      "name": "diffieHellman",
      "args": [
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "getCipherInfo",
      "args": [
        "nameOrNid",
        "options?"
      ],
      "returnType": "CipherInfo | undefined;"
    },
    {
      "name": "hkdf",
      "args": [
        "digest",
        "irm",
        "salt",
        "info",
        "keylen",
        "callback",
        "derivedKey"
      ]
    },
    {
      "name": "hkdfSync",
      "args": [
        "digest",
        "ikm",
        "salt",
        "info",
        "keylen"
      ],
      "returnType": "ArrayBuffer;"
    },
    {
      "name": "secureHeapUsed",
      "args": [],
      "returnType": "SecureHeapUsage;"
    },
    {
      "name": "randomUUID",
      "args": [
        "options?"
      ],
      "returnType": "UUID;"
    },
    {
      "name": "generatePrime",
      "args": [
        "size",
        "callback",
        "prime"
      ]
    },
    {
      "name": "generatePrime",
      "args": [
        "size",
        "options",
        "callback",
        "prime"
      ]
    },
    {
      "name": "generatePrime",
      "args": [
        "size",
        "options",
        "callback",
        "prime"
      ]
    },
    {
      "name": "generatePrime",
      "args": [
        "size",
        "options",
        "callback",
        "prime"
      ]
    },
    {
      "name": "generatePrimeSync",
      "args": [
        "size"
      ],
      "returnType": "ArrayBuffer;"
    },
    {
      "name": "generatePrimeSync",
      "args": [
        "size",
        "options"
      ],
      "returnType": "bigint;"
    },
    {
      "name": "generatePrimeSync",
      "args": [
        "size",
        "options"
      ],
      "returnType": "ArrayBuffer;"
    },
    {
      "name": "generatePrimeSync",
      "args": [
        "size",
        "options"
      ],
      "returnType": "ArrayBuffer | bigint;"
    },
    {
      "name": "checkPrime",
      "args": [
        "value",
        "callback",
        "result"
      ]
    },
    {
      "name": "checkPrime",
      "args": [
        "value",
        "options",
        "callback",
        "result"
      ]
    },
    {
      "name": "checkPrimeSync",
      "args": [
        "candidate",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "setEngine",
      "args": [
        "engine",
        "flags?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\dgram.d.ts": [
    {
      "name": "createSocket",
      "args": [
        "type",
        "callback?",
        "rinfo"
      ]
    },
    {
      "name": "createSocket",
      "args": [
        "options",
        "callback?",
        "rinfo"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\diagnostics_channel.d.ts": [
    {
      "name": "hasSubscribers",
      "args": [
        "name"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "channel",
      "args": [
        "name"
      ],
      "returnType": "Channel;"
    },
    {
      "name": "subscribe",
      "args": [
        "name",
        "onMessage"
      ],
      "returnType": "void;"
    },
    {
      "name": "onMessage",
      "args": [
        "message",
        "name"
      ]
    },
    {
      "name": "unsubscribe",
      "args": [
        "name",
        "onMessage"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "onMessage",
      "args": [
        "message",
        "name"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\dns\\promises.d.ts": [
    {
      "name": "getServers",
      "args": [],
      "returnType": "string[];"
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "family"
      ],
      "returnType": "Promise<LookupAddress>;"
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<LookupAddress>;"
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<LookupAddress[]>;"
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<LookupAddress | LookupAddress[]>;"
    },
    {
      "name": "lookup",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<LookupAddress>;"
    },
    {
      "name": "lookupService",
      "args": [
        "address",
        "port"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "resolve",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<AnyRecord[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<CaaRecord[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<MxRecord[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<NaptrRecord[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<SoaRecord>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<SrvRecord[]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[][]>;"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;"
    },
    {
      "name": "resolve4",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve4",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<RecordWithTtl[]>;"
    },
    {
      "name": "resolve4",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<string[] | RecordWithTtl[]>;"
    },
    {
      "name": "resolve6",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolve6",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<RecordWithTtl[]>;"
    },
    {
      "name": "resolve6",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<string[] | RecordWithTtl[]>;"
    },
    {
      "name": "resolveAny",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<AnyRecord[]>;"
    },
    {
      "name": "resolveCaa",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<CaaRecord[]>;"
    },
    {
      "name": "resolveCname",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolveMx",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<MxRecord[]>;"
    },
    {
      "name": "resolveNaptr",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<NaptrRecord[]>;"
    },
    {
      "name": "resolveNs",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolvePtr",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolveSoa",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<SoaRecord>;"
    },
    {
      "name": "resolveSrv",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<SrvRecord[]>;"
    },
    {
      "name": "resolveTxt",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[][]>;"
    },
    {
      "name": "reverse",
      "args": [
        "ip"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "getDefaultResultOrder",
      "args": [],
      "returnType": "\"ipv4first\" | \"verbatim\";"
    },
    {
      "name": "setServers",
      "args": [
        "servers"
      ],
      "returnType": "void;"
    },
    {
      "name": "setDefaultResultOrder",
      "args": [
        "order"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\dns.d.ts": [
    {
      "name": "lookup",
      "args": [
        "hostname",
        "family",
        "callback",
        "address",
        "family"
      ]
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options",
        "callback",
        "address",
        "family"
      ]
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "options",
        "callback",
        "address",
        "family"
      ]
    },
    {
      "name": "lookup",
      "args": [
        "hostname",
        "callback",
        "address",
        "family"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<LookupAddress[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options?"
      ],
      "returnType": "Promise<LookupAddress>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<LookupAddress | LookupAddress[]>;"
    },
    {
      "name": "lookupService",
      "args": [
        "address",
        "port",
        "callback",
        "hostname",
        "service"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "address",
        "port"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "hostname",
        "rrtype",
        "callback\n            err: NodeJS.ErrnoException | null",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype?"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<AnyRecord[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<MxRecord[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<NaptrRecord[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<SoaRecord>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<SrvRecord[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[][]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "rrtype"
      ],
      "returnType": "Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;"
    },
    {
      "name": "resolve4",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve4",
      "args": [
        "hostname",
        "options",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve4",
      "args": [
        "hostname",
        "options",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<RecordWithTtl[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options?"
      ],
      "returnType": "Promise<string[] | RecordWithTtl[]>;"
    },
    {
      "name": "resolve6",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve6",
      "args": [
        "hostname",
        "options",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "resolve6",
      "args": [
        "hostname",
        "options",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options"
      ],
      "returnType": "Promise<RecordWithTtl[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname",
        "options?"
      ],
      "returnType": "Promise<string[] | RecordWithTtl[]>;"
    },
    {
      "name": "resolveCname",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolveCaa",
      "args": [
        "hostname",
        "callback",
        "records"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<CaaRecord[]>;"
    },
    {
      "name": "resolveMx",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<MxRecord[]>;"
    },
    {
      "name": "resolveNaptr",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<NaptrRecord[]>;"
    },
    {
      "name": "resolveNs",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolvePtr",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "resolveSoa",
      "args": [
        "hostname",
        "callback",
        "address"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<SoaRecord>;"
    },
    {
      "name": "resolveSrv",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<SrvRecord[]>;"
    },
    {
      "name": "resolveTxt",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<string[][]>;"
    },
    {
      "name": "resolveAny",
      "args": [
        "hostname",
        "callback",
        "addresses"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "hostname"
      ],
      "returnType": "Promise<AnyRecord[]>;"
    },
    {
      "name": "reverse",
      "args": [
        "ip",
        "callback",
        "hostnames"
      ]
    },
    {
      "name": "getDefaultResultOrder",
      "args": [],
      "returnType": "\"ipv4first\" | \"verbatim\";"
    },
    {
      "name": "setServers",
      "args": [
        "servers"
      ],
      "returnType": "void;"
    },
    {
      "name": "getServers",
      "args": [],
      "returnType": "string[];"
    },
    {
      "name": "setDefaultResultOrder",
      "args": [
        "order"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\domain.d.ts": [
    {
      "name": "readSomeFile",
      "args": [
        "filename",
        "cb"
      ]
    },
    {
      "name": "readSomeFile",
      "args": [
        "filename",
        "cb"
      ]
    },
    {
      "name": "create",
      "args": [],
      "returnType": "Domain;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\events.d.ts": [
    {
      "name": "run",
      "args": []
    },
    {
      "name": "foo",
      "args": [
        "emitter",
        "event",
        "signal"
      ]
    },
    {
      "name": "example",
      "args": [
        "signal"
      ]
    },
    {
      "name": "callback",
      "args": [
        "stream"
      ]
    },
    {
      "name": "callbackA",
      "args": []
    },
    {
      "name": "callbackB",
      "args": []
    },
    {
      "name": "pong",
      "args": []
    },
    {
      "name": "firstListener",
      "args": []
    },
    {
      "name": "secondListener",
      "args": [
        "arg1",
        "arg2"
      ]
    },
    {
      "name": "thirdListener",
      "args": [
        "...args"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\fs\\promises.d.ts": [
    {
      "name": "access",
      "args": [
        "path",
        "mode?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "copyFile",
      "args": [
        "src",
        "dest",
        "mode?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "open",
      "args": [
        "path",
        "flags?",
        "mode?"
      ],
      "returnType": "Promise<FileHandle>;"
    },
    {
      "name": "rename",
      "args": [
        "oldPath",
        "newPath"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "truncate",
      "args": [
        "path",
        "len?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "rmdir",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "rm",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options\n            recursive: true;\n        }"
      ],
      "returnType": "Promise<string | undefined>;"
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options?\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            }"
      ]
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | undefined>;"
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options?\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\""
      ],
      "returnType": "Promise<Buffer[]>;"
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options?\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        }"
      ],
      "returnType": "Promise<Dirent[]>;"
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "symlink",
      "args": [
        "target",
        "path",
        "type?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "opts?\n            bigint?: false | undefined;\n        }"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "opts\n            bigint: true;\n        }"
      ],
      "returnType": "Promise<BigIntStats>;"
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "opts?"
      ],
      "returnType": "Promise<Stats | BigIntStats>;"
    },
    {
      "name": "stat",
      "args": [
        "path",
        "opts?\n            bigint?: false | undefined;\n        }"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "stat",
      "args": [
        "path",
        "opts\n            bigint: true;\n        }"
      ],
      "returnType": "Promise<BigIntStats>;"
    },
    {
      "name": "stat",
      "args": [
        "path",
        "opts?"
      ],
      "returnType": "Promise<Stats | BigIntStats>;"
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "opts?\n            bigint?: false | undefined;\n        }"
      ],
      "returnType": "Promise<StatsFs>;"
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "opts\n            bigint: true;\n        }"
      ],
      "returnType": "Promise<BigIntStatsFs>;"
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "opts?"
      ],
      "returnType": "Promise<StatsFs | BigIntStatsFs>;"
    },
    {
      "name": "link",
      "args": [
        "existingPath",
        "newPath"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "unlink",
      "args": [
        "path"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "chmod",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lchmod",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lchown",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lutimes",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "chown",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "utimes",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "writeFile",
      "args": [
        "file",
        "data\n            | string\n            | NodeJS.ArrayBufferView\n            | Iterable<string | NodeJS.ArrayBufferView>\n            | AsyncIterable<string | NodeJS.ArrayBufferView>\n            | Stream",
        "options?\n            | (ObjectEncodingOptions & {\n                mode?: Mode | undefined;\n                flag?: OpenMode | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "appendFile",
      "args": [
        "path",
        "data",
        "options?"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options?\n            | ({\n                encoding?: null | undefined;\n                flag?: OpenMode | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options\n            | ({\n                encoding: BufferEncoding;\n                flag?: OpenMode | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options?\n            | (\n                & ObjectEncodingOptions\n                & Abortable\n                & {\n                    flag?: OpenMode | undefined;\n                }"
      ]
    },
    {
      "name": "opendir",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<Dir>;"
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options\n            | (WatchOptions & {\n                encoding: \"buffer\";\n            }"
      ]
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options?"
      ],
      "returnType": "AsyncIterable<FileChangeInfo<string>>;"
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options"
      ],
      "returnType": "AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>;"
    },
    {
      "name": "cp",
      "args": [
        "source",
        "destination",
        "opts?"
      ],
      "returnType": "Promise<void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\fs.d.ts": [
    {
      "name": "rename",
      "args": [
        "oldPath",
        "newPath",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "oldPath",
        "newPath"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "renameSync",
      "args": [
        "oldPath",
        "newPath"
      ],
      "returnType": "void;"
    },
    {
      "name": "truncate",
      "args": [
        "path",
        "len",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "truncate",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "len?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "truncateSync",
      "args": [
        "path",
        "len?"
      ],
      "returnType": "void;"
    },
    {
      "name": "closeFd",
      "args": [
        "fd"
      ]
    },
    {
      "name": "ftruncate",
      "args": [
        "fd",
        "len",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "ftruncate",
      "args": [
        "fd",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "len?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "ftruncateSync",
      "args": [
        "fd",
        "len?"
      ],
      "returnType": "void;"
    },
    {
      "name": "chown",
      "args": [
        "path",
        "uid",
        "gid",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "chownSync",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "void;"
    },
    {
      "name": "fchown",
      "args": [
        "fd",
        "uid",
        "gid",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "uid",
        "gid"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "fchownSync",
      "args": [
        "fd",
        "uid",
        "gid"
      ],
      "returnType": "void;"
    },
    {
      "name": "lchown",
      "args": [
        "path",
        "uid",
        "gid",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lchownSync",
      "args": [
        "path",
        "uid",
        "gid"
      ],
      "returnType": "void;"
    },
    {
      "name": "lutimes",
      "args": [
        "path",
        "atime",
        "mtime",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lutimesSync",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "void;"
    },
    {
      "name": "chmod",
      "args": [
        "path",
        "mode",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "chmodSync",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "void;"
    },
    {
      "name": "fchmod",
      "args": [
        "fd",
        "mode",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "mode"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "fchmodSync",
      "args": [
        "fd",
        "mode"
      ],
      "returnType": "void;"
    },
    {
      "name": "lchmod",
      "args": [
        "path",
        "mode",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "lchmodSync",
      "args": [
        "path",
        "mode"
      ],
      "returnType": "void;"
    },
    {
      "name": "stat",
      "args": [
        "path",
        "callback",
        "stats"
      ]
    },
    {
      "name": "stat",
      "args": [
        "path",
        "options\n            | (StatOptions & {\n                bigint?: false | undefined;\n            }"
      ]
    },
    {
      "name": "stat",
      "args": [
        "path",
        "options\n            bigint: true;\n        }",
        "callback",
        "stats"
      ]
    },
    {
      "name": "stat",
      "args": [
        "path",
        "options",
        "callback",
        "stats"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                bigint?: false | undefined;\n            }"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                bigint: true;\n            }"
      ],
      "returnType": "Promise<BigIntStats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<Stats | BigIntStats>;"
    },
    {
      "name": "fstat",
      "args": [
        "fd",
        "callback",
        "stats"
      ]
    },
    {
      "name": "fstat",
      "args": [
        "fd",
        "options\n            | (StatOptions & {\n                bigint?: false | undefined;\n            }"
      ]
    },
    {
      "name": "fstat",
      "args": [
        "fd",
        "options\n            bigint: true;\n        }",
        "callback",
        "stats"
      ]
    },
    {
      "name": "fstat",
      "args": [
        "fd",
        "options",
        "callback",
        "stats"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "options?\n                bigint?: false | undefined;\n            }"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "options\n                bigint: true;\n            }"
      ],
      "returnType": "Promise<BigIntStats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "options?"
      ],
      "returnType": "Promise<Stats | BigIntStats>;"
    },
    {
      "name": "fstatSync",
      "args": [
        "fd",
        "options?\n            bigint?: false | undefined;\n        }"
      ],
      "returnType": "Stats;"
    },
    {
      "name": "fstatSync",
      "args": [
        "fd",
        "options\n            bigint: true;\n        }"
      ],
      "returnType": "BigIntStats;"
    },
    {
      "name": "fstatSync",
      "args": [
        "fd",
        "options?"
      ],
      "returnType": "Stats | BigIntStats;"
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "callback",
        "stats"
      ]
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "options\n            | (StatOptions & {\n                bigint?: false | undefined;\n            }"
      ]
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "options\n            bigint: true;\n        }",
        "callback",
        "stats"
      ]
    },
    {
      "name": "lstat",
      "args": [
        "path",
        "options",
        "callback",
        "stats"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                bigint?: false | undefined;\n            }"
      ],
      "returnType": "Promise<Stats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                bigint: true;\n            }"
      ],
      "returnType": "Promise<BigIntStats>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<Stats | BigIntStats>;"
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "callback",
        "stats"
      ]
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "options\n            | (StatFsOptions & {\n                bigint?: false | undefined;\n            }"
      ]
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "options\n            bigint: true;\n        }",
        "callback",
        "stats"
      ]
    },
    {
      "name": "statfs",
      "args": [
        "path",
        "options",
        "callback",
        "stats"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                bigint?: false | undefined;\n            }"
      ],
      "returnType": "Promise<StatsFs>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                bigint: true;\n            }"
      ],
      "returnType": "Promise<BigIntStatsFs>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<StatsFs | BigIntStatsFs>;"
    },
    {
      "name": "statfsSync",
      "args": [
        "path",
        "options?\n            bigint?: false | undefined;\n        }"
      ],
      "returnType": "StatsFs;"
    },
    {
      "name": "statfsSync",
      "args": [
        "path",
        "options\n            bigint: true;\n        }"
      ],
      "returnType": "BigIntStatsFs;"
    },
    {
      "name": "statfsSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "StatsFs | BigIntStatsFs;"
    },
    {
      "name": "link",
      "args": [
        "existingPath",
        "newPath",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "existingPath",
        "newPath"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "linkSync",
      "args": [
        "existingPath",
        "newPath"
      ],
      "returnType": "void;"
    },
    {
      "name": "symlink",
      "args": [
        "target",
        "path",
        "type",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "symlink",
      "args": [
        "target",
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "target",
        "path",
        "type?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "symlinkSync",
      "args": [
        "target",
        "path",
        "type?"
      ],
      "returnType": "void;"
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options",
        "callback",
        "linkString"
      ]
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options",
        "callback",
        "linkString"
      ]
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "options",
        "callback",
        "linkString"
      ]
    },
    {
      "name": "readlink",
      "args": [
        "path",
        "callback",
        "linkString"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "readlinkSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "readlinkSync",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "readlinkSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "realpath",
      "args": [
        "path",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "native",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "native",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "native",
      "args": [
        "path",
        "options",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "native",
      "args": [
        "path",
        "callback",
        "resolvedPath"
      ]
    },
    {
      "name": "realpathSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "realpathSync",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "realpathSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "native",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "native",
      "args": [
        "path",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "native",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "unlink",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "unlinkSync",
      "args": [
        "path"
      ],
      "returnType": "void;"
    },
    {
      "name": "rmdir",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "rmdir",
      "args": [
        "path",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "rmdirSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "rm",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "rm",
      "args": [
        "path",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "rmSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options\n            recursive: true;\n        }",
        "callback",
        "path?"
      ]
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            }"
      ]
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "options",
        "callback",
        "path?"
      ]
    },
    {
      "name": "mkdir",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                recursive: true;\n            }"
      ],
      "returnType": "Promise<string | undefined>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                | Mode\n                | (MakeDirectoryOptions & {\n                    recursive?: false | undefined;\n                }"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<string | undefined>;"
    },
    {
      "name": "mkdirSync",
      "args": [
        "path",
        "options\n            recursive: true;\n        }"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "mkdirSync",
      "args": [
        "path",
        "options?\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            }"
      ]
    },
    {
      "name": "mkdirSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options",
        "callback",
        "folder"
      ]
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options\n            | \"buffer\"\n            | {\n                encoding: \"buffer\";\n            }",
        "callback",
        "folder"
      ]
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "options",
        "callback",
        "folder"
      ]
    },
    {
      "name": "mkdtemp",
      "args": [
        "prefix",
        "callback",
        "folder"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "prefix",
        "options"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "Promise<string | Buffer>;"
    },
    {
      "name": "mkdtempSync",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "mkdtempSync",
      "args": [
        "prefix",
        "options"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "mkdtempSync",
      "args": [
        "prefix",
        "options?"
      ],
      "returnType": "string | Buffer;"
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            | {\n                encoding: BufferEncoding | null;\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | BufferEncoding\n            | undefined\n            | null",
        "callback",
        "files"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\"",
        "callback",
        "files"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "callback",
        "files"
      ]
    },
    {
      "name": "readdir",
      "args": [
        "path",
        "options\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        }",
        "callback",
        "files"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                | {\n                    encoding: BufferEncoding | null;\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                }\n                | BufferEncoding\n                | null"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                | \"buffer\"\n                | {\n                    encoding: \"buffer\";\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                }"
      ],
      "returnType": "Promise<Buffer[]>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                | (ObjectEncodingOptions & {\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                }"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                withFileTypes: true;\n                recursive?: boolean | undefined;\n            }"
      ],
      "returnType": "Promise<Dirent[]>;"
    },
    {
      "name": "readdirSync",
      "args": [
        "path",
        "options?\n            | {\n                encoding: BufferEncoding | null;\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | BufferEncoding\n            | null"
      ],
      "returnType": "string[];"
    },
    {
      "name": "readdirSync",
      "args": [
        "path",
        "options\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\""
      ],
      "returnType": "Buffer[];"
    },
    {
      "name": "readdirSync",
      "args": [
        "path",
        "options?\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }"
      ]
    },
    {
      "name": "readdirSync",
      "args": [
        "path",
        "options\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        }"
      ],
      "returnType": "Dirent[];"
    },
    {
      "name": "close",
      "args": [
        "fd",
        "callback?"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "closeSync",
      "args": [
        "fd"
      ],
      "returnType": "void;"
    },
    {
      "name": "open",
      "args": [
        "path",
        "flags",
        "mode",
        "callback",
        "fd"
      ]
    },
    {
      "name": "open",
      "args": [
        "path",
        "flags",
        "callback",
        "fd"
      ]
    },
    {
      "name": "open",
      "args": [
        "path",
        "callback",
        "fd"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "flags",
        "mode?"
      ],
      "returnType": "Promise<number>;"
    },
    {
      "name": "openSync",
      "args": [
        "path",
        "flags",
        "mode?"
      ],
      "returnType": "number;"
    },
    {
      "name": "utimes",
      "args": [
        "path",
        "atime",
        "mtime",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "utimesSync",
      "args": [
        "path",
        "atime",
        "mtime"
      ],
      "returnType": "void;"
    },
    {
      "name": "futimes",
      "args": [
        "fd",
        "atime",
        "mtime",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "atime",
        "mtime"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "futimesSync",
      "args": [
        "fd",
        "atime",
        "mtime"
      ],
      "returnType": "void;"
    },
    {
      "name": "fsync",
      "args": [
        "fd",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "fsyncSync",
      "args": [
        "fd"
      ],
      "returnType": "void;"
    },
    {
      "name": "write",
      "args": [
        "fd",
        "string",
        "position",
        "encoding",
        "callback",
        "written",
        "str"
      ]
    },
    {
      "name": "write",
      "args": [
        "fd",
        "string",
        "position",
        "callback",
        "written",
        "str"
      ]
    },
    {
      "name": "write",
      "args": [
        "fd",
        "string",
        "callback",
        "written",
        "str"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "string",
        "position?",
        "encoding?"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "writeSync",
      "args": [
        "fd",
        "buffer",
        "offset?",
        "length?",
        "position?"
      ],
      "returnType": "number;"
    },
    {
      "name": "writeSync",
      "args": [
        "fd",
        "string",
        "position?",
        "encoding?"
      ],
      "returnType": "number;"
    },
    {
      "name": "read",
      "args": [
        "fd",
        "callback",
        "bytesRead",
        "buffer"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "fd"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "readSync",
      "args": [
        "fd",
        "buffer",
        "offset",
        "length",
        "position"
      ],
      "returnType": "number;"
    },
    {
      "name": "readSync",
      "args": [
        "fd",
        "buffer",
        "opts?"
      ],
      "returnType": "number;"
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options\n            | ({\n                encoding?: null | undefined;\n                flag?: string | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options\n            | ({\n                encoding: BufferEncoding;\n                flag?: string | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "options\n            | (ObjectEncodingOptions & {\n                flag?: string | undefined;\n            } & Abortable"
      ]
    },
    {
      "name": "readFile",
      "args": [
        "path",
        "callback",
        "data"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                encoding?: null | undefined;\n                flag?: string | undefined;\n            } | null"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options\n                | {\n                    encoding: BufferEncoding;\n                    flag?: string | undefined;\n                }\n                | BufferEncoding"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?\n                | (ObjectEncodingOptions & {\n                    flag?: string | undefined;\n                }"
      ]
    },
    {
      "name": "readFileSync",
      "args": [
        "path",
        "options?\n            encoding?: null | undefined;\n            flag?: string | undefined;\n        } | null"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "readFileSync",
      "args": [
        "path",
        "options\n            | {\n                encoding: BufferEncoding;\n                flag?: string | undefined;\n            }\n            | BufferEncoding"
      ],
      "returnType": "string;"
    },
    {
      "name": "readFileSync",
      "args": [
        "path",
        "options?\n            | (ObjectEncodingOptions & {\n                flag?: string | undefined;\n            }"
      ]
    },
    {
      "name": "writeFile",
      "args": [
        "file",
        "data",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "writeFile",
      "args": [
        "path",
        "data",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "data",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "writeFileSync",
      "args": [
        "file",
        "data",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "closeFd",
      "args": [
        "fd"
      ]
    },
    {
      "name": "appendFile",
      "args": [
        "path",
        "data",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "appendFile",
      "args": [
        "file",
        "data",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "file",
        "data",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "appendFileSync",
      "args": [
        "path",
        "data",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "watchFile",
      "args": [
        "filename",
        "options\n            | (WatchFileOptions & {\n                bigint?: false | undefined;\n            }"
      ]
    },
    {
      "name": "watchFile",
      "args": [
        "filename",
        "options\n            | (WatchFileOptions & {\n                bigint: true;\n            }"
      ]
    },
    {
      "name": "watchFile",
      "args": [
        "filename",
        "listener"
      ],
      "returnType": "StatWatcher;"
    },
    {
      "name": "unwatchFile",
      "args": [
        "filename",
        "listener?"
      ],
      "returnType": "void;"
    },
    {
      "name": "unwatchFile",
      "args": [
        "filename",
        "listener?"
      ],
      "returnType": "void;"
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options\n            | (WatchOptions & {\n                encoding: \"buffer\";\n            }"
      ]
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options?",
        "listener?"
      ],
      "returnType": "FSWatcher;"
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "options",
        "listener?"
      ],
      "returnType": "FSWatcher;"
    },
    {
      "name": "watch",
      "args": [
        "filename",
        "listener?"
      ],
      "returnType": "FSWatcher;"
    },
    {
      "name": "exists",
      "args": [
        "path",
        "callback"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path"
      ],
      "returnType": "Promise<boolean>;"
    },
    {
      "name": "existsSync",
      "args": [
        "path"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "access",
      "args": [
        "path",
        "mode",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "access",
      "args": [
        "path",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "mode?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "accessSync",
      "args": [
        "path",
        "mode?"
      ],
      "returnType": "void;"
    },
    {
      "name": "createReadStream",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "ReadStream;"
    },
    {
      "name": "createWriteStream",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "WriteStream;"
    },
    {
      "name": "fdatasync",
      "args": [
        "fd",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "fd"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "fdatasyncSync",
      "args": [
        "fd"
      ],
      "returnType": "void;"
    },
    {
      "name": "callback",
      "args": [
        "err"
      ]
    },
    {
      "name": "copyFile",
      "args": [
        "src",
        "dest",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "copyFile",
      "args": [
        "src",
        "dest",
        "mode",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "src",
        "dst",
        "mode?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "copyFileSync",
      "args": [
        "src",
        "dest",
        "mode?"
      ],
      "returnType": "void;"
    },
    {
      "name": "writev",
      "args": [
        "fd",
        "buffers",
        "cb",
        "bytesWritten",
        "buffers"
      ]
    },
    {
      "name": "writev",
      "args": [
        "fd",
        "buffers",
        "position",
        "cb",
        "bytesWritten",
        "buffers"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "buffers",
        "position?"
      ],
      "returnType": "Promise<WriteVResult>;"
    },
    {
      "name": "writevSync",
      "args": [
        "fd",
        "buffers",
        "position?"
      ],
      "returnType": "number;"
    },
    {
      "name": "readv",
      "args": [
        "fd",
        "buffers",
        "cb",
        "bytesRead",
        "buffers"
      ]
    },
    {
      "name": "readv",
      "args": [
        "fd",
        "buffers",
        "position",
        "cb",
        "bytesRead",
        "buffers"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "fd",
        "buffers",
        "position?"
      ],
      "returnType": "Promise<ReadVResult>;"
    },
    {
      "name": "readvSync",
      "args": [
        "fd",
        "buffers",
        "position?"
      ],
      "returnType": "number;"
    },
    {
      "name": "opendirSync",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Dir;"
    },
    {
      "name": "opendir",
      "args": [
        "path",
        "cb",
        "dir"
      ]
    },
    {
      "name": "opendir",
      "args": [
        "path",
        "options",
        "cb",
        "dir"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "path",
        "options?"
      ],
      "returnType": "Promise<Dir>;"
    },
    {
      "name": "cp",
      "args": [
        "source",
        "destination",
        "callback"
      ]
    },
    {
      "name": "cp",
      "args": [
        "source",
        "destination",
        "opts",
        "callback"
      ]
    },
    {
      "name": "cpSync",
      "args": [
        "source",
        "destination",
        "opts?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\globals.d.ts": [
    {
      "name": "fetch",
      "args": [
        "input",
        "init?"
      ],
      "returnType": "Promise<Response>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\http.d.ts": [
    {
      "name": "retriableRequest",
      "args": []
    },
    {
      "name": "request",
      "args": [
        "options",
        "callback?"
      ]
    },
    {
      "name": "request",
      "args": [
        "url",
        "options",
        "callback?"
      ]
    },
    {
      "name": "get",
      "args": [
        "options",
        "callback?"
      ]
    },
    {
      "name": "get",
      "args": [
        "url",
        "options",
        "callback?"
      ]
    },
    {
      "name": "validateHeaderName",
      "args": [
        "name"
      ],
      "returnType": "void;"
    },
    {
      "name": "validateHeaderValue",
      "args": [
        "name",
        "value"
      ],
      "returnType": "void;"
    },
    {
      "name": "setMaxIdleHTTPParsers",
      "args": [
        "count"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\http2.d.ts": [
    {
      "name": "statCheck",
      "args": [
        "stat",
        "headers"
      ]
    },
    {
      "name": "onError",
      "args": [
        "err"
      ]
    },
    {
      "name": "statCheck",
      "args": [
        "stat",
        "headers"
      ]
    },
    {
      "name": "getDefaultSettings",
      "args": [],
      "returnType": "Settings;"
    },
    {
      "name": "getPackedSettings",
      "args": [
        "settings"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "getUnpackedSettings",
      "args": [
        "buf"
      ],
      "returnType": "Settings;"
    },
    {
      "name": "createServer",
      "args": [
        "onRequestHandler?",
        "response"
      ]
    },
    {
      "name": "createServer",
      "args": [
        "options",
        "onRequestHandler?",
        "response"
      ]
    },
    {
      "name": "createSecureServer",
      "args": [
        "onRequestHandler?",
        "response"
      ]
    },
    {
      "name": "createSecureServer",
      "args": [
        "options",
        "onRequestHandler?",
        "response"
      ]
    },
    {
      "name": "connect",
      "args": [
        "authority",
        "listener",
        "socket"
      ]
    },
    {
      "name": "connect",
      "args": [
        "authority",
        "options?",
        "listener?",
        "socket"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\https.d.ts": [
    {
      "name": "sha256",
      "args": [
        "s"
      ]
    },
    {
      "name": "request",
      "args": [
        "options",
        "callback?"
      ]
    },
    {
      "name": "request",
      "args": [
        "url",
        "options",
        "callback?"
      ]
    },
    {
      "name": "get",
      "args": [
        "options",
        "callback?"
      ]
    },
    {
      "name": "get",
      "args": [
        "url",
        "options",
        "callback?"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\inspector.d.ts": [
    {
      "name": "open",
      "args": [
        "port?",
        "host?",
        "wait?"
      ],
      "returnType": "void;"
    },
    {
      "name": "close",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "url",
      "args": [],
      "returnType": "string | undefined;"
    },
    {
      "name": "waitForDebugger",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\module.d.ts": [
    {
      "name": "newAPI",
      "args": []
    },
    {
      "name": "syncBuiltinESMExports",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "findSourceMap",
      "args": [
        "path",
        "error?"
      ],
      "returnType": "SourceMap;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\net.d.ts": [
    {
      "name": "createServer",
      "args": [
        "connectionListener?"
      ]
    },
    {
      "name": "createServer",
      "args": [
        "options?",
        "connectionListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "options",
        "connectionListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "port",
        "host?",
        "connectionListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "path",
        "connectionListener?"
      ]
    },
    {
      "name": "createConnection",
      "args": [
        "options",
        "connectionListener?"
      ]
    },
    {
      "name": "createConnection",
      "args": [
        "port",
        "host?",
        "connectionListener?"
      ]
    },
    {
      "name": "createConnection",
      "args": [
        "path",
        "connectionListener?"
      ]
    },
    {
      "name": "isIP",
      "args": [
        "input"
      ],
      "returnType": "number;"
    },
    {
      "name": "isIPv4",
      "args": [
        "input"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isIPv6",
      "args": [
        "input"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\os.d.ts": [
    {
      "name": "hostname",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "loadavg",
      "args": [],
      "returnType": "number[];"
    },
    {
      "name": "uptime",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "freemem",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "totalmem",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "cpus",
      "args": [],
      "returnType": "CpuInfo[];"
    },
    {
      "name": "availableParallelism",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "type",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "release",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "networkInterfaces",
      "args": [],
      "returnType": "NodeJS.Dict<NetworkInterfaceInfo[]>;"
    },
    {
      "name": "homedir",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "userInfo",
      "args": [
        "options"
      ],
      "returnType": "UserInfo<Buffer>;"
    },
    {
      "name": "userInfo",
      "args": [
        "options?"
      ],
      "returnType": "UserInfo<string>;"
    },
    {
      "name": "arch",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "version",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "platform",
      "args": [],
      "returnType": "NodeJS.Platform;"
    },
    {
      "name": "machine",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "tmpdir",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "endianness",
      "args": [],
      "returnType": "\"BE\" | \"LE\";"
    },
    {
      "name": "getPriority",
      "args": [
        "pid?"
      ],
      "returnType": "number;"
    },
    {
      "name": "setPriority",
      "args": [
        "priority"
      ],
      "returnType": "void;"
    },
    {
      "name": "setPriority",
      "args": [
        "pid",
        "priority"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\perf_hooks.d.ts": [
    {
      "name": "monitorEventLoopDelay",
      "args": [
        "options?"
      ],
      "returnType": "IntervalHistogram;"
    },
    {
      "name": "createHistogram",
      "args": [
        "options?"
      ],
      "returnType": "RecordableHistogram;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\process.d.ts": [
    {
      "name": "MyThing",
      "args": [
        "options"
      ]
    },
    {
      "name": "maybeSync",
      "args": [
        "arg",
        "cb"
      ]
    },
    {
      "name": "definitelyAsync",
      "args": [
        "arg",
        "cb"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\punycode.d.ts": [
    {
      "name": "decode",
      "args": [
        "string"
      ],
      "returnType": "string;"
    },
    {
      "name": "encode",
      "args": [
        "string"
      ],
      "returnType": "string;"
    },
    {
      "name": "toUnicode",
      "args": [
        "domain"
      ],
      "returnType": "string;"
    },
    {
      "name": "toASCII",
      "args": [
        "domain"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\querystring.d.ts": [
    {
      "name": "stringify",
      "args": [
        "obj?",
        "sep?",
        "eq?",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "parse",
      "args": [
        "str",
        "sep?",
        "eq?",
        "options?"
      ],
      "returnType": "ParsedUrlQuery;"
    },
    {
      "name": "escape",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "unescape",
      "args": [
        "str"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\readline\\promises.d.ts": [
    {
      "name": "completer",
      "args": [
        "line"
      ]
    },
    {
      "name": "completer",
      "args": [
        "linePartial"
      ]
    },
    {
      "name": "createInterface",
      "args": [
        "input",
        "output?",
        "completer?",
        "terminal?"
      ],
      "returnType": "Interface;"
    },
    {
      "name": "createInterface",
      "args": [
        "options"
      ],
      "returnType": "Interface;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\readline.d.ts": [
    {
      "name": "questionExample",
      "args": []
    },
    {
      "name": "createInterface",
      "args": [
        "input",
        "output?",
        "completer?",
        "terminal?"
      ],
      "returnType": "Interface;"
    },
    {
      "name": "createInterface",
      "args": [
        "options"
      ],
      "returnType": "Interface;"
    },
    {
      "name": "processLineByLine",
      "args": []
    },
    {
      "name": "processLineByLine",
      "args": []
    },
    {
      "name": "emitKeypressEvents",
      "args": [
        "stream",
        "readlineInterface?"
      ],
      "returnType": "void;"
    },
    {
      "name": "clearLine",
      "args": [
        "stream",
        "dir",
        "callback?"
      ]
    },
    {
      "name": "clearScreenDown",
      "args": [
        "stream",
        "callback?"
      ]
    },
    {
      "name": "cursorTo",
      "args": [
        "stream",
        "x",
        "y?",
        "callback?"
      ]
    },
    {
      "name": "processLineByLine",
      "args": []
    },
    {
      "name": "processLineByLine",
      "args": []
    },
    {
      "name": "moveCursor",
      "args": [
        "stream",
        "dx",
        "dy",
        "callback?"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\repl.d.ts": [
    {
      "name": "saybye",
      "args": []
    },
    {
      "name": "start",
      "args": [
        "options?"
      ],
      "returnType": "REPLServer;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\stream\\consumers.d.ts": [
    {
      "name": "buffer",
      "args": [
        "stream"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "text",
      "args": [
        "stream"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "arrayBuffer",
      "args": [
        "stream"
      ],
      "returnType": "Promise<ArrayBuffer>;"
    },
    {
      "name": "blob",
      "args": [
        "stream"
      ],
      "returnType": "Promise<NodeBlob>;"
    },
    {
      "name": "json",
      "args": [
        "stream"
      ],
      "returnType": "Promise<unknown>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\stream\\promises.d.ts": [
    {
      "name": "finished",
      "args": [
        "stream",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "pipeline",
      "args": [
        "streams",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "pipeline",
      "args": [
        "stream1",
        "stream2",
        "...streams"
      ],
      "returnType": "Promise<void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\stream.d.ts": [
    {
      "name": "parseHeader",
      "args": [
        "stream",
        "callback"
      ]
    },
    {
      "name": "onReadable",
      "args": []
    },
    {
      "name": "write",
      "args": [
        "data",
        "cb"
      ]
    },
    {
      "name": "getDefaultHighWaterMark",
      "args": [
        "objectMode"
      ],
      "returnType": "number;"
    },
    {
      "name": "setDefaultHighWaterMark",
      "args": [
        "objectMode",
        "value"
      ],
      "returnType": "void;"
    },
    {
      "name": "run",
      "args": []
    },
    {
      "name": "finished",
      "args": [
        "stream",
        "options",
        "callback"
      ]
    },
    {
      "name": "finished",
      "args": [
        "stream",
        "callback"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "stream",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "run",
      "args": []
    },
    {
      "name": "run",
      "args": []
    },
    {
      "name": "run",
      "args": []
    },
    {
      "name": "run",
      "args": []
    },
    {
      "name": "pipeline",
      "args": [
        "streams",
        "callback?"
      ]
    },
    {
      "name": "pipeline",
      "args": [
        "stream1",
        "stream2",
        "...streams\n                NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null"
      ]
    },
    {
      "name": "__promisify__",
      "args": [
        "streams",
        "options?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "__promisify__",
      "args": [
        "stream1",
        "stream2",
        "...streams"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "isErrored",
      "args": [
        "stream"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isReadable",
      "args": [
        "stream"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\test.d.ts": [
    {
      "name": "run",
      "args": [
        "options?"
      ],
      "returnType": "TestsStream;"
    },
    {
      "name": "test",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "test",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "test",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "test",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "describe",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "describe",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "describe",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "describe",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "it",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "it",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "it",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "it",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "skip",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "todo",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "name?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "options?",
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "only",
      "args": [
        "fn?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "before",
      "args": [
        "fn?",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "after",
      "args": [
        "fn?",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "beforeEach",
      "args": [
        "fn?",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "afterEach",
      "args": [
        "fn?",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "dot",
      "args": [
        "source"
      ],
      "returnType": "AsyncGenerator<\"\\n\" | \".\" | \"X\", void>;"
    },
    {
      "name": "tap",
      "args": [
        "source"
      ],
      "returnType": "AsyncGenerator<string, void>;"
    },
    {
      "name": "junit",
      "args": [
        "source"
      ],
      "returnType": "AsyncGenerator<string, void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\timers.d.ts": [
    {
      "name": "setTimeout",
      "args": [
        "callback"
      ]
    },
    {
      "name": "clearTimeout",
      "args": [
        "timeoutId"
      ],
      "returnType": "void;"
    },
    {
      "name": "setInterval",
      "args": [
        "callback"
      ]
    },
    {
      "name": "clearInterval",
      "args": [
        "intervalId"
      ],
      "returnType": "void;"
    },
    {
      "name": "setImmediate",
      "args": [
        "callback"
      ]
    },
    {
      "name": "clearImmediate",
      "args": [
        "immediateId"
      ],
      "returnType": "void;"
    },
    {
      "name": "queueMicrotask",
      "args": [
        "callback"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\tls.d.ts": [
    {
      "name": "checkServerIdentity",
      "args": [
        "hostname",
        "cert"
      ],
      "returnType": "Error | undefined;"
    },
    {
      "name": "createServer",
      "args": [
        "secureConnectionListener?"
      ]
    },
    {
      "name": "createServer",
      "args": [
        "options",
        "secureConnectionListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "options",
        "secureConnectListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "port",
        "host?",
        "options?",
        "secureConnectListener?"
      ]
    },
    {
      "name": "connect",
      "args": [
        "port",
        "options?",
        "secureConnectListener?"
      ]
    },
    {
      "name": "createSecurePair",
      "args": [
        "context?",
        "isServer?",
        "requestCert?",
        "rejectUnauthorized?"
      ],
      "returnType": "SecurePair;"
    },
    {
      "name": "createSecureContext",
      "args": [
        "options?"
      ],
      "returnType": "SecureContext;"
    },
    {
      "name": "getCiphers",
      "args": [],
      "returnType": "string[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\trace_events.d.ts": [
    {
      "name": "onSigint",
      "args": []
    },
    {
      "name": "createTracing",
      "args": [
        "options"
      ],
      "returnType": "Tracing;"
    },
    {
      "name": "getEnabledCategories",
      "args": [],
      "returnType": "string | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\tty.d.ts": [
    {
      "name": "isatty",
      "args": [
        "fd"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\url.d.ts": [
    {
      "name": "parse",
      "args": [
        "urlString"
      ],
      "returnType": "UrlWithStringQuery;"
    },
    {
      "name": "parse",
      "args": [
        "urlString",
        "parseQueryString",
        "slashesDenoteHost?"
      ],
      "returnType": "UrlWithStringQuery;"
    },
    {
      "name": "parse",
      "args": [
        "urlString",
        "parseQueryString",
        "slashesDenoteHost?"
      ],
      "returnType": "UrlWithParsedQuery;"
    },
    {
      "name": "parse",
      "args": [
        "urlString",
        "parseQueryString",
        "slashesDenoteHost?"
      ],
      "returnType": "Url;"
    },
    {
      "name": "format",
      "args": [
        "urlObject",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "format",
      "args": [
        "urlObject"
      ],
      "returnType": "string;"
    },
    {
      "name": "resolve",
      "args": [
        "from",
        "to"
      ]
    },
    {
      "name": "resolve",
      "args": [
        "from",
        "to"
      ],
      "returnType": "string;"
    },
    {
      "name": "domainToASCII",
      "args": [
        "domain"
      ],
      "returnType": "string;"
    },
    {
      "name": "domainToUnicode",
      "args": [
        "domain"
      ],
      "returnType": "string;"
    },
    {
      "name": "fileURLToPath",
      "args": [
        "url"
      ],
      "returnType": "string;"
    },
    {
      "name": "pathToFileURL",
      "args": [
        "path"
      ],
      "returnType": "URL;"
    },
    {
      "name": "urlToHttpOptions",
      "args": [
        "url"
      ],
      "returnType": "ClientRequestArgs;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\util.d.ts": [
    {
      "name": "format",
      "args": [
        "format?",
        "...param"
      ],
      "returnType": "string;"
    },
    {
      "name": "formatWithOptions",
      "args": [
        "inspectOptions",
        "format?",
        "...param"
      ],
      "returnType": "string;"
    },
    {
      "name": "getSystemErrorName",
      "args": [
        "err"
      ],
      "returnType": "string;"
    },
    {
      "name": "getSystemErrorMap",
      "args": [],
      "returnType": "Map<number, [string, string]>;"
    },
    {
      "name": "log",
      "args": [
        "string"
      ],
      "returnType": "void;"
    },
    {
      "name": "toUSVString",
      "args": [
        "string"
      ],
      "returnType": "string;"
    },
    {
      "name": "transferableAbortController",
      "args": [],
      "returnType": "AbortController;"
    },
    {
      "name": "transferableAbortSignal",
      "args": [
        "signal"
      ],
      "returnType": "AbortSignal;"
    },
    {
      "name": "aborted",
      "args": [
        "signal",
        "resource"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "inspect",
      "args": [
        "object",
        "showHidden?",
        "depth?",
        "color?"
      ],
      "returnType": "string;"
    },
    {
      "name": "inspect",
      "args": [
        "object",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "isArray",
      "args": [
        "object"
      ],
      "returnType": "object is unknown[];"
    },
    {
      "name": "isRegExp",
      "args": [
        "object"
      ],
      "returnType": "object is RegExp;"
    },
    {
      "name": "isDate",
      "args": [
        "object"
      ],
      "returnType": "object is Date;"
    },
    {
      "name": "isError",
      "args": [
        "object"
      ],
      "returnType": "object is Error;"
    },
    {
      "name": "MyStream",
      "args": []
    },
    {
      "name": "inherits",
      "args": [
        "constructor",
        "superConstructor"
      ],
      "returnType": "void;"
    },
    {
      "name": "debuglog",
      "args": [
        "section",
        "callback?"
      ]
    },
    {
      "name": "isBoolean",
      "args": [
        "object"
      ],
      "returnType": "object is boolean;"
    },
    {
      "name": "isBuffer",
      "args": [
        "object"
      ],
      "returnType": "object is Buffer;"
    },
    {
      "name": "Foo",
      "args": []
    },
    {
      "name": "Bar",
      "args": []
    },
    {
      "name": "isFunction",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isNull",
      "args": [
        "object"
      ],
      "returnType": "object is null;"
    },
    {
      "name": "isNullOrUndefined",
      "args": [
        "object"
      ],
      "returnType": "object is null | undefined;"
    },
    {
      "name": "isNumber",
      "args": [
        "object"
      ],
      "returnType": "object is number;"
    },
    {
      "name": "isObject",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isPrimitive",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isString",
      "args": [
        "object"
      ],
      "returnType": "object is string;"
    },
    {
      "name": "isSymbol",
      "args": [
        "object"
      ],
      "returnType": "object is symbol;"
    },
    {
      "name": "isUndefined",
      "args": [
        "object"
      ],
      "returnType": "object is undefined;"
    },
    {
      "name": "isDeepStrictEqual",
      "args": [
        "val1",
        "val2"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "stripVTControlCharacters",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "fn",
      "args": []
    },
    {
      "name": "fn",
      "args": []
    },
    {
      "name": "callbackify",
      "args": [
        "fn"
      ]
    },
    {
      "name": "callStat",
      "args": []
    },
    {
      "name": "promisify",
      "args": [
        "fn"
      ]
    },
    {
      "name": "promisify",
      "args": [
        "fn"
      ],
      "returnType": "Function;"
    },
    {
      "name": "isAnyArrayBuffer",
      "args": [
        "object"
      ],
      "returnType": "object is ArrayBufferLike;"
    },
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "isArgumentsObject",
      "args": [
        "object"
      ],
      "returnType": "object is IArguments;"
    },
    {
      "name": "isArrayBuffer",
      "args": [
        "object"
      ],
      "returnType": "object is ArrayBuffer;"
    },
    {
      "name": "isArrayBufferView",
      "args": [
        "object"
      ],
      "returnType": "object is NodeJS.ArrayBufferView;"
    },
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "isAsyncFunction",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isBigInt64Array",
      "args": [
        "value"
      ],
      "returnType": "value is BigInt64Array;"
    },
    {
      "name": "isBigUint64Array",
      "args": [
        "value"
      ],
      "returnType": "value is BigUint64Array;"
    },
    {
      "name": "isBooleanObject",
      "args": [
        "object"
      ],
      "returnType": "object is Boolean;"
    },
    {
      "name": "isBoxedPrimitive",
      "args": [
        "object"
      ],
      "returnType": "object is String | Number | BigInt | Boolean | Symbol;"
    },
    {
      "name": "isDataView",
      "args": [
        "object"
      ],
      "returnType": "object is DataView;"
    },
    {
      "name": "isDate",
      "args": [
        "object"
      ],
      "returnType": "object is Date;"
    },
    {
      "name": "isExternal",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isFloat32Array",
      "args": [
        "object"
      ],
      "returnType": "object is Float32Array;"
    },
    {
      "name": "isFloat64Array",
      "args": [
        "object"
      ],
      "returnType": "object is Float64Array;"
    },
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "isGeneratorFunction",
      "args": [
        "object"
      ],
      "returnType": "object is GeneratorFunction;"
    },
    {
      "name": "isGeneratorObject",
      "args": [
        "object"
      ],
      "returnType": "object is Generator;"
    },
    {
      "name": "isInt8Array",
      "args": [
        "object"
      ],
      "returnType": "object is Int8Array;"
    },
    {
      "name": "isInt16Array",
      "args": [
        "object"
      ],
      "returnType": "object is Int16Array;"
    },
    {
      "name": "isInt32Array",
      "args": [
        "object"
      ],
      "returnType": "object is Int32Array;"
    },
    {
      "name": "isMapIterator",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isModuleNamespaceObject",
      "args": [
        "value"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isNativeError",
      "args": [
        "object"
      ],
      "returnType": "object is Error;"
    },
    {
      "name": "isNumberObject",
      "args": [
        "object"
      ],
      "returnType": "object is Number;"
    },
    {
      "name": "isPromise",
      "args": [
        "object"
      ],
      "returnType": "object is Promise<unknown>;"
    },
    {
      "name": "isProxy",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isRegExp",
      "args": [
        "object"
      ],
      "returnType": "object is RegExp;"
    },
    {
      "name": "isSetIterator",
      "args": [
        "object"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isSharedArrayBuffer",
      "args": [
        "object"
      ],
      "returnType": "object is SharedArrayBuffer;"
    },
    {
      "name": "isStringObject",
      "args": [
        "object"
      ],
      "returnType": "object is String;"
    },
    {
      "name": "isSymbolObject",
      "args": [
        "object"
      ],
      "returnType": "object is Symbol;"
    },
    {
      "name": "isTypedArray",
      "args": [
        "object"
      ],
      "returnType": "object is NodeJS.TypedArray;"
    },
    {
      "name": "isUint8Array",
      "args": [
        "object"
      ],
      "returnType": "object is Uint8Array;"
    },
    {
      "name": "isUint8ClampedArray",
      "args": [
        "object"
      ],
      "returnType": "object is Uint8ClampedArray;"
    },
    {
      "name": "isUint16Array",
      "args": [
        "object"
      ],
      "returnType": "object is Uint16Array;"
    },
    {
      "name": "isUint32Array",
      "args": [
        "object"
      ],
      "returnType": "object is Uint32Array;"
    },
    {
      "name": "isWeakMap",
      "args": [
        "object"
      ],
      "returnType": "object is WeakMap<object, unknown>;"
    },
    {
      "name": "isWeakSet",
      "args": [
        "object"
      ],
      "returnType": "object is WeakSet<object>;"
    },
    {
      "name": "isKeyObject",
      "args": [
        "object"
      ],
      "returnType": "object is KeyObject;"
    },
    {
      "name": "isCryptoKey",
      "args": [
        "object"
      ],
      "returnType": "object is webcrypto.CryptoKey;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\v8.d.ts": [
    {
      "name": "cachedDataVersionTag",
      "args": [],
      "returnType": "number;"
    },
    {
      "name": "getHeapStatistics",
      "args": [],
      "returnType": "HeapInfo;"
    },
    {
      "name": "getHeapSpaceStatistics",
      "args": [],
      "returnType": "HeapSpaceInfo[];"
    },
    {
      "name": "setFlagsFromString",
      "args": [
        "flags"
      ],
      "returnType": "void;"
    },
    {
      "name": "getHeapSnapshot",
      "args": [],
      "returnType": "Readable;"
    },
    {
      "name": "writeHeapSnapshot",
      "args": [
        "filename?"
      ],
      "returnType": "string;"
    },
    {
      "name": "getHeapCodeStatistics",
      "args": [],
      "returnType": "HeapCodeStatistics;"
    },
    {
      "name": "serialize",
      "args": [
        "value"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "deserialize",
      "args": [
        "buffer"
      ],
      "returnType": "any;"
    },
    {
      "name": "takeCoverage",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "stopCoverage",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "setHeapSnapshotNearHeapLimit",
      "args": [
        "limit"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\vm.d.ts": [
    {
      "name": "add",
      "args": [
        "a",
        "b"
      ]
    },
    {
      "name": "createContext",
      "args": [
        "sandbox?",
        "options?"
      ],
      "returnType": "Context;"
    },
    {
      "name": "isContext",
      "args": [
        "sandbox"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "runInContext",
      "args": [
        "code",
        "contextifiedObject",
        "options?"
      ],
      "returnType": "any;"
    },
    {
      "name": "runInNewContext",
      "args": [
        "code",
        "contextObject?",
        "options?"
      ],
      "returnType": "any;"
    },
    {
      "name": "runInThisContext",
      "args": [
        "code",
        "options?"
      ],
      "returnType": "any;"
    },
    {
      "name": "compileFunction",
      "args": [
        "code",
        "params?",
        "options?"
      ],
      "returnType": "Function &"
    },
    {
      "name": "measureMemory",
      "args": [
        "options?"
      ],
      "returnType": "Promise<MemoryMeasurement>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\worker_threads.d.ts": [
    {
      "name": "parseJSAsync",
      "args": [
        "script"
      ]
    },
    {
      "name": "onmessage",
      "args": [
        "event"
      ]
    },
    {
      "name": "markAsUntransferable",
      "args": [
        "object"
      ],
      "returnType": "void;"
    },
    {
      "name": "moveMessagePortToContext",
      "args": [
        "port",
        "contextifiedSandbox"
      ],
      "returnType": "MessagePort;"
    },
    {
      "name": "receiveMessageOnPort",
      "args": [
        "port"
      ],
      "returnType": "|"
    },
    {
      "name": "getEnvironmentData",
      "args": [
        "key"
      ],
      "returnType": "Serializable;"
    },
    {
      "name": "setEnvironmentData",
      "args": [
        "key",
        "value"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\node\\zlib.d.ts": [
    {
      "name": "do_gzip",
      "args": [
        "input",
        "output"
      ]
    },
    {
      "name": "createBrotliCompress",
      "args": [
        "options?"
      ],
      "returnType": "BrotliCompress;"
    },
    {
      "name": "createBrotliDecompress",
      "args": [
        "options?"
      ],
      "returnType": "BrotliDecompress;"
    },
    {
      "name": "createGzip",
      "args": [
        "options?"
      ],
      "returnType": "Gzip;"
    },
    {
      "name": "createGunzip",
      "args": [
        "options?"
      ],
      "returnType": "Gunzip;"
    },
    {
      "name": "createDeflate",
      "args": [
        "options?"
      ],
      "returnType": "Deflate;"
    },
    {
      "name": "createInflate",
      "args": [
        "options?"
      ],
      "returnType": "Inflate;"
    },
    {
      "name": "createDeflateRaw",
      "args": [
        "options?"
      ],
      "returnType": "DeflateRaw;"
    },
    {
      "name": "createInflateRaw",
      "args": [
        "options?"
      ],
      "returnType": "InflateRaw;"
    },
    {
      "name": "createUnzip",
      "args": [
        "options?"
      ],
      "returnType": "Unzip;"
    },
    {
      "name": "brotliCompress",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "brotliCompress",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "brotliCompressSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "brotliDecompress",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "brotliDecompress",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "brotliDecompressSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "deflate",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "deflate",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "deflateSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "deflateRaw",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "deflateRaw",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "deflateRawSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "gzip",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "gzip",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "gzipSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "gunzip",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "gunzip",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "gunzipSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "inflate",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "inflate",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "inflateSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "inflateRaw",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "inflateRaw",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "inflateRawSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    },
    {
      "name": "unzip",
      "args": [
        "buf",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "unzip",
      "args": [
        "buf",
        "options",
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "__promisify__",
      "args": [
        "buffer",
        "options?"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "unzipSync",
      "args": [
        "buf",
        "options?"
      ],
      "returnType": "Buffer;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@types\\vscode\\index.d.ts": [
    {
      "name": "registerTaskProvider",
      "args": [
        "type",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "fetchTasks",
      "args": [
        "filter?"
      ],
      "returnType": "Thenable<Task[]>;"
    },
    {
      "name": "executeTask",
      "args": [
        "task"
      ],
      "returnType": "Thenable<TaskExecution>;"
    },
    {
      "name": "createTelemetryLogger",
      "args": [
        "sender",
        "options?"
      ],
      "returnType": "TelemetryLogger;"
    },
    {
      "name": "openExternal",
      "args": [
        "target"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "asExternalUri",
      "args": [
        "target"
      ],
      "returnType": "Thenable<Uri>;"
    },
    {
      "name": "registerCommand",
      "args": [
        "command",
        "callback"
      ]
    },
    {
      "name": "registerTextEditorCommand",
      "args": [
        "command",
        "callback",
        "edit",
        "...args"
      ]
    },
    {
      "name": "getCommands",
      "args": [
        "filterInternal?"
      ],
      "returnType": "Thenable<string[]>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "document",
        "column?",
        "preserveFocus?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "document",
        "options?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "showNotebookDocument",
      "args": [
        "document",
        "options?"
      ],
      "returnType": "Thenable<NotebookEditor>;"
    },
    {
      "name": "createTextEditorDecorationType",
      "args": [
        "options"
      ],
      "returnType": "TextEditorDecorationType;"
    },
    {
      "name": "showQuickPick",
      "args": [
        "items",
        "options",
        "token?"
      ],
      "returnType": "Thenable<string[] | undefined>;"
    },
    {
      "name": "showQuickPick",
      "args": [
        "items",
        "options?",
        "token?"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showWorkspaceFolderPick",
      "args": [
        "options?"
      ],
      "returnType": "Thenable<WorkspaceFolder | undefined>;"
    },
    {
      "name": "showOpenDialog",
      "args": [
        "options?"
      ],
      "returnType": "Thenable<Uri[] | undefined>;"
    },
    {
      "name": "showSaveDialog",
      "args": [
        "options?"
      ],
      "returnType": "Thenable<Uri | undefined>;"
    },
    {
      "name": "showInputBox",
      "args": [
        "options?",
        "token?"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "createInputBox",
      "args": [],
      "returnType": "InputBox;"
    },
    {
      "name": "createOutputChannel",
      "args": [
        "name",
        "languageId?"
      ],
      "returnType": "OutputChannel;"
    },
    {
      "name": "createOutputChannel",
      "args": [
        "name",
        "options"
      ],
      "returnType": "LogOutputChannel;"
    },
    {
      "name": "createWebviewPanel",
      "args": [
        "viewType",
        "title",
        "showOptions\n\t\t\t/**\n\t\t\t * The view column in which the {@link WebviewPanel} should be shown.\n\t\t\t */\n\t\t\treadonly viewColumn: ViewColumn;\n\t\t\t/**\n\t\t\t * An optional flag that when `true` will stop the panel from taking focus.\n\t\t\t */\n\t\t\treadonly preserveFocus?: boolean;\n\t\t}",
        "options?"
      ],
      "returnType": "WebviewPanel;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text",
        "hideAfterTimeout"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text",
        "hideWhenDone"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "createStatusBarItem",
      "args": [
        "id",
        "alignment?",
        "priority?"
      ],
      "returnType": "StatusBarItem;"
    },
    {
      "name": "createStatusBarItem",
      "args": [
        "alignment?",
        "priority?"
      ],
      "returnType": "StatusBarItem;"
    },
    {
      "name": "createTerminal",
      "args": [
        "name?",
        "shellPath?",
        "shellArgs?"
      ],
      "returnType": "Terminal;"
    },
    {
      "name": "createTerminal",
      "args": [
        "options"
      ],
      "returnType": "Terminal;"
    },
    {
      "name": "createTerminal",
      "args": [
        "options"
      ],
      "returnType": "Terminal;"
    },
    {
      "name": "registerUriHandler",
      "args": [
        "handler"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerWebviewPanelSerializer",
      "args": [
        "viewType",
        "serializer"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerWebviewViewProvider",
      "args": [
        "viewId",
        "provider",
        "options?\n\t\t\t/**\n\t\t\t * Content settings for the webview created for this view.\n\t\t\t */\n\t\t\treadonly webviewOptions?: {\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe"
      ]
    },
    {
      "name": "registerCustomEditorProvider",
      "args": [
        "viewType",
        "provider",
        "options?\n\t\t\t/**\n\t\t\t * Content settings for the webview panels created for this custom editor.\n\t\t\t */\n\t\t\treadonly webviewOptions?: WebviewPanelOptions;\n\n\t\t\t/**\n\t\t\t * Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.\n\t\t\t *\n\t\t\t * Indicates that the provider allows multiple editor instances to be open at the same time for\n\t\t\t * the same resource.\n\t\t\t *\n\t\t\t * By default",
        "the editor only allows one editor instance to be open at a time for each resource. If the\n\t\t\t * user tries to open a second editor instance for the resource",
        "the first one is instead moved to where\n\t\t\t * the second one was to be opened.\n\t\t\t *\n\t\t\t * When `supportsMultipleEditorsPerDocument` is enabled",
        "users can split and create copies of the custom\n\t\t\t * editor. In this case",
        "the custom editor must make sure it can properly synchronize the states of all\n\t\t\t * editor instances for a resource so that they are consistent.\n\t\t\t */\n\t\t\treadonly supportsMultipleEditorsPerDocument?\n\t\t}"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerTerminalLinkProvider",
      "args": [
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerTerminalProfileProvider",
      "args": [
        "id",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerFileDecorationProvider",
      "args": [
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getWorkspaceFolder",
      "args": [
        "uri"
      ],
      "returnType": "WorkspaceFolder | undefined;"
    },
    {
      "name": "asRelativePath",
      "args": [
        "pathOrUri",
        "includeWorkspaceFolder?"
      ],
      "returnType": "string;"
    },
    {
      "name": "updateWorkspaceFolders",
      "args": [
        "start",
        "deleteCount",
        "...workspaceFoldersToAdd\n\t\t\t/**\n\t\t\t * The uri of a workspace folder that's to be added.\n\t\t\t */\n\t\t\treadonly uri: Uri;\n\t\t\t/**\n\t\t\t * The name of a workspace folder that's to be added.\n\t\t\t */\n\t\t\treadonly name?: string;\n\t\t}[]"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "createFileSystemWatcher",
      "args": [
        "globPattern",
        "ignoreCreateEvents?",
        "ignoreChangeEvents?",
        "ignoreDeleteEvents?"
      ],
      "returnType": "FileSystemWatcher;"
    },
    {
      "name": "findFiles",
      "args": [
        "include",
        "exclude?",
        "maxResults?",
        "token?"
      ],
      "returnType": "Thenable<Uri[]>;"
    },
    {
      "name": "save",
      "args": [
        "uri"
      ],
      "returnType": "Thenable<Uri | undefined>;"
    },
    {
      "name": "saveAs",
      "args": [
        "uri"
      ],
      "returnType": "Thenable<Uri | undefined>;"
    },
    {
      "name": "saveAll",
      "args": [
        "includeUntitled?"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "applyEdit",
      "args": [
        "edit",
        "metadata?"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "uri"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "path"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "options?\n\t\t\t/**\n\t\t\t * The {@link TextDocument.languageId language} of the document.\n\t\t\t */\n\t\t\tlanguage?: string;\n\t\t\t/**\n\t\t\t * The initial contents of the document.\n\t\t\t */\n\t\t\tcontent?: string;\n\t\t}"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "registerTextDocumentContentProvider",
      "args": [
        "scheme",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "openNotebookDocument",
      "args": [
        "uri"
      ],
      "returnType": "Thenable<NotebookDocument>;"
    },
    {
      "name": "openNotebookDocument",
      "args": [
        "notebookType",
        "content?"
      ],
      "returnType": "Thenable<NotebookDocument>;"
    },
    {
      "name": "registerNotebookSerializer",
      "args": [
        "notebookType",
        "serializer",
        "options?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getConfiguration",
      "args": [
        "section?",
        "scope?"
      ],
      "returnType": "WorkspaceConfiguration;"
    },
    {
      "name": "registerTaskProvider",
      "args": [
        "type",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerFileSystemProvider",
      "args": [
        "scheme",
        "provider",
        "options?\n\t\t\t/**\n\t\t\t * Whether the file system provider use case sensitive compare for {@link Uri.path paths}\n\t\t\t */\n\t\t\treadonly isCaseSensitive?: boolean;\n\t\t\t/**\n\t\t\t * Whether the file system provider is readonly",
        "no modifications like write",
        "delete",
        "create are possible.\n\t\t\t * If a {@link MarkdownString} is given",
        "it will be shown as the reason why the file system is readonly.\n\t\t\t */\n\t\t\treadonly isReadonly?\n\t\t}"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getLanguages",
      "args": [],
      "returnType": "Thenable<string[]>;"
    },
    {
      "name": "setTextDocumentLanguage",
      "args": [
        "document",
        "languageId"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "match",
      "args": [
        "selector",
        "document"
      ],
      "returnType": "number;"
    },
    {
      "name": "getDiagnostics",
      "args": [
        "resource"
      ],
      "returnType": "Diagnostic[];"
    },
    {
      "name": "getDiagnostics",
      "args": [],
      "returnType": "[Uri, Diagnostic[]][];"
    },
    {
      "name": "createDiagnosticCollection",
      "args": [
        "name?"
      ],
      "returnType": "DiagnosticCollection;"
    },
    {
      "name": "createLanguageStatusItem",
      "args": [
        "id",
        "selector"
      ],
      "returnType": "LanguageStatusItem;"
    },
    {
      "name": "registerCompletionItemProvider",
      "args": [
        "selector",
        "provider",
        "...triggerCharacters"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerInlineCompletionItemProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerCodeActionsProvider",
      "args": [
        "selector",
        "provider",
        "metadata?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerCodeLensProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDefinitionProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerImplementationProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerTypeDefinitionProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDeclarationProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerHoverProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerEvaluatableExpressionProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerInlineValuesProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentHighlightProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentSymbolProvider",
      "args": [
        "selector",
        "provider",
        "metaData?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerWorkspaceSymbolProvider",
      "args": [
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerReferenceProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerRenameProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentSemanticTokensProvider",
      "args": [
        "selector",
        "provider",
        "legend"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentRangeSemanticTokensProvider",
      "args": [
        "selector",
        "provider",
        "legend"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentFormattingEditProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentRangeFormattingEditProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerOnTypeFormattingEditProvider",
      "args": [
        "selector",
        "provider",
        "firstTriggerCharacter",
        "...moreTriggerCharacter"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerSignatureHelpProvider",
      "args": [
        "selector",
        "provider",
        "...triggerCharacters"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerSignatureHelpProvider",
      "args": [
        "selector",
        "provider",
        "metadata"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentLinkProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerColorProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerInlayHintsProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerFoldingRangeProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerSelectionRangeProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerCallHierarchyProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerTypeHierarchyProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerLinkedEditingRangeProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentDropEditProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setLanguageConfiguration",
      "args": [
        "language",
        "configuration"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "createNotebookController",
      "args": [
        "id",
        "notebookType",
        "label",
        "handler?",
        "notebook",
        "controller"
      ]
    },
    {
      "name": "registerNotebookCellStatusBarItemProvider",
      "args": [
        "notebookType",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "createRendererMessaging",
      "args": [
        "rendererId"
      ],
      "returnType": "NotebookRendererMessaging;"
    },
    {
      "name": "createSourceControl",
      "args": [
        "id",
        "label",
        "rootUri?"
      ],
      "returnType": "SourceControl;"
    },
    {
      "name": "registerDebugConfigurationProvider",
      "args": [
        "debugType",
        "provider",
        "triggerKind?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDebugAdapterDescriptorFactory",
      "args": [
        "debugType",
        "factory"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDebugAdapterTrackerFactory",
      "args": [
        "debugType",
        "factory"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "startDebugging",
      "args": [
        "folder",
        "nameOrConfiguration",
        "parentSessionOrOptions?"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "stopDebugging",
      "args": [
        "session?"
      ],
      "returnType": "Thenable<void>;"
    },
    {
      "name": "addBreakpoints",
      "args": [
        "breakpoints"
      ],
      "returnType": "void;"
    },
    {
      "name": "removeBreakpoints",
      "args": [
        "breakpoints"
      ],
      "returnType": "void;"
    },
    {
      "name": "asDebugSourceUri",
      "args": [
        "source",
        "session?"
      ],
      "returnType": "Uri;"
    },
    {
      "name": "activate",
      "args": [
        "context"
      ]
    },
    {
      "name": "createCommentController",
      "args": [
        "id",
        "label"
      ],
      "returnType": "CommentController;"
    },
    {
      "name": "getSession",
      "args": [
        "providerId",
        "scopes",
        "options"
      ],
      "returnType": "Thenable<AuthenticationSession>;"
    },
    {
      "name": "getSession",
      "args": [
        "providerId",
        "scopes",
        "options"
      ],
      "returnType": "Thenable<AuthenticationSession>;"
    },
    {
      "name": "getSession",
      "args": [
        "providerId",
        "scopes",
        "options?"
      ],
      "returnType": "Thenable<AuthenticationSession | undefined>;"
    },
    {
      "name": "registerAuthenticationProvider",
      "args": [
        "id",
        "label",
        "provider",
        "options?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "t",
      "args": [
        "message",
        "...args"
      ],
      "returnType": "string;"
    },
    {
      "name": "t",
      "args": [
        "message",
        "args",
        "any>"
      ],
      "returnType": "string;"
    },
    {
      "name": "t",
      "args": [
        "options\n\t\t\t/**\n\t\t\t * The message to localize. If {@link options.args args} is an array",
        "this message supports index templating where strings like\n\t\t\t * `{0}` and `{1}` are replaced by the item at that index in the {@link options.args args} array. If `args` is a `Record<string",
        "any>`",
        "* this supports named templating where strings like `{foo}` and `{bar}` are replaced by the value in\n\t\t\t * the Record for that key (foo",
        "bar",
        "etc"
      ]
    },
    {
      "name": "createTestController",
      "args": [
        "id",
        "label"
      ],
      "returnType": "TestController;"
    },
    {
      "name": "createChatParticipant",
      "args": [
        "id",
        "handler"
      ],
      "returnType": "ChatParticipant;"
    },
    {
      "name": "selectChatModels",
      "args": [
        "selector?"
      ],
      "returnType": "Thenable<LanguageModelChat[]>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\parser\\dist\\parser.d.ts": [
    {
      "name": "parse",
      "args": [
        "code",
        "options?"
      ],
      "returnType": "ParseForESLintResult['ast'];"
    },
    {
      "name": "parseForESLint",
      "args": [
        "code",
        "options?"
      ],
      "returnType": "ParseForESLintResult;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\scope-manager\\dist\\analyze.d.ts": [
    {
      "name": "analyze",
      "args": [
        "tree",
        "providedOptions?"
      ],
      "returnType": "ScopeManager;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\scope-manager\\dist\\assert.d.ts": [
    {
      "name": "assert",
      "args": [
        "value",
        "message?"
      ],
      "returnType": "asserts value;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\scope-manager\\dist\\ID.d.ts": [
    {
      "name": "createIdGenerator",
      "args": [],
      "returnType": "() => number;"
    },
    {
      "name": "resetIds",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\builtinSymbolLikes.d.ts": [
    {
      "name": "isPromiseLike",
      "args": [
        "program",
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isPromiseConstructorLike",
      "args": [
        "program",
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isErrorLike",
      "args": [
        "program",
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isReadonlyErrorLike",
      "args": [
        "program",
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isReadonlyTypeLike",
      "args": [
        "program",
        "type",
        "predicate?\n    aliasSymbol: ts.Symbol;\n    aliasTypeArguments: readonly ts.Type[];\n}"
      ]
    },
    {
      "name": "isBuiltinTypeAliasLike",
      "args": [
        "program",
        "type",
        "predicate\n    aliasSymbol: ts.Symbol;\n    aliasTypeArguments: readonly ts.Type[];\n}"
      ]
    },
    {
      "name": "isBuiltinSymbolLike",
      "args": [
        "program",
        "type",
        "symbolName"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isBuiltinSymbolLikeRecurser",
      "args": [
        "program",
        "type",
        "predicate"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\containsAllTypesByName.d.ts": [
    {
      "name": "containsAllTypesByName",
      "args": [
        "type",
        "allowAny",
        "allowedNames",
        "matchAnyInstead?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getConstrainedTypeAtLocation.d.ts": [
    {
      "name": "getConstrainedTypeAtLocation",
      "args": [
        "services",
        "node"
      ],
      "returnType": "ts.Type;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getContextualType.d.ts": [
    {
      "name": "getContextualType",
      "args": [
        "checker",
        "node"
      ],
      "returnType": "ts.Type | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getDeclaration.d.ts": [
    {
      "name": "getDeclaration",
      "args": [
        "services",
        "node"
      ],
      "returnType": "ts.Declaration | null;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getSourceFileOfNode.d.ts": [
    {
      "name": "getSourceFileOfNode",
      "args": [
        "node"
      ],
      "returnType": "ts.SourceFile;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getTokenAtPosition.d.ts": [
    {
      "name": "getTokenAtPosition",
      "args": [
        "sourceFile",
        "position"
      ],
      "returnType": "ts.Node;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getTypeArguments.d.ts": [
    {
      "name": "getTypeArguments",
      "args": [
        "type",
        "checker"
      ],
      "returnType": "readonly ts.Type[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\getTypeName.d.ts": [
    {
      "name": "getTypeName",
      "args": [
        "typeChecker",
        "type"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\isSymbolFromDefaultLibrary.d.ts": [
    {
      "name": "isSymbolFromDefaultLibrary",
      "args": [
        "program",
        "symbol"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\isTypeReadonly.d.ts": [
    {
      "name": "isTypeReadonly",
      "args": [
        "program",
        "type",
        "options?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\isUnsafeAssignment.d.ts": [
    {
      "name": "isUnsafeAssignment",
      "args": [
        "type",
        "receiver",
        "checker",
        "senderNode"
      ],
      "returnType": "false |"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\predicates.d.ts": [
    {
      "name": "isNullableType",
      "args": [
        "type",
        "_deprecated?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeArrayTypeOrUnionOfArrayTypes",
      "args": [
        "type",
        "checker"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeNeverType",
      "args": [
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeUnknownType",
      "args": [
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeReferenceType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TypeReference;"
    },
    {
      "name": "isTypeAnyType",
      "args": [
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeAnyArrayType",
      "args": [
        "type",
        "checker"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeUnknownArrayType",
      "args": [
        "type",
        "checker"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isAnyOrAnyArrayTypeDiscriminated",
      "args": [
        "node",
        "checker"
      ],
      "returnType": "AnyType;"
    },
    {
      "name": "typeIsOrHasBaseType",
      "args": [
        "type",
        "parentType"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isTypeBigIntLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.BigIntLiteralType;"
    },
    {
      "name": "isTypeTemplateLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TemplateLiteralType;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\propertyTypes.d.ts": [
    {
      "name": "getTypeOfPropertyOfName",
      "args": [
        "checker",
        "type",
        "name",
        "escapedName?"
      ],
      "returnType": "ts.Type | undefined;"
    },
    {
      "name": "getTypeOfPropertyOfType",
      "args": [
        "checker",
        "type",
        "property"
      ],
      "returnType": "ts.Type | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\requiresQuoting.d.ts": [
    {
      "name": "requiresQuoting",
      "args": [
        "name",
        "target?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\typeFlagUtils.d.ts": [
    {
      "name": "getTypeFlags",
      "args": [
        "type"
      ],
      "returnType": "ts.TypeFlags;"
    },
    {
      "name": "isTypeFlagSet",
      "args": [
        "type",
        "flagsToCheck",
        "isReceiver?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\type-utils\\dist\\TypeOrValueSpecifier.d.ts": [
    {
      "name": "typeMatchesSpecifier",
      "args": [
        "type",
        "specifier",
        "program"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\types\\dist\\generated\\ast-spec.d.ts": [
    {
      "name": "foo",
      "args": [
        "..."
      ]
    },
    {
      "name": "foo",
      "args": [
        "..."
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\ast-converter.d.ts": [
    {
      "name": "astConverter",
      "args": [
        "ast",
        "parseSettings",
        "shouldPreserveNodeMaps"
      ],
      "returnType": ""
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\clear-caches.d.ts": [
    {
      "name": "clearCaches",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\convert-comments.d.ts": [
    {
      "name": "convertComments",
      "args": [
        "ast",
        "code"
      ],
      "returnType": "TSESTree.Comment[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\convert.d.ts": [
    {
      "name": "convertError",
      "args": [
        "error"
      ],
      "returnType": "TSError;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\createDefaultProgram.d.ts": [
    {
      "name": "createDefaultProgram",
      "args": [
        "parseSettings"
      ],
      "returnType": "ASTAndDefiniteProgram | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\createIsolatedProgram.d.ts": [
    {
      "name": "createIsolatedProgram",
      "args": [
        "parseSettings"
      ],
      "returnType": "ASTAndDefiniteProgram;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\createProjectProgram.d.ts": [
    {
      "name": "createProjectProgram",
      "args": [
        "parseSettings",
        "programsForProjects"
      ],
      "returnType": "ASTAndDefiniteProgram | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\createProjectService.d.ts": [
    {
      "name": "createProjectService",
      "args": [
        "optionsRaw",
        "jsDocParsingMode"
      ],
      "returnType": "ProjectServiceSettings;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\createSourceFile.d.ts": [
    {
      "name": "createSourceFile",
      "args": [
        "parseSettings"
      ],
      "returnType": "ts.SourceFile;"
    },
    {
      "name": "createNoProgram",
      "args": [
        "parseSettings"
      ],
      "returnType": "ASTAndNoProgram;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\describeFilePath.d.ts": [
    {
      "name": "describeFilePath",
      "args": [
        "filePath",
        "tsconfigRootDir"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\getScriptKind.d.ts": [
    {
      "name": "getScriptKind",
      "args": [
        "filePath",
        "jsx"
      ],
      "returnType": "ts.ScriptKind;"
    },
    {
      "name": "getLanguageVariant",
      "args": [
        "scriptKind"
      ],
      "returnType": "ts.LanguageVariant;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\getWatchProgramsForProjects.d.ts": [
    {
      "name": "clearWatchCaches",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "getWatchProgramsForProjects",
      "args": [
        "parseSettings"
      ],
      "returnType": "ts.Program[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\shared.d.ts": [
    {
      "name": "createDefaultCompilerOptionsFromExtra",
      "args": [
        "parseSettings"
      ],
      "returnType": "ts.CompilerOptions;"
    },
    {
      "name": "getCanonicalFileName",
      "args": [
        "filePath"
      ],
      "returnType": "CanonicalPath;"
    },
    {
      "name": "ensureAbsolutePath",
      "args": [
        "p",
        "tsconfigRootDir"
      ],
      "returnType": "string;"
    },
    {
      "name": "canonicalDirname",
      "args": [
        "p"
      ],
      "returnType": "CanonicalPath;"
    },
    {
      "name": "getAstFromProgram",
      "args": [
        "currentProgram",
        "filePath"
      ],
      "returnType": "ASTAndDefiniteProgram | undefined;"
    },
    {
      "name": "createHash",
      "args": [
        "content"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\useProvidedPrograms.d.ts": [
    {
      "name": "useProvidedPrograms",
      "args": [
        "programInstances",
        "{ filePath",
        "tsconfigRootDir }"
      ],
      "returnType": "ASTAndDefiniteProgram | undefined;"
    },
    {
      "name": "createProgramFromConfigFile",
      "args": [
        "configFile",
        "projectDirectory?"
      ],
      "returnType": "ts.Program;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\create-program\\validateDefaultProjectForFilesGlob.d.ts": [
    {
      "name": "validateDefaultProjectForFilesGlob",
      "args": [
        "options"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\createParserServices.d.ts": [
    {
      "name": "createParserServices",
      "args": [
        "astMaps",
        "program"
      ],
      "returnType": "ParserServices;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\getModifiers.d.ts": [
    {
      "name": "getModifiers",
      "args": [
        "node",
        "includeIllegalModifiers?"
      ],
      "returnType": "ts.Modifier[] | undefined;"
    },
    {
      "name": "getDecorators",
      "args": [
        "node",
        "includeIllegalDecorators?"
      ],
      "returnType": "ts.Decorator[] | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\node-utils.d.ts": [
    {
      "name": "isLogicalOperator",
      "args": [
        "operator"
      ],
      "returnType": "operator is ts.Token<LogicalOperatorKind>;"
    },
    {
      "name": "isESTreeBinaryOperator",
      "args": [
        "operator"
      ],
      "returnType": "operator is ts.Token<BinaryOperatorKind>;"
    },
    {
      "name": "isESTreeClassMember",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "hasModifier",
      "args": [
        "modifierKind",
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getLastModifier",
      "args": [
        "node"
      ],
      "returnType": "ts.Modifier | null;"
    },
    {
      "name": "isComma",
      "args": [
        "token"
      ],
      "returnType": "token is ts.Token<ts.SyntaxKind.CommaToken>;"
    },
    {
      "name": "isComment",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getBinaryExpressionType",
      "args": [
        "operator"
      ],
      "returnType": ""
    },
    {
      "name": "getLineAndCharacterFor",
      "args": [
        "pos",
        "ast"
      ],
      "returnType": "TSESTree.Position;"
    },
    {
      "name": "getLocFor",
      "args": [
        "range",
        "ast"
      ],
      "returnType": "TSESTree.SourceLocation;"
    },
    {
      "name": "canContainDirective",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getRange",
      "args": [
        "node",
        "'getEnd' | 'getStart'>",
        "ast"
      ],
      "returnType": "[number, number];"
    },
    {
      "name": "isJSXToken",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getDeclarationKind",
      "args": [
        "node"
      ],
      "returnType": "DeclarationKind;"
    },
    {
      "name": "getTSNodeAccessibility",
      "args": [
        "node"
      ],
      "returnType": "'private' | 'protected' | 'public' | undefined;"
    },
    {
      "name": "findNextToken",
      "args": [
        "previousToken",
        "parent",
        "ast"
      ],
      "returnType": "ts.Node | undefined;"
    },
    {
      "name": "findFirstMatchingAncestor",
      "args": [
        "node",
        "predicate"
      ]
    },
    {
      "name": "hasJSXAncestor",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "unescapeStringLiteralText",
      "args": [
        "text"
      ],
      "returnType": "string;"
    },
    {
      "name": "isComputedProperty",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ComputedPropertyName;"
    },
    {
      "name": "isOptional",
      "args": [
        "node\n    questionToken?: ts.QuestionToken;\n}"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isChainExpression",
      "args": [
        "node"
      ],
      "returnType": "node is TSESTree.ChainExpression;"
    },
    {
      "name": "isChildUnwrappableOptionalChain",
      "args": [
        "node",
        "child"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getTokenType",
      "args": [
        "token"
      ],
      "returnType": "Exclude<AST_TOKEN_TYPES, AST_TOKEN_TYPES.Block | AST_TOKEN_TYPES.Line>;"
    },
    {
      "name": "convertToken",
      "args": [
        "token",
        "ast"
      ],
      "returnType": "TSESTree.Token;"
    },
    {
      "name": "convertTokens",
      "args": [
        "ast"
      ],
      "returnType": "TSESTree.Token[];"
    },
    {
      "name": "createError",
      "args": [
        "message",
        "ast",
        "startIndex",
        "endIndex?"
      ],
      "returnType": "TSError;"
    },
    {
      "name": "nodeHasIllegalDecorators",
      "args": [
        "node"
      ],
      "returnType": "node is ts.Node &"
    },
    {
      "name": "nodeHasTokens",
      "args": [
        "n",
        "ast"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "identifierIsThisKeyword",
      "args": [
        "id"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isThisIdentifier",
      "args": [
        "node"
      ],
      "returnType": "node is ts.Identifier;"
    },
    {
      "name": "isThisInTypeQuery",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "nodeIsPresent",
      "args": [
        "node"
      ],
      "returnType": "node is ts.Node;"
    },
    {
      "name": "getContainingFunction",
      "args": [
        "node"
      ],
      "returnType": "ts.SignatureDeclaration | undefined;"
    },
    {
      "name": "nodeCanBeDecorated",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isValidAssignmentTarget",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getNamespaceModifiers",
      "args": [
        "node"
      ],
      "returnType": "ts.Modifier[] | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parser.d.ts": [
    {
      "name": "clearProgramCache",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "clearDefaultProjectMatchedFiles",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "clearParseAndGenerateServicesCalls",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parseSettings\\createParseSettings.d.ts": [
    {
      "name": "createParseSettings",
      "args": [
        "code",
        "options?"
      ],
      "returnType": "MutableParseSettings;"
    },
    {
      "name": "clearTSConfigMatchCache",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "clearTSServerProjectService",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parseSettings\\getProjectConfigFiles.d.ts": [
    {
      "name": "getProjectConfigFiles",
      "args": [
        "parseSettings",
        "'filePath' | 'tsconfigMatchCache' | 'tsconfigRootDir'>",
        "project"
      ],
      "returnType": "string[] | null;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parseSettings\\inferSingleRun.d.ts": [
    {
      "name": "inferSingleRun",
      "args": [
        "options"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parseSettings\\resolveProjectList.d.ts": [
    {
      "name": "clearGlobCache",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "resolveProjectList",
      "args": [
        "options\n    cacheLifetime?: TSESTreeOptions['cacheLifetime'];\n    project: string[] | null;\n    projectFolderIgnoreList: TSESTreeOptions['projectFolderIgnoreList'];\n    singleRun: boolean;\n    tsconfigRootDir: string;\n}>"
      ],
      "returnType": "ReadonlyMap<CanonicalPath, string>;"
    },
    {
      "name": "clearGlobResolutionCache",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\parseSettings\\warnAboutTSVersion.d.ts": [
    {
      "name": "warnAboutTSVersion",
      "args": [
        "parseSettings",
        "passedLoggerFn"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\semantic-or-syntactic-errors.d.ts": [
    {
      "name": "getFirstSemanticOrSyntacticError",
      "args": [
        "program",
        "ast"
      ],
      "returnType": "SemanticOrSyntacticError | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\simple-traverse.d.ts": [
    {
      "name": "simpleTraverse",
      "args": [
        "startingNode",
        "options",
        "setParentPointers?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\source-files.d.ts": [
    {
      "name": "isSourceFile",
      "args": [
        "code"
      ],
      "returnType": "code is ts.SourceFile;"
    },
    {
      "name": "getCodeText",
      "args": [
        "code"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\typescript-estree\\dist\\useProgramFromProjectService.d.ts": [
    {
      "name": "useProgramFromProjectService",
      "args": [
        "{ allowDefaultProjectForFiles",
        "maximumDefaultProjectFileMatchCount",
        "service",
        "}",
        "parseSettings",
        "hasFullTypeInformation",
        "defaultProjectMatchedFiles"
      ],
      "returnType": "ASTAndDefiniteProgram | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\ast-utils\\misc.d.ts": [
    {
      "name": "isTokenOnSameLine",
      "args": [
        "left",
        "right"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\ast-utils\\predicates.d.ts": [
    {
      "name": "isSetter",
      "args": [
        "node"
      ],
      "returnType": "node is"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\eslint-utils\\context.d.ts": [
    {
      "name": "getAncestors",
      "args": [
        "context",
        "unknown[]>>"
      ],
      "returnType": "TSESTree.Node[];"
    },
    {
      "name": "getCwd",
      "args": [
        "context",
        "unknown[]>>"
      ],
      "returnType": "string;"
    },
    {
      "name": "getDeclaredVariables",
      "args": [
        "context",
        "unknown[]>>",
        "node"
      ],
      "returnType": "readonly Scope.Variable[];"
    },
    {
      "name": "getFilename",
      "args": [
        "context",
        "unknown[]>>"
      ],
      "returnType": "string;"
    },
    {
      "name": "getScope",
      "args": [
        "context",
        "readonly unknown[]>>"
      ],
      "returnType": "Scope.Scope;"
    },
    {
      "name": "getSourceCode",
      "args": [
        "context",
        "readonly unknown[]>>"
      ],
      "returnType": "Readonly<SourceCode>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\eslint-utils\\deepMerge.d.ts": [
    {
      "name": "deepMerge",
      "args": [
        "first?",
        "second?"
      ],
      "returnType": "Record<string, unknown>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\eslint-utils\\parserPathSeemsToBeTSESLint.d.ts": [
    {
      "name": "parserPathSeemsToBeTSESLint",
      "args": [
        "parserPath"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\eslint-utils\\RuleCreator.d.ts": [
    {
      "name": "RuleCreator",
      "args": [
        "urlCreator"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@typescript-eslint\\utils\\dist\\ts-utils\\isArray.d.ts": [
    {
      "name": "isArray",
      "args": [
        "arg"
      ],
      "returnType": "arg is readonly unknown[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@vscode\\test-electron\\out\\download.d.ts": [
    {
      "name": "fetchTargetInferredVersion",
      "args": [
        "options"
      ],
      "returnType": "Promise<Version>;"
    },
    {
      "name": "download",
      "args": [
        "options?"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "downloadAndUnzipVSCode",
      "args": [
        "options"
      ],
      "returnType": "Promise<string>;"
    },
    {
      "name": "downloadAndUnzipVSCode",
      "args": [
        "version?",
        "platform?",
        "reporter?",
        "extractSync?"
      ],
      "returnType": "Promise<string>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@vscode\\test-electron\\out\\request.d.ts": [
    {
      "name": "getStream",
      "args": [
        "api",
        "timeout"
      ],
      "returnType": "Promise<IncomingMessage>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@vscode\\test-electron\\out\\runTest.d.ts": [
    {
      "name": "run",
      "args": [],
      "returnType": "Promise<void>;"
    },
    {
      "name": "runTests",
      "args": [
        "options"
      ],
      "returnType": "Promise<number>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\@vscode\\test-electron\\out\\util.d.ts": [
    {
      "name": "getVSCodeDownloadUrl",
      "args": [
        "version",
        "platform"
      ],
      "returnType": "string;"
    },
    {
      "name": "urlToOptions",
      "args": [
        "url"
      ],
      "returnType": "https.RequestOptions;"
    },
    {
      "name": "downloadDirToExecutablePath",
      "args": [
        "dir",
        "platform"
      ],
      "returnType": "string;"
    },
    {
      "name": "insidersDownloadDirToExecutablePath",
      "args": [
        "dir",
        "platform"
      ],
      "returnType": "string;"
    },
    {
      "name": "insidersDownloadDirMetadata",
      "args": [
        "dir",
        "platform"
      ],
      "returnType": ""
    },
    {
      "name": "getInsidersVersionMetadata",
      "args": [
        "platform",
        "version",
        "released"
      ],
      "returnType": "Promise<IUpdateMetadata>;"
    },
    {
      "name": "getLatestInsidersMetadata",
      "args": [
        "platform",
        "released"
      ],
      "returnType": "Promise<IUpdateMetadata>;"
    },
    {
      "name": "resolveCliPathFromVSCodeExecutablePath",
      "args": [
        "vscodeExecutablePath",
        "platform?"
      ],
      "returnType": "string;"
    },
    {
      "name": "resolveCliArgsFromVSCodeExecutablePath",
      "args": [
        "vscodeExecutablePath",
        "options?",
        "'reuseMachineInstall' | 'platform'>"
      ],
      "returnType": "string[];"
    },
    {
      "name": "getProfileArguments",
      "args": [
        "args"
      ],
      "returnType": "string[];"
    },
    {
      "name": "hasArg",
      "args": [
        "argName",
        "argList"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "runVSCodeCommand",
      "args": [
        "_args",
        "options?"
      ],
      "returnType": "Promise<"
    },
    {
      "name": "validateStream",
      "args": [
        "readable",
        "length",
        "sha256?"
      ],
      "returnType": "Promise<void>;"
    },
    {
      "name": "streamToBuffer",
      "args": [
        "readable"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "isSubdirectory",
      "args": [
        "parent",
        "child"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "killTree",
      "args": [
        "processId",
        "force"
      ],
      "returnType": "Promise<void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\acorn\\dist\\acorn.d.ts": [
    {
      "name": "parse",
      "args": [
        "input",
        "options"
      ],
      "returnType": "Program"
    },
    {
      "name": "parseExpressionAt",
      "args": [
        "input",
        "pos",
        "options"
      ],
      "returnType": "Expression"
    },
    {
      "name": "tokenizer",
      "args": [
        "input",
        "options"
      ],
      "returnType": ""
    },
    {
      "name": "getLineInfo",
      "args": [
        "input",
        "offset"
      ],
      "returnType": "Position"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\agent-base\\dist\\helpers.d.ts": [
    {
      "name": "toBuffer",
      "args": [
        "stream"
      ],
      "returnType": "Promise<Buffer>;"
    },
    {
      "name": "json",
      "args": [
        "stream"
      ],
      "returnType": "Promise<any>;"
    },
    {
      "name": "req",
      "args": [
        "url",
        "opts?"
      ],
      "returnType": "ThenableRequest;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ajv-keywords\\ajv-keywords.d.ts": [
    {
      "name": "keywords",
      "args": [
        "ajv",
        "include?"
      ],
      "returnType": "Ajv;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ansi-colors\\types\\index.d.ts": [
    {
      "name": "stripColor",
      "args": [
        "s"
      ],
      "returnType": "string;"
    },
    {
      "name": "strip",
      "args": [
        "s"
      ],
      "returnType": "string;"
    },
    {
      "name": "unstyle",
      "args": [
        "s"
      ],
      "returnType": "string;"
    },
    {
      "name": "ok",
      "args": [
        "...args"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ansi-regex\\index.d.ts": [
    {
      "name": "ansiRegex",
      "args": [
        "options?"
      ],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\axios\\index.d.ts": [
    {
      "name": "getAdapter",
      "args": [
        "adapters"
      ],
      "returnType": "AxiosAdapter;"
    },
    {
      "name": "toFormData",
      "args": [
        "sourceObj",
        "targetFormData?",
        "options?"
      ],
      "returnType": "GenericFormData;"
    },
    {
      "name": "formToJSON",
      "args": [
        "form"
      ],
      "returnType": "object;"
    },
    {
      "name": "isCancel",
      "args": [
        "value"
      ],
      "returnType": "value is Cancel;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\base64-js\\index.d.ts": [
    {
      "name": "byteLength",
      "args": [
        "b64"
      ],
      "returnType": "number;"
    },
    {
      "name": "toByteArray",
      "args": [
        "b64"
      ],
      "returnType": "Uint8Array;"
    },
    {
      "name": "fromByteArray",
      "args": [
        "uint8"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\browserslist\\index.d.ts": [
    {
      "name": "browserslist",
      "args": [
        "queries?",
        "opts?"
      ],
      "returnType": "string[]"
    },
    {
      "name": "coverage",
      "args": [
        "browsers",
        "stats?"
      ],
      "returnType": "number"
    },
    {
      "name": "parse",
      "args": [
        "queries?",
        "opts?"
      ],
      "returnType": "Query[]"
    },
    {
      "name": "clearCaches",
      "args": [],
      "returnType": "void"
    },
    {
      "name": "parseConfig",
      "args": [
        "string"
      ],
      "returnType": "Config"
    },
    {
      "name": "readConfig",
      "args": [
        "file"
      ],
      "returnType": "Config"
    },
    {
      "name": "findConfig",
      "args": [
        "...pathSegments"
      ],
      "returnType": "Config | undefined"
    },
    {
      "name": "loadConfig",
      "args": [
        "options"
      ],
      "returnType": "string[] | undefined"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\callsites\\index.d.ts": [
    {
      "name": "unicorn",
      "args": []
    },
    {
      "name": "callsites",
      "args": [],
      "returnType": "callsites.CallSite[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\camelcase\\index.d.ts": [
    {
      "name": "camelcase",
      "args": [
        "input",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\chokidar\\types\\index.d.ts": [
    {
      "name": "watch",
      "args": [
        "paths",
        "options?"
      ],
      "returnType": "FSWatcher;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\cliui\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\cliui\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\colorette\\index.d.ts": [
    {
      "name": "createColors",
      "args": [
        "options?"
      ],
      "returnType": "Colorette"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\decamelize\\index.d.ts": [
    {
      "name": "decamelize",
      "args": [
        "string",
        "separator?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\es2015\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\es2015\\RGI_Emoji.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\es2015\\text.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\RGI_Emoji.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\emoji-regex\\text.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\enhanced-resolve\\types.d.ts": [
    {
      "name": "exports",
      "args": [
        "context",
        "path",
        "request",
        "resolveContext",
        "callback\n\t\terr: null | ErrorWithDetail",
        "res?",
        "req?"
      ]
    },
    {
      "name": "exports",
      "args": [
        "context",
        "path",
        "request",
        "callback\n\t\terr: null | ErrorWithDetail",
        "res?",
        "req?"
      ]
    },
    {
      "name": "exports",
      "args": [
        "path",
        "request",
        "resolveContext",
        "callback\n\t\terr: null | ErrorWithDetail",
        "res?",
        "req?"
      ]
    },
    {
      "name": "exports",
      "args": [
        "path",
        "request",
        "callback\n\t\terr: null | ErrorWithDetail",
        "res?",
        "req?"
      ]
    },
    {
      "name": "create",
      "args": [
        "options"
      ],
      "returnType": "ResolveFunctionAsync;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\es-module-lexer\\types\\lexer.d.ts": [
    {
      "name": "parse",
      "args": [
        "source",
        "name?"
      ],
      "returnType": "readonly ["
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\eslint-visitor-keys\\dist\\index.d.ts": [
    {
      "name": "getKeys",
      "args": [
        "node"
      ],
      "returnType": "readonly string[];"
    },
    {
      "name": "unionWith",
      "args": [
        "additionalKeys"
      ],
      "returnType": "VisitorKeys;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\index.d.ts": [
    {
      "name": "FastGlob",
      "args": [
        "source",
        "options"
      ],
      "returnType": "Promise<EntryInternal[]>;"
    },
    {
      "name": "FastGlob",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "sync",
      "args": [
        "source",
        "options"
      ],
      "returnType": "EntryInternal[];"
    },
    {
      "name": "sync",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "string[];"
    },
    {
      "name": "stream",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "NodeJS.ReadableStream;"
    },
    {
      "name": "generateTasks",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "Task[];"
    },
    {
      "name": "isDynamicPattern",
      "args": [
        "source",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "escapePath",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    },
    {
      "name": "convertPathToPattern",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    },
    {
      "name": "escapePath",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    },
    {
      "name": "convertPathToPattern",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    },
    {
      "name": "escapePath",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    },
    {
      "name": "convertPathToPattern",
      "args": [
        "source"
      ],
      "returnType": "PatternInternal;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\managers\\tasks.d.ts": [
    {
      "name": "generate",
      "args": [
        "input",
        "settings"
      ],
      "returnType": "Task[];"
    },
    {
      "name": "convertPatternsToTasks",
      "args": [
        "positive",
        "negative",
        "dynamic"
      ],
      "returnType": "Task[];"
    },
    {
      "name": "getPositivePatterns",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "getNegativePatternsAsPositive",
      "args": [
        "patterns",
        "ignore"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "groupPatternsByBaseDirectory",
      "args": [
        "patterns"
      ],
      "returnType": "PatternsGroup;"
    },
    {
      "name": "convertPatternGroupsToTasks",
      "args": [
        "positive",
        "negative",
        "dynamic"
      ],
      "returnType": "Task[];"
    },
    {
      "name": "convertPatternGroupToTask",
      "args": [
        "base",
        "positive",
        "negative",
        "dynamic"
      ],
      "returnType": "Task;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\errno.d.ts": [
    {
      "name": "isEnoentCodeError",
      "args": [
        "error"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\fs.d.ts": [
    {
      "name": "createDirentFromStats",
      "args": [
        "name",
        "stats"
      ],
      "returnType": "Dirent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\path.d.ts": [
    {
      "name": "unixify",
      "args": [
        "filepath"
      ],
      "returnType": "string;"
    },
    {
      "name": "makeAbsolute",
      "args": [
        "cwd",
        "filepath"
      ],
      "returnType": "string;"
    },
    {
      "name": "removeLeadingDotSegment",
      "args": [
        "entry"
      ],
      "returnType": "string;"
    },
    {
      "name": "escapeWindowsPath",
      "args": [
        "pattern"
      ],
      "returnType": "Pattern;"
    },
    {
      "name": "escapePosixPath",
      "args": [
        "pattern"
      ],
      "returnType": "Pattern;"
    },
    {
      "name": "convertWindowsPathToPattern",
      "args": [
        "filepath"
      ],
      "returnType": "Pattern;"
    },
    {
      "name": "convertPosixPathToPattern",
      "args": [
        "filepath"
      ],
      "returnType": "Pattern;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\pattern.d.ts": [
    {
      "name": "isStaticPattern",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isDynamicPattern",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "convertToPositivePattern",
      "args": [
        "pattern"
      ],
      "returnType": "Pattern;"
    },
    {
      "name": "convertToNegativePattern",
      "args": [
        "pattern"
      ],
      "returnType": "Pattern;"
    },
    {
      "name": "isNegativePattern",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isPositivePattern",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getNegativePatterns",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "getPositivePatterns",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "getPatternsInsideCurrentDirectory",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "getPatternsOutsideCurrentDirectory",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "isPatternRelatedToParentDirectory",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getBaseDirectory",
      "args": [
        "pattern"
      ],
      "returnType": "string;"
    },
    {
      "name": "hasGlobStar",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "endsWithSlashGlobStar",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isAffectDepthOfReadingPattern",
      "args": [
        "pattern"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "expandPatternsWithBraceExpansion",
      "args": [
        "patterns"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "expandBraceExpansion",
      "args": [
        "pattern"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "getPatternParts",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Pattern[];"
    },
    {
      "name": "makeRe",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "PatternRe;"
    },
    {
      "name": "convertPatternsToRe",
      "args": [
        "patterns",
        "options"
      ],
      "returnType": "PatternRe[];"
    },
    {
      "name": "matchAny",
      "args": [
        "entry",
        "patternsRe"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "removeDuplicateSlashes",
      "args": [
        "pattern"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\stream.d.ts": [
    {
      "name": "merge",
      "args": [
        "streams"
      ],
      "returnType": "NodeJS.ReadableStream;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-glob\\out\\utils\\string.d.ts": [
    {
      "name": "isString",
      "args": [
        "input"
      ],
      "returnType": "input is string;"
    },
    {
      "name": "isEmpty",
      "args": [
        "input"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fast-json-stable-stringify\\index.d.ts": [
    {
      "name": "stringify",
      "args": [
        "obj"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fastest-levenshtein\\test.ts": [
    {
      "name": "levenshtein",
      "args": [
        "a",
        "b"
      ]
    },
    {
      "name": "makeid",
      "args": [
        "length"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\fastq\\test\\example.ts": [
    {
      "name": "worker",
      "args": [
        "task",
        "cb"
      ]
    },
    {
      "name": "genericsWorker",
      "args": [
        "this",
        "task",
        "cb"
      ]
    },
    {
      "name": "asyncWorker",
      "args": [
        "task"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\flatted\\types\\index.d.ts": [
    {
      "name": "parse",
      "args": [
        "text",
        "reviver?",
        "key",
        "value"
      ]
    },
    {
      "name": "stringify",
      "args": [
        "value",
        "replacer?"
      ]
    },
    {
      "name": "toJSON",
      "args": [
        "value"
      ],
      "returnType": "any;"
    },
    {
      "name": "fromJSON",
      "args": [
        "value"
      ],
      "returnType": "any;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\foreground-child\\dist\\cjs\\index.d.ts": [
    {
      "name": "foregroundChild",
      "args": [
        "cmd",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "args?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "spawnOpts?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "args?",
        "spawnOpts?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\foreground-child\\dist\\mjs\\index.d.ts": [
    {
      "name": "foregroundChild",
      "args": [
        "cmd",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "args?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "spawnOpts?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    },
    {
      "name": "foregroundChild",
      "args": [
        "program",
        "args?",
        "spawnOpts?",
        "cleanup?"
      ],
      "returnType": "ChildProcess;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\glob\\dist\\commonjs\\index.d.ts": [
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path> | Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path> | Minipass<string, string>;"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "string[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Path[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "string[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Path[] | string[];"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<Path[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<Path[] | string[]>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Generator<string, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<Path, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<string, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<Path, void, void> | Generator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "AsyncGenerator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<Path, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<Path, void, void> | AsyncGenerator<string, void, void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\glob\\dist\\esm\\index.d.ts": [
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStreamSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path> | Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Minipass<string, string>;"
    },
    {
      "name": "globStream",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Minipass<Path, Path> | Minipass<string, string>;"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "string[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Path[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "string[];"
    },
    {
      "name": "globSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Path[] | string[];"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<Path[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<string[]>;"
    },
    {
      "name": "glob_",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Promise<Path[] | string[]>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "Generator<string, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<Path, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<string, void, void>;"
    },
    {
      "name": "globIterateSync",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "Generator<Path, void, void> | Generator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options?"
      ],
      "returnType": "AsyncGenerator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<Path, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<string, void, void>;"
    },
    {
      "name": "globIterate",
      "args": [
        "pattern",
        "options"
      ],
      "returnType": "AsyncGenerator<Path, void, void> | AsyncGenerator<string, void, void>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\has-flag\\index.d.ts": [
    {
      "name": "hasFlag",
      "args": [
        "flag",
        "argv?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\https-proxy-agent\\dist\\parse-proxy-response.d.ts": [
    {
      "name": "parseProxyResponse",
      "args": [
        "socket"
      ],
      "returnType": "Promise<"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ieee754\\index.d.ts": [
    {
      "name": "read",
      "args": [
        "buffer",
        "offset",
        "isLE",
        "mLen",
        "nBytes"
      ],
      "returnType": "number;"
    },
    {
      "name": "write",
      "args": [
        "buffer",
        "value",
        "offset",
        "isLE",
        "mLen",
        "nBytes"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ignore\\index.d.ts": [
    {
      "name": "ignore",
      "args": [
        "options?"
      ],
      "returnType": "Ignore"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-binary-path\\index.d.ts": [
    {
      "name": "isBinaryPath",
      "args": [
        "filePath"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-fullwidth-code-point\\index.d.ts": [
    {
      "name": "isFullwidthCodePoint",
      "args": [
        "codePoint"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-interactive\\index.d.ts": [
    {
      "name": "isInteractive",
      "args": [
        "options?"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-path-inside\\index.d.ts": [
    {
      "name": "isPathInside",
      "args": [
        "childPath",
        "parentPath"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-plain-obj\\index.d.ts": [
    {
      "name": "isPlainObj",
      "args": [
        "value"
      ],
      "returnType": "value is object;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-plain-object\\index.d.ts": [
    {
      "name": "isPlainObject",
      "args": [
        "o"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\is-unicode-supported\\index.d.ts": [
    {
      "name": "isUnicodeSupported",
      "args": [],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\isobject\\index.d.ts": [
    {
      "name": "isObject",
      "args": [
        "val"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\jest-worker\\build\\workers\\messageParent.d.ts": [
    {
      "name": "messageParent",
      "args": [
        "message",
        "parentProcess?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\mimic-fn\\index.d.ts": [
    {
      "name": "foo",
      "args": []
    },
    {
      "name": "wrapper",
      "args": []
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\mocha\\node_modules\\chokidar\\types\\index.d.ts": [
    {
      "name": "watch",
      "args": [
        "paths",
        "options?"
      ],
      "returnType": "FSWatcher;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\mocha\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\mocha\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\index.d.ts": [
    {
      "name": "ora",
      "args": [
        "options?"
      ],
      "returnType": "Ora;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\ansi-regex\\index.d.ts": [
    {
      "name": "ansiRegex",
      "args": [
        "options?"
      ],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\chalk\\source\\vendor\\supports-color\\index.d.ts": [
    {
      "name": "createSupportsColor",
      "args": [
        "stream?",
        "options?"
      ],
      "returnType": "ColorInfo;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\is-unicode-supported\\index.d.ts": [
    {
      "name": "isUnicodeSupported",
      "args": [],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string",
        "options?"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ora\\node_modules\\strip-ansi\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\p-limit\\index.d.ts": [
    {
      "name": "pLimit",
      "args": [
        "concurrency"
      ],
      "returnType": "pLimit.Limit;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\path-key\\index.d.ts": [
    {
      "name": "pathKey",
      "args": [
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\pkg-dir\\node_modules\\p-limit\\index.d.ts": [
    {
      "name": "pLimit",
      "args": [
        "concurrency"
      ],
      "returnType": "Limit;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\readdirp\\index.d.ts": [
    {
      "name": "promise",
      "args": [
        "root",
        "options?"
      ],
      "returnType": "Promise<EntryInfo[]>;"
    },
    {
      "name": "readdir",
      "args": [
        "root",
        "options?"
      ],
      "returnType": "readdir.ReaddirpStream;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\restore-cursor\\index.d.ts": [
    {
      "name": "restoreCursor",
      "args": [],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\schema-utils\\declarations\\keywords\\absolutePath.d.ts": [
    {
      "name": "addAbsolutePathKeyword",
      "args": [
        "ajv"
      ],
      "returnType": "Ajv;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\schema-utils\\declarations\\keywords\\undefinedAsNull.d.ts": [
    {
      "name": "addUndefinedAsNullKeyword",
      "args": [
        "ajv"
      ],
      "returnType": "Ajv;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\schema-utils\\declarations\\util\\hints.d.ts": [
    {
      "name": "stringHints",
      "args": [
        "schema",
        "logic"
      ],
      "returnType": "string[];"
    },
    {
      "name": "numberHints",
      "args": [
        "schema",
        "logic"
      ],
      "returnType": "string[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\schema-utils\\declarations\\validate.d.ts": [
    {
      "name": "validate",
      "args": [
        "schema",
        "options",
        "configuration?"
      ],
      "returnType": "void;"
    },
    {
      "name": "enableValidation",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "disableValidation",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "needValidate",
      "args": [],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\slash\\index.d.ts": [
    {
      "name": "slash",
      "args": [
        "path"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\source-map\\source-map.d.ts": [
    {
      "name": "f",
      "args": [
        "SourceMapConsumer"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string",
        "options?"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\string-width\\node_modules\\ansi-regex\\index.d.ts": [
    {
      "name": "ansiRegex",
      "args": [
        "options?"
      ],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\string-width\\node_modules\\strip-ansi\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\string-width-cjs\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\string-width-cjs\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\strip-ansi\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\strip-ansi-cjs\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\strip-json-comments\\index.d.ts": [
    {
      "name": "stripJsonComments",
      "args": [
        "jsonString",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\supports-color\\index.d.ts": [
    {
      "name": "createSupportsColor",
      "args": [
        "stream?",
        "options?"
      ],
      "returnType": "ColorInfo;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\terser\\tools\\terser.d.ts": [
    {
      "name": "minify",
      "args": [
        "files",
        "options?"
      ],
      "returnType": "Promise<MinifyOutput>;"
    },
    {
      "name": "minify_sync",
      "args": [
        "files",
        "options?"
      ],
      "returnType": "MinifyOutput;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\terser-webpack-plugin\\types\\minify.d.ts": [
    {
      "name": "transform",
      "args": [
        "options"
      ],
      "returnType": "Promise<MinimizedResult>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\terser-webpack-plugin\\types\\utils.d.ts": [
    {
      "name": "terserMinify",
      "args": [
        "input",
        "sourceMap",
        "minimizerOptions",
        "extractComments"
      ],
      "returnType": "Promise<MinimizedResult>;"
    },
    {
      "name": "getMinimizerVersion",
      "args": [],
      "returnType": "string | undefined;"
    },
    {
      "name": "uglifyJsMinify",
      "args": [
        "input",
        "sourceMap",
        "minimizerOptions",
        "extractComments"
      ],
      "returnType": "Promise<MinimizedResult>;"
    },
    {
      "name": "getMinimizerVersion",
      "args": [],
      "returnType": "string | undefined;"
    },
    {
      "name": "swcMinify",
      "args": [
        "input",
        "sourceMap",
        "minimizerOptions"
      ],
      "returnType": "Promise<MinimizedResult>;"
    },
    {
      "name": "getMinimizerVersion",
      "args": [],
      "returnType": "string | undefined;"
    },
    {
      "name": "esbuildMinify",
      "args": [
        "input",
        "sourceMap",
        "minimizerOptions"
      ],
      "returnType": "Promise<MinimizedResult>;"
    },
    {
      "name": "getMinimizerVersion",
      "args": [],
      "returnType": "string | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-api-utils\\lib\\index.d.ts": [
    {
      "name": "forEachComment",
      "args": [
        "node",
        "callback",
        "sourceFile?"
      ],
      "returnType": "void;"
    },
    {
      "name": "isCompilerOptionEnabled",
      "args": [
        "options",
        "option"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isStrictCompilerOptionEnabled",
      "args": [
        "options",
        "option"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isModifierFlagSet",
      "args": [
        "node",
        "flag"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isObjectFlagSet",
      "args": [
        "objectType",
        "flag"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "includesModifier",
      "args": [
        "modifiers",
        "...kinds"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getAccessKind",
      "args": [
        "node"
      ],
      "returnType": "AccessKind;"
    },
    {
      "name": "isConstAssertionExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ConstAssertionExpression;"
    },
    {
      "name": "isIterationStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ts.IterationStatement;"
    },
    {
      "name": "isJSDocNamespaceDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JSDocNamespaceDeclaration;"
    },
    {
      "name": "isJsxTagNamePropertyAccess",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsxTagNamePropertyAccess;"
    },
    {
      "name": "isNamedDeclarationWithName",
      "args": [
        "node"
      ],
      "returnType": "node is NamedDeclarationWithName;"
    },
    {
      "name": "isNamespaceDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.NamespaceDeclaration;"
    },
    {
      "name": "isNumericOrStringLikeLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is NumericOrStringLikeLiteral;"
    },
    {
      "name": "isPropertyAccessEntityNameExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.PropertyAccessEntityNameExpression;"
    },
    {
      "name": "isSuperElementAccessExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SuperElementAccessExpression;"
    },
    {
      "name": "isSuperPropertyAccessExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SuperPropertyAccessExpression;"
    },
    {
      "name": "isAbstractKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AbstractKeyword;"
    },
    {
      "name": "isAccessorKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AccessorKeyword;"
    },
    {
      "name": "isAnyKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is AnyKeyword;"
    },
    {
      "name": "isAssertKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AssertKeyword;"
    },
    {
      "name": "isAssertsKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AssertsKeyword;"
    },
    {
      "name": "isAsyncKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AsyncKeyword;"
    },
    {
      "name": "isAwaitKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AwaitKeyword;"
    },
    {
      "name": "isBigIntKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is BigIntKeyword;"
    },
    {
      "name": "isBooleanKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is BooleanKeyword;"
    },
    {
      "name": "isColonToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ColonToken;"
    },
    {
      "name": "isConstKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ConstKeyword;"
    },
    {
      "name": "isDeclareKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DeclareKeyword;"
    },
    {
      "name": "isDefaultKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DefaultKeyword;"
    },
    {
      "name": "isDotToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DotToken;"
    },
    {
      "name": "isEndOfFileToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.EndOfFileToken;"
    },
    {
      "name": "isEqualsGreaterThanToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.EqualsGreaterThanToken;"
    },
    {
      "name": "isEqualsToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.EqualsToken;"
    },
    {
      "name": "isExclamationToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ExclamationToken;"
    },
    {
      "name": "isExportKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ExportKeyword;"
    },
    {
      "name": "isFalseKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is FalseKeyword;"
    },
    {
      "name": "isFalseLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.FalseLiteral;"
    },
    {
      "name": "isImportExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ImportExpression;"
    },
    {
      "name": "isImportKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ImportKeyword;"
    },
    {
      "name": "isInKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.InKeyword;"
    },
    {
      "name": "isInputFiles",
      "args": [
        "node"
      ],
      "returnType": "node is ts.InputFiles;"
    },
    {
      "name": "isJSDocText",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JSDocText;"
    },
    {
      "name": "isJsonMinusNumericLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsonMinusNumericLiteral;"
    },
    {
      "name": "isNeverKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is NeverKeyword;"
    },
    {
      "name": "isNullKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is NullKeyword;"
    },
    {
      "name": "isNullLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.NullLiteral;"
    },
    {
      "name": "isNumberKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is NumberKeyword;"
    },
    {
      "name": "isObjectKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ObjectKeyword;"
    },
    {
      "name": "isOutKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.OutKeyword;"
    },
    {
      "name": "isOverrideKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.OverrideKeyword;"
    },
    {
      "name": "isPrivateKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.PrivateKeyword;"
    },
    {
      "name": "isProtectedKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ProtectedKeyword;"
    },
    {
      "name": "isPublicKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.PublicKeyword;"
    },
    {
      "name": "isQuestionDotToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.QuestionDotToken;"
    },
    {
      "name": "isQuestionToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.QuestionToken;"
    },
    {
      "name": "isReadonlyKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ReadonlyKeyword;"
    },
    {
      "name": "isStaticKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ts.StaticKeyword;"
    },
    {
      "name": "isStringKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is StringKeyword;"
    },
    {
      "name": "isSuperExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SuperExpression;"
    },
    {
      "name": "isSuperKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is SuperKeyword;"
    },
    {
      "name": "isSymbolKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is SymbolKeyword;"
    },
    {
      "name": "isSyntaxList",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SyntaxList;"
    },
    {
      "name": "isThisExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ThisExpression;"
    },
    {
      "name": "isThisKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is ThisKeyword;"
    },
    {
      "name": "isTrueKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is TrueKeyword;"
    },
    {
      "name": "isTrueLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.TrueLiteral;"
    },
    {
      "name": "isUndefinedKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is UndefinedKeyword;"
    },
    {
      "name": "isUnknownKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is UnknownKeyword;"
    },
    {
      "name": "isUnparsedPrologue",
      "args": [
        "node"
      ],
      "returnType": "node is ts.UnparsedPrologue;"
    },
    {
      "name": "isUnparsedSyntheticReference",
      "args": [
        "node"
      ],
      "returnType": "node is ts.UnparsedSyntheticReference;"
    },
    {
      "name": "isVoidKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is VoidKeyword;"
    },
    {
      "name": "isAccessExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AccessExpression;"
    },
    {
      "name": "isAccessibilityModifier",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AccessibilityModifier;"
    },
    {
      "name": "isAccessorDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AccessorDeclaration;"
    },
    {
      "name": "isArrayBindingElement",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ArrayBindingElement;"
    },
    {
      "name": "isArrayBindingOrAssignmentPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ArrayBindingOrAssignmentPattern;"
    },
    {
      "name": "isAssignmentPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.AssignmentPattern;"
    },
    {
      "name": "isBindingOrAssignmentElementRestIndicator",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BindingOrAssignmentElementRestIndicator;"
    },
    {
      "name": "isBindingOrAssignmentElementTarget",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BindingOrAssignmentElementTarget;"
    },
    {
      "name": "isBindingOrAssignmentPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BindingOrAssignmentPattern;"
    },
    {
      "name": "isBindingPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BindingPattern;"
    },
    {
      "name": "isBlockLike",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BlockLike;"
    },
    {
      "name": "isBooleanLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.BooleanLiteral;"
    },
    {
      "name": "isClassLikeDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ClassLikeDeclaration;"
    },
    {
      "name": "isClassMemberModifier",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ClassMemberModifier;"
    },
    {
      "name": "isDeclarationName",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DeclarationName;"
    },
    {
      "name": "isDeclarationWithTypeParameterChildren",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DeclarationWithTypeParameterChildren;"
    },
    {
      "name": "isDeclarationWithTypeParameters",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DeclarationWithTypeParameters;"
    },
    {
      "name": "isDestructuringPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.DestructuringPattern;"
    },
    {
      "name": "isEntityNameExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.EntityNameExpression;"
    },
    {
      "name": "isEntityNameOrEntityNameExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.EntityNameOrEntityNameExpression;"
    },
    {
      "name": "isForInOrOfStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ForInOrOfStatement;"
    },
    {
      "name": "isFunctionLikeDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.FunctionLikeDeclaration;"
    },
    {
      "name": "hasDecorators",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasDecorators;"
    },
    {
      "name": "hasExpressionInitializer",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasExpressionInitializer;"
    },
    {
      "name": "hasInitializer",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasInitializer;"
    },
    {
      "name": "hasJSDoc",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasJSDoc;"
    },
    {
      "name": "hasModifiers",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasModifiers;"
    },
    {
      "name": "hasType",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasType;"
    },
    {
      "name": "hasTypeArguments",
      "args": [
        "node"
      ],
      "returnType": "node is ts.HasTypeArguments;"
    },
    {
      "name": "isJSDocComment",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JSDocComment;"
    },
    {
      "name": "isJSDocNamespaceBody",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JSDocNamespaceBody;"
    },
    {
      "name": "isJSDocTypeReferencingNode",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JSDocTypeReferencingNode;"
    },
    {
      "name": "isJsonObjectExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsonObjectExpression;"
    },
    {
      "name": "isJsxAttributeLike",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsxAttributeLike;"
    },
    {
      "name": "isJsxAttributeValue",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsxAttributeValue;"
    },
    {
      "name": "isJsxChild",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsxChild;"
    },
    {
      "name": "isJsxTagNameExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ts.JsxTagNameExpression;"
    },
    {
      "name": "isLiteralToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.LiteralToken;"
    },
    {
      "name": "isModuleBody",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ModuleBody;"
    },
    {
      "name": "isModuleName",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ModuleName;"
    },
    {
      "name": "isModuleReference",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ModuleReference;"
    },
    {
      "name": "isNamedImportBindings",
      "args": [
        "node"
      ],
      "returnType": "node is ts.NamedImportBindings;"
    },
    {
      "name": "isNamedImportsOrExports",
      "args": [
        "node"
      ],
      "returnType": "node is ts.NamedImportsOrExports;"
    },
    {
      "name": "isNamespaceBody",
      "args": [
        "node"
      ],
      "returnType": "node is ts.NamespaceBody;"
    },
    {
      "name": "isObjectBindingOrAssignmentElement",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ObjectBindingOrAssignmentElement;"
    },
    {
      "name": "isObjectBindingOrAssignmentPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ObjectBindingOrAssignmentPattern;"
    },
    {
      "name": "isObjectTypeDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ObjectTypeDeclaration;"
    },
    {
      "name": "isParameterPropertyModifier",
      "args": [
        "node"
      ],
      "returnType": "node is ts.ParameterPropertyModifier;"
    },
    {
      "name": "isPropertyNameLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is ts.PropertyNameLiteral;"
    },
    {
      "name": "isPseudoLiteralToken",
      "args": [
        "node"
      ],
      "returnType": "node is ts.PseudoLiteralToken;"
    },
    {
      "name": "isSignatureDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SignatureDeclaration;"
    },
    {
      "name": "isSuperProperty",
      "args": [
        "node"
      ],
      "returnType": "node is ts.SuperProperty;"
    },
    {
      "name": "isTypeOnlyCompatibleAliasDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.TypeOnlyCompatibleAliasDeclaration;"
    },
    {
      "name": "isTypeReferenceType",
      "args": [
        "node"
      ],
      "returnType": "node is ts.TypeReferenceType;"
    },
    {
      "name": "isUnionOrIntersectionTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ts.UnionOrIntersectionTypeNode;"
    },
    {
      "name": "isUnparsedSourceText",
      "args": [
        "node"
      ],
      "returnType": "node is ts.UnparsedSourceText;"
    },
    {
      "name": "isVariableLikeDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ts.VariableLikeDeclaration;"
    },
    {
      "name": "isFunctionScopeBoundary",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isAssignmentKind",
      "args": [
        "kind"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isNumericPropertyName",
      "args": [
        "name"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isValidPropertyAccess",
      "args": [
        "text",
        "languageVersion?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "forEachToken",
      "args": [
        "node",
        "callback",
        "sourceFile?"
      ],
      "returnType": "void;"
    },
    {
      "name": "getCallSignaturesOfType",
      "args": [
        "type"
      ],
      "returnType": "readonly ts.Signature[];"
    },
    {
      "name": "getPropertyOfType",
      "args": [
        "type",
        "name"
      ],
      "returnType": "ts.Symbol | undefined;"
    },
    {
      "name": "getWellKnownSymbolPropertyOfType",
      "args": [
        "type",
        "wellKnownSymbolName",
        "typeChecker"
      ],
      "returnType": "ts.Symbol | undefined;"
    },
    {
      "name": "isIntrinsicAnyType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicAnyType;"
    },
    {
      "name": "isIntrinsicBooleanType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicBooleanType;"
    },
    {
      "name": "isIntrinsicBigIntType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicBigIntType;"
    },
    {
      "name": "isIntrinsicErrorType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicErrorType;"
    },
    {
      "name": "isIntrinsicESSymbolType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicESSymbolType;"
    },
    {
      "name": "isIntrinsicType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicType;"
    },
    {
      "name": "isIntrinsicNeverType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicNeverType;"
    },
    {
      "name": "isIntrinsicNonPrimitiveType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicNonPrimitiveType;"
    },
    {
      "name": "isIntrinsicNullType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicNullType;"
    },
    {
      "name": "isIntrinsicNumberType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicNumberType;"
    },
    {
      "name": "isIntrinsicStringType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicStringType;"
    },
    {
      "name": "isIntrinsicUndefinedType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicUndefinedType;"
    },
    {
      "name": "isIntrinsicUnknownType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicUnknownType;"
    },
    {
      "name": "isIntrinsicVoidType",
      "args": [
        "type"
      ],
      "returnType": "type is IntrinsicVoidType;"
    },
    {
      "name": "isFreshableIntrinsicType",
      "args": [
        "type"
      ],
      "returnType": "type is FreshableIntrinsicType;"
    },
    {
      "name": "isTupleTypeReference",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TupleTypeReference;"
    },
    {
      "name": "isBooleanLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is BooleanLiteralType;"
    },
    {
      "name": "isBigIntLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.BigIntLiteralType;"
    },
    {
      "name": "isFalseLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is FalseLiteralType;"
    },
    {
      "name": "isLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.LiteralType;"
    },
    {
      "name": "isNumberLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.NumberLiteralType;"
    },
    {
      "name": "isStringLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.StringLiteralType;"
    },
    {
      "name": "isTemplateLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TemplateLiteralType;"
    },
    {
      "name": "isTrueLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is TrueLiteralType;"
    },
    {
      "name": "isUnknownLiteralType",
      "args": [
        "type"
      ],
      "returnType": "type is UnknownLiteralType;"
    },
    {
      "name": "isEvolvingArrayType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.EvolvingArrayType;"
    },
    {
      "name": "isTupleType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TupleType;"
    },
    {
      "name": "isTypeReference",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TypeReference;"
    },
    {
      "name": "isConditionalType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.ConditionalType;"
    },
    {
      "name": "isEnumType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.EnumType;"
    },
    {
      "name": "isFreshableType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.FreshableType;"
    },
    {
      "name": "isIndexType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.IndexType;"
    },
    {
      "name": "isIndexedAccessType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.IndexedAccessType;"
    },
    {
      "name": "isInstantiableType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.InstantiableType;"
    },
    {
      "name": "isIntersectionType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.IntersectionType;"
    },
    {
      "name": "isObjectType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.ObjectType;"
    },
    {
      "name": "isStringMappingType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.StringMappingType;"
    },
    {
      "name": "isSubstitutionType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.SubstitutionType;"
    },
    {
      "name": "isTypeParameter",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TypeParameter;"
    },
    {
      "name": "isTypeVariable",
      "args": [
        "type"
      ],
      "returnType": "type is ts.TypeVariable;"
    },
    {
      "name": "isUnionType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.UnionType;"
    },
    {
      "name": "isUnionOrIntersectionType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.UnionOrIntersectionType;"
    },
    {
      "name": "isUniqueESSymbolType",
      "args": [
        "type"
      ],
      "returnType": "type is ts.UniqueESSymbolType;"
    },
    {
      "name": "isFalsyType",
      "args": [
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "intersectionTypeParts",
      "args": [
        "type"
      ],
      "returnType": "ts.Type[];"
    },
    {
      "name": "typeParts",
      "args": [
        "type"
      ],
      "returnType": "ts.Type[];"
    },
    {
      "name": "isPropertyReadonlyInType",
      "args": [
        "type",
        "name",
        "typeChecker"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isThenableType",
      "args": [
        "typeChecker",
        "node",
        "type"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isThenableType",
      "args": [
        "typeChecker",
        "node",
        "type?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "symbolHasReadonlyDeclaration",
      "args": [
        "symbol",
        "typeChecker"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "unionTypeParts",
      "args": [
        "type"
      ],
      "returnType": "ts.Type[];"
    },
    {
      "name": "collectVariableUsage",
      "args": [
        "sourceFile"
      ],
      "returnType": "Map<ts.Identifier, UsageInfo>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\after-compile.d.ts": [
    {
      "name": "makeAfterCompile",
      "args": [
        "instance",
        "configFilePath"
      ],
      "returnType": "(compilation: webpack.Compilation, callback: () => void) => void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\compilerSetup.d.ts": [
    {
      "name": "getCompiler",
      "args": [
        "loaderOptions",
        "log"
      ],
      "returnType": ""
    },
    {
      "name": "getCompilerOptions",
      "args": [
        "configParseResult",
        "compiler"
      ],
      "returnType": ""
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\config.d.ts": [
    {
      "name": "getConfigFile",
      "args": [
        "compiler",
        "colors",
        "loader",
        "loaderOptions",
        "compilerCompatible",
        "log",
        "compilerDetailsLogMessage"
      ],
      "returnType": ""
    },
    {
      "name": "getConfigParseResult",
      "args": [
        "compiler",
        "configFile",
        "basePath",
        "configFilePath",
        "loaderOptions"
      ],
      "returnType": "typescript.ParsedCommandLine;"
    },
    {
      "name": "getParsedCommandLine",
      "args": [
        "compiler",
        "loaderOptions",
        "configFilePath"
      ],
      "returnType": "typescript.ParsedCommandLine | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\index.d.ts": [
    {
      "name": "loader",
      "args": [
        "this",
        "contents",
        "inputSourceMap?",
        "any>"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\instance-cache.d.ts": [
    {
      "name": "getTSInstanceFromCache",
      "args": [
        "key",
        "name"
      ],
      "returnType": "TSInstance | undefined;"
    },
    {
      "name": "setTSInstanceInCache",
      "args": [
        "key",
        "name",
        "instance"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\instances.d.ts": [
    {
      "name": "getTypeScriptInstance",
      "args": [
        "loaderOptions",
        "loader"
      ],
      "returnType": ""
    },
    {
      "name": "initializeInstance",
      "args": [
        "loader",
        "instance"
      ],
      "returnType": "void;"
    },
    {
      "name": "getCustomTransformers",
      "args": [
        "loaderOptions",
        "program",
        "getProgram"
      ]
    },
    {
      "name": "reportTranspileErrors",
      "args": [
        "instance",
        "loader"
      ],
      "returnType": "void;"
    },
    {
      "name": "buildSolutionReferences",
      "args": [
        "instance",
        "loader"
      ],
      "returnType": "void;"
    },
    {
      "name": "getOutputFileNames",
      "args": [
        "instance",
        "configFile",
        "inputFileName"
      ],
      "returnType": "string[];"
    },
    {
      "name": "getInputFileNameFromOutput",
      "args": [
        "instance",
        "filePath"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "getEmitFromWatchHost",
      "args": [
        "instance",
        "filePath?"
      ],
      "returnType": "typescript.OutputFile[] | undefined;"
    },
    {
      "name": "getEmitOutput",
      "args": [
        "instance",
        "filePath"
      ],
      "returnType": "typescript.OutputFile[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\logger.d.ts": [
    {
      "name": "makeLogger",
      "args": [
        "loaderOptions",
        "colors"
      ],
      "returnType": "Logger;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\resolver.d.ts": [
    {
      "name": "makeResolver",
      "args": [
        "_options"
      ],
      "returnType": "ResolveSync;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\servicesHost.d.ts": [
    {
      "name": "makeServicesHost",
      "args": [
        "scriptRegex",
        "loader",
        "instance",
        "projectReferences?"
      ],
      "returnType": "ServiceHostWhichMayBeCacheable;"
    },
    {
      "name": "updateFileWithText",
      "args": [
        "instance",
        "key",
        "filePath",
        "text"
      ]
    },
    {
      "name": "makeWatchHost",
      "args": [
        "scriptRegex",
        "loader",
        "instance",
        "projectReferences?"
      ],
      "returnType": "WatchHost;"
    },
    {
      "name": "makeSolutionBuilderHost",
      "args": [
        "scriptRegex",
        "loader",
        "instance"
      ],
      "returnType": "SolutionBuilderWithWatchHost;"
    },
    {
      "name": "getSolutionErrors",
      "args": [
        "instance",
        "context"
      ],
      "returnType": "webpack.WebpackError[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\utils.d.ts": [
    {
      "name": "formatErrors",
      "args": [
        "diagnostics",
        "loaderOptions",
        "colors",
        "compiler",
        "merge\n    file?: string;\n    module?: webpack.Module;\n}",
        "context"
      ],
      "returnType": "webpack.WebpackError[];"
    },
    {
      "name": "fsReadFile",
      "args": [
        "fileName",
        "encoding?"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "makeError",
      "args": [
        "loaderOptions",
        "message",
        "file",
        "location?",
        "endLocation?"
      ],
      "returnType": "webpack.WebpackError;"
    },
    {
      "name": "tsLoaderSource",
      "args": [
        "loaderOptions"
      ],
      "returnType": "string;"
    },
    {
      "name": "appendSuffixIfMatch",
      "args": [
        "patterns"
      ]
    },
    {
      "name": "appendSuffixesIfMatch",
      "args": [
        "suffixDict\n    [suffix: string]: (RegExp | string"
      ]
    },
    {
      "name": "populateDependencyGraph",
      "args": [
        "resolvedModules",
        "instance",
        "containingFile"
      ],
      "returnType": "void;"
    },
    {
      "name": "populateReverseDependencyGraph",
      "args": [
        "instance"
      ],
      "returnType": "ReverseDependencyGraph;"
    },
    {
      "name": "collectAllDependants",
      "args": [
        "reverseDependencyGraph",
        "fileName",
        "result?",
        "true>"
      ],
      "returnType": "Map<FilePathKey, true>;"
    },
    {
      "name": "ensureProgram",
      "args": [
        "instance"
      ],
      "returnType": "typescript.Program | undefined;"
    },
    {
      "name": "supportsSolutionBuild",
      "args": [
        "instance"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isReferencedFile",
      "args": [
        "instance",
        "filePath"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "useCaseSensitiveFileNames",
      "args": [
        "compiler",
        "loaderOptions"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\ts-loader\\dist\\watch-run.d.ts": [
    {
      "name": "makeWatchRun",
      "args": [
        "instance",
        "loader"
      ],
      "returnType": "(compiler: webpack.Compiler, callback: (err?: Error) => void) => void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\async-return-type.d.ts": [
    {
      "name": "doSomething",
      "args": [
        "value"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\asyncify.d.ts": [
    {
      "name": "getFooSync",
      "args": [
        "someArg"
      ],
      "returnType": "Foo"
    },
    {
      "name": "AsyncifiedFooGetter",
      "args": [
        "someArg"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\opaque.d.ts": [
    {
      "name": "createAccountNumber",
      "args": [],
      "returnType": "AccountNumber"
    },
    {
      "name": "getMoneyForAccount",
      "args": [
        "accountNumber"
      ],
      "returnType": "AccountBalance"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\partial-deep.d.ts": [
    {
      "name": "applySavedSettings",
      "args": [
        "savedSettings"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\promisable.d.ts": [
    {
      "name": "logger",
      "args": [
        "getLogEntry"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\type-fest\\source\\value-of.d.ts": [
    {
      "name": "getData",
      "args": [
        "name"
      ],
      "returnType": "ValueOf<typeof data>"
    },
    {
      "name": "onlyBar",
      "args": [
        "name"
      ],
      "returnType": "ValueOf<typeof data, 'bar'>"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.decorators.d.ts": [
    {
      "name": "customElement",
      "args": [
        "name"
      ],
      "returnType": "ClassDecoratorFunction"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.dom.d.ts": [
    {
      "name": "Hz",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "Q",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cap",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "ch",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cm",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqb",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqmax",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqmin",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "cqw",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "deg",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dpcm",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dpi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dppx",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvb",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvmax",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvmin",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "dvw",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "em",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "escape",
      "args": [
        "ident"
      ],
      "returnType": "string;"
    },
    {
      "name": "ex",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "fr",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "grad",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "ic",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "kHz",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvb",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvmax",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvmin",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "lvw",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "mm",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "ms",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "number",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "pc",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "percent",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "pt",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "px",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "rad",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "rcap",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "rch",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "registerProperty",
      "args": [
        "definition"
      ],
      "returnType": "void;"
    },
    {
      "name": "rem",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "rex",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "ric",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "rlh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "s",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "supports",
      "args": [
        "property",
        "value"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "supports",
      "args": [
        "conditionText"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "svb",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "svh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "svi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "svmax",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "svmin",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "svw",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "turn",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vb",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vh",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vi",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vmax",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vmin",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "vw",
      "args": [
        "value"
      ],
      "returnType": "CSSUnitValue;"
    },
    {
      "name": "compile",
      "args": [
        "bytes"
      ],
      "returnType": "Promise<Module>;"
    },
    {
      "name": "compileStreaming",
      "args": [
        "source"
      ],
      "returnType": "Promise<Module>;"
    },
    {
      "name": "instantiate",
      "args": [
        "bytes",
        "importObject?"
      ],
      "returnType": "Promise<WebAssemblyInstantiatedSource>;"
    },
    {
      "name": "instantiate",
      "args": [
        "moduleObject",
        "importObject?"
      ],
      "returnType": "Promise<Instance>;"
    },
    {
      "name": "instantiateStreaming",
      "args": [
        "source",
        "importObject?"
      ],
      "returnType": "Promise<WebAssemblyInstantiatedSource>;"
    },
    {
      "name": "validate",
      "args": [
        "bytes"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "alert",
      "args": [
        "message?"
      ],
      "returnType": "void;"
    },
    {
      "name": "blur",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "cancelIdleCallback",
      "args": [
        "handle"
      ],
      "returnType": "void;"
    },
    {
      "name": "captureEvents",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "close",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "confirm",
      "args": [
        "message?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "focus",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "getComputedStyle",
      "args": [
        "elt",
        "pseudoElt?"
      ],
      "returnType": "CSSStyleDeclaration;"
    },
    {
      "name": "getSelection",
      "args": [],
      "returnType": "Selection | null;"
    },
    {
      "name": "matchMedia",
      "args": [
        "query"
      ],
      "returnType": "MediaQueryList;"
    },
    {
      "name": "moveBy",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "moveTo",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "open",
      "args": [
        "url?",
        "target?",
        "features?"
      ],
      "returnType": "WindowProxy | null;"
    },
    {
      "name": "postMessage",
      "args": [
        "message",
        "targetOrigin",
        "transfer?"
      ],
      "returnType": "void;"
    },
    {
      "name": "postMessage",
      "args": [
        "message",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "print",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "prompt",
      "args": [
        "message?",
        "_default?"
      ],
      "returnType": "string | null;"
    },
    {
      "name": "releaseEvents",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "requestIdleCallback",
      "args": [
        "callback",
        "options?"
      ],
      "returnType": "number;"
    },
    {
      "name": "resizeBy",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "resizeTo",
      "args": [
        "width",
        "height"
      ],
      "returnType": "void;"
    },
    {
      "name": "scroll",
      "args": [
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "scroll",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "scrollBy",
      "args": [
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "scrollBy",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "scrollTo",
      "args": [
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "scrollTo",
      "args": [
        "x",
        "y"
      ],
      "returnType": "void;"
    },
    {
      "name": "stop",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "toString",
      "args": [],
      "returnType": "string;"
    },
    {
      "name": "dispatchEvent",
      "args": [
        "event"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "cancelAnimationFrame",
      "args": [
        "handle"
      ],
      "returnType": "void;"
    },
    {
      "name": "requestAnimationFrame",
      "args": [
        "callback"
      ],
      "returnType": "number;"
    },
    {
      "name": "atob",
      "args": [
        "data"
      ],
      "returnType": "string;"
    },
    {
      "name": "btoa",
      "args": [
        "data"
      ],
      "returnType": "string;"
    },
    {
      "name": "clearInterval",
      "args": [
        "id"
      ],
      "returnType": "void;"
    },
    {
      "name": "clearTimeout",
      "args": [
        "id"
      ],
      "returnType": "void;"
    },
    {
      "name": "createImageBitmap",
      "args": [
        "image",
        "options?"
      ],
      "returnType": "Promise<ImageBitmap>;"
    },
    {
      "name": "createImageBitmap",
      "args": [
        "image",
        "sx",
        "sy",
        "sw",
        "sh",
        "options?"
      ],
      "returnType": "Promise<ImageBitmap>;"
    },
    {
      "name": "fetch",
      "args": [
        "input",
        "init?"
      ],
      "returnType": "Promise<Response>;"
    },
    {
      "name": "queueMicrotask",
      "args": [
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "reportError",
      "args": [
        "e"
      ],
      "returnType": "void;"
    },
    {
      "name": "setInterval",
      "args": [
        "handler",
        "timeout?",
        "...arguments"
      ],
      "returnType": "number;"
    },
    {
      "name": "setTimeout",
      "args": [
        "handler",
        "timeout?",
        "...arguments"
      ],
      "returnType": "number;"
    },
    {
      "name": "addEventListener",
      "args": [
        "type",
        "listener",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "removeEventListener",
      "args": [
        "type",
        "listener",
        "options?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.es2015.reflect.d.ts": [
    {
      "name": "apply",
      "args": [
        "target",
        "thisArgument",
        "argumentsList"
      ],
      "returnType": "any;"
    },
    {
      "name": "construct",
      "args": [
        "target",
        "argumentsList",
        "newTarget?"
      ],
      "returnType": "any;"
    },
    {
      "name": "defineProperty",
      "args": [
        "target",
        "propertyKey",
        "attributes"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "deleteProperty",
      "args": [
        "target",
        "propertyKey"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getPrototypeOf",
      "args": [
        "target"
      ],
      "returnType": "object | null;"
    },
    {
      "name": "has",
      "args": [
        "target",
        "propertyKey"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isExtensible",
      "args": [
        "target"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "ownKeys",
      "args": [
        "target"
      ],
      "returnType": "(string | symbol)[];"
    },
    {
      "name": "preventExtensions",
      "args": [
        "target"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "set",
      "args": [
        "target",
        "propertyKey",
        "value",
        "receiver?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "setPrototypeOf",
      "args": [
        "target",
        "proto"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.es2016.intl.d.ts": [
    {
      "name": "getCanonicalLocales",
      "args": [
        "locale?"
      ],
      "returnType": "string[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.es2022.intl.d.ts": [
    {
      "name": "supportedValuesOf",
      "args": [
        "key"
      ],
      "returnType": "string[];"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.es5.d.ts": [
    {
      "name": "eval",
      "args": [
        "x"
      ],
      "returnType": "any;"
    },
    {
      "name": "parseInt",
      "args": [
        "string",
        "radix?"
      ],
      "returnType": "number;"
    },
    {
      "name": "parseFloat",
      "args": [
        "string"
      ],
      "returnType": "number;"
    },
    {
      "name": "isNaN",
      "args": [
        "number"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isFinite",
      "args": [
        "number"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "decodeURI",
      "args": [
        "encodedURI"
      ],
      "returnType": "string;"
    },
    {
      "name": "decodeURIComponent",
      "args": [
        "encodedURIComponent"
      ],
      "returnType": "string;"
    },
    {
      "name": "encodeURI",
      "args": [
        "uri"
      ],
      "returnType": "string;"
    },
    {
      "name": "encodeURIComponent",
      "args": [
        "uriComponent"
      ],
      "returnType": "string;"
    },
    {
      "name": "escape",
      "args": [
        "string"
      ],
      "returnType": "string;"
    },
    {
      "name": "unescape",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.webworker.d.ts": [
    {
      "name": "compile",
      "args": [
        "bytes"
      ],
      "returnType": "Promise<Module>;"
    },
    {
      "name": "compileStreaming",
      "args": [
        "source"
      ],
      "returnType": "Promise<Module>;"
    },
    {
      "name": "instantiate",
      "args": [
        "bytes",
        "importObject?"
      ],
      "returnType": "Promise<WebAssemblyInstantiatedSource>;"
    },
    {
      "name": "instantiate",
      "args": [
        "moduleObject",
        "importObject?"
      ],
      "returnType": "Promise<Instance>;"
    },
    {
      "name": "instantiateStreaming",
      "args": [
        "source",
        "importObject?"
      ],
      "returnType": "Promise<WebAssemblyInstantiatedSource>;"
    },
    {
      "name": "validate",
      "args": [
        "bytes"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "close",
      "args": [],
      "returnType": "void;"
    },
    {
      "name": "postMessage",
      "args": [
        "message",
        "transfer"
      ],
      "returnType": "void;"
    },
    {
      "name": "postMessage",
      "args": [
        "message",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "dispatchEvent",
      "args": [
        "event"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "importScripts",
      "args": [
        "...urls"
      ]
    },
    {
      "name": "dispatchEvent",
      "args": [
        "event"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "atob",
      "args": [
        "data"
      ],
      "returnType": "string;"
    },
    {
      "name": "btoa",
      "args": [
        "data"
      ],
      "returnType": "string;"
    },
    {
      "name": "clearInterval",
      "args": [
        "id"
      ],
      "returnType": "void;"
    },
    {
      "name": "clearTimeout",
      "args": [
        "id"
      ],
      "returnType": "void;"
    },
    {
      "name": "createImageBitmap",
      "args": [
        "image",
        "options?"
      ],
      "returnType": "Promise<ImageBitmap>;"
    },
    {
      "name": "createImageBitmap",
      "args": [
        "image",
        "sx",
        "sy",
        "sw",
        "sh",
        "options?"
      ],
      "returnType": "Promise<ImageBitmap>;"
    },
    {
      "name": "fetch",
      "args": [
        "input",
        "init?"
      ],
      "returnType": "Promise<Response>;"
    },
    {
      "name": "queueMicrotask",
      "args": [
        "callback"
      ],
      "returnType": "void;"
    },
    {
      "name": "reportError",
      "args": [
        "e"
      ],
      "returnType": "void;"
    },
    {
      "name": "setInterval",
      "args": [
        "handler",
        "timeout?",
        "...arguments"
      ],
      "returnType": "number;"
    },
    {
      "name": "setTimeout",
      "args": [
        "handler",
        "timeout?",
        "...arguments"
      ],
      "returnType": "number;"
    },
    {
      "name": "cancelAnimationFrame",
      "args": [
        "handle"
      ],
      "returnType": "void;"
    },
    {
      "name": "requestAnimationFrame",
      "args": [
        "callback"
      ],
      "returnType": "number;"
    },
    {
      "name": "addEventListener",
      "args": [
        "type",
        "listener",
        "options?"
      ],
      "returnType": "void;"
    },
    {
      "name": "removeEventListener",
      "args": [
        "type",
        "listener",
        "options?"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\lib.webworker.importscripts.d.ts": [
    {
      "name": "importScripts",
      "args": [
        "...urls"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\typescript\\lib\\typescript.d.ts": [
    {
      "name": "createInstallTypingsRequest",
      "args": [
        "project",
        "typeAcquisition",
        "unresolvedImports",
        "cachePath?"
      ],
      "returnType": "DiscoverTypings;"
    },
    {
      "name": "toNormalizedPath",
      "args": [
        "fileName"
      ],
      "returnType": "NormalizedPath;"
    },
    {
      "name": "normalizedPathToPath",
      "args": [
        "normalizedPath",
        "currentDirectory",
        "getCanonicalFileName"
      ]
    },
    {
      "name": "asNormalizedPath",
      "args": [
        "fileName"
      ],
      "returnType": "NormalizedPath;"
    },
    {
      "name": "isInferredProjectName",
      "args": [
        "name"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "makeInferredProjectName",
      "args": [
        "counter"
      ],
      "returnType": "string;"
    },
    {
      "name": "ThrowNoProject",
      "args": [],
      "returnType": "never;"
    },
    {
      "name": "ThrowProjectLanguageServiceDisabled",
      "args": [],
      "returnType": "never;"
    },
    {
      "name": "ThrowProjectDoesNotContainDocument",
      "args": [
        "fileName",
        "project"
      ],
      "returnType": "never;"
    },
    {
      "name": "isDynamicFileName",
      "args": [
        "fileName"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "allRootFilesAreJsOrDts",
      "args": [
        "project"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "allFilesAreJsOrDts",
      "args": [
        "project"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "convertFormatOptions",
      "args": [
        "protocolOptions"
      ],
      "returnType": "FormatCodeSettings;"
    },
    {
      "name": "convertCompilerOptions",
      "args": [
        "protocolOptions"
      ],
      "returnType": "CompilerOptions & protocol.CompileOnSaveMixin;"
    },
    {
      "name": "convertWatchOptions",
      "args": [
        "protocolOptions",
        "currentDirectory?"
      ],
      "returnType": "WatchOptionsAndErrors | undefined;"
    },
    {
      "name": "convertTypeAcquisition",
      "args": [
        "protocolOptions"
      ],
      "returnType": "TypeAcquisition | undefined;"
    },
    {
      "name": "tryConvertScriptKindName",
      "args": [
        "scriptKindName"
      ],
      "returnType": "ScriptKind;"
    },
    {
      "name": "convertScriptKindName",
      "args": [
        "scriptKindName"
      ],
      "returnType": "ScriptKind.Unknown | ScriptKind.JS | ScriptKind.JSX | ScriptKind.TS | ScriptKind.TSX;"
    },
    {
      "name": "tokenToString",
      "args": [
        "t"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "getPositionOfLineAndCharacter",
      "args": [
        "sourceFile",
        "line",
        "character"
      ],
      "returnType": "number;"
    },
    {
      "name": "getLineAndCharacterOfPosition",
      "args": [
        "sourceFile",
        "position"
      ],
      "returnType": "LineAndCharacter;"
    },
    {
      "name": "isWhiteSpaceLike",
      "args": [
        "ch"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isWhiteSpaceSingleLine",
      "args": [
        "ch"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isLineBreak",
      "args": [
        "ch"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "couldStartTrivia",
      "args": [
        "text",
        "pos"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getLeadingCommentRanges",
      "args": [
        "text",
        "pos"
      ],
      "returnType": "CommentRange[] | undefined;"
    },
    {
      "name": "getTrailingCommentRanges",
      "args": [
        "text",
        "pos"
      ],
      "returnType": "CommentRange[] | undefined;"
    },
    {
      "name": "getShebang",
      "args": [
        "text"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "isIdentifierStart",
      "args": [
        "ch",
        "languageVersion"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isIdentifierPart",
      "args": [
        "ch",
        "languageVersion",
        "identifierVariant?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "createScanner",
      "args": [
        "languageVersion",
        "skipTrivia",
        "languageVariant?",
        "textInitial?",
        "onError?",
        "start?",
        "length?"
      ],
      "returnType": "Scanner;"
    },
    {
      "name": "isExternalModuleNameRelative",
      "args": [
        "moduleName"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getDefaultLibFileName",
      "args": [
        "options"
      ],
      "returnType": "string;"
    },
    {
      "name": "textSpanEnd",
      "args": [
        "span"
      ],
      "returnType": "number;"
    },
    {
      "name": "textSpanIsEmpty",
      "args": [
        "span"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanContainsPosition",
      "args": [
        "span",
        "position"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanContainsTextSpan",
      "args": [
        "span",
        "other"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanOverlapsWith",
      "args": [
        "span",
        "other"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanOverlap",
      "args": [
        "span1",
        "span2"
      ],
      "returnType": "TextSpan | undefined;"
    },
    {
      "name": "textSpanIntersectsWithTextSpan",
      "args": [
        "span",
        "other"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanIntersectsWith",
      "args": [
        "span",
        "start",
        "length"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "decodedTextSpanIntersectsWith",
      "args": [
        "start1",
        "length1",
        "start2",
        "length2"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanIntersectsWithPosition",
      "args": [
        "span",
        "position"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "textSpanIntersection",
      "args": [
        "span1",
        "span2"
      ],
      "returnType": "TextSpan | undefined;"
    },
    {
      "name": "createTextSpan",
      "args": [
        "start",
        "length"
      ],
      "returnType": "TextSpan;"
    },
    {
      "name": "createTextSpanFromBounds",
      "args": [
        "start",
        "end"
      ],
      "returnType": "TextSpan;"
    },
    {
      "name": "textChangeRangeNewSpan",
      "args": [
        "range"
      ],
      "returnType": "TextSpan;"
    },
    {
      "name": "textChangeRangeIsUnchanged",
      "args": [
        "range"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "createTextChangeRange",
      "args": [
        "span",
        "newLength"
      ],
      "returnType": "TextChangeRange;"
    },
    {
      "name": "collapseTextChangeRangesAcrossMultipleVersions",
      "args": [
        "changes"
      ],
      "returnType": "TextChangeRange;"
    },
    {
      "name": "getTypeParameterOwner",
      "args": [
        "d"
      ],
      "returnType": "Declaration | undefined;"
    },
    {
      "name": "isParameterPropertyDeclaration",
      "args": [
        "node",
        "parent"
      ],
      "returnType": "node is ParameterPropertyDeclaration;"
    },
    {
      "name": "isEmptyBindingPattern",
      "args": [
        "node"
      ],
      "returnType": "node is BindingPattern;"
    },
    {
      "name": "isEmptyBindingElement",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "walkUpBindingElementsAndPatterns",
      "args": [
        "binding"
      ],
      "returnType": "VariableDeclaration | ParameterDeclaration;"
    },
    {
      "name": "getCombinedModifierFlags",
      "args": [
        "node"
      ],
      "returnType": "ModifierFlags;"
    },
    {
      "name": "getCombinedNodeFlags",
      "args": [
        "node"
      ],
      "returnType": "NodeFlags;"
    },
    {
      "name": "validateLocaleAndSetLanguage",
      "args": [
        "locale",
        "sys\n        getExecutingFilePath("
      ],
      "returnType": "string;"
    },
    {
      "name": "getOriginalNode",
      "args": [
        "node"
      ],
      "returnType": "Node;"
    },
    {
      "name": "getOriginalNode",
      "args": [
        "node"
      ],
      "returnType": "Node | undefined;"
    },
    {
      "name": "findAncestor",
      "args": [
        "node",
        "callback"
      ]
    },
    {
      "name": "isParseTreeNode",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getParseTreeNode",
      "args": [
        "node"
      ],
      "returnType": "Node | undefined;"
    },
    {
      "name": "escapeLeadingUnderscores",
      "args": [
        "identifier"
      ],
      "returnType": "__String;"
    },
    {
      "name": "unescapeLeadingUnderscores",
      "args": [
        "identifier"
      ],
      "returnType": "string;"
    },
    {
      "name": "idText",
      "args": [
        "identifierOrPrivateName"
      ],
      "returnType": "string;"
    },
    {
      "name": "identifierToKeywordKind",
      "args": [
        "node"
      ],
      "returnType": "KeywordSyntaxKind | undefined;"
    },
    {
      "name": "symbolName",
      "args": [
        "symbol"
      ],
      "returnType": "string;"
    },
    {
      "name": "getNameOfJSDocTypedef",
      "args": [
        "declaration"
      ],
      "returnType": "Identifier | PrivateIdentifier | undefined;"
    },
    {
      "name": "getNameOfDeclaration",
      "args": [
        "declaration"
      ],
      "returnType": "DeclarationName | undefined;"
    },
    {
      "name": "getDecorators",
      "args": [
        "node"
      ],
      "returnType": "readonly Decorator[] | undefined;"
    },
    {
      "name": "getModifiers",
      "args": [
        "node"
      ],
      "returnType": "readonly Modifier[] | undefined;"
    },
    {
      "name": "getJSDocParameterTags",
      "args": [
        "param"
      ],
      "returnType": "readonly JSDocParameterTag[];"
    },
    {
      "name": "getJSDocTypeParameterTags",
      "args": [
        "param"
      ],
      "returnType": "readonly JSDocTemplateTag[];"
    },
    {
      "name": "hasJSDocParameterTags",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getJSDocAugmentsTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocAugmentsTag | undefined;"
    },
    {
      "name": "getJSDocImplementsTags",
      "args": [
        "node"
      ],
      "returnType": "readonly JSDocImplementsTag[];"
    },
    {
      "name": "getJSDocClassTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocClassTag | undefined;"
    },
    {
      "name": "getJSDocPublicTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocPublicTag | undefined;"
    },
    {
      "name": "getJSDocPrivateTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocPrivateTag | undefined;"
    },
    {
      "name": "getJSDocProtectedTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocProtectedTag | undefined;"
    },
    {
      "name": "getJSDocReadonlyTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocReadonlyTag | undefined;"
    },
    {
      "name": "getJSDocOverrideTagNoCache",
      "args": [
        "node"
      ],
      "returnType": "JSDocOverrideTag | undefined;"
    },
    {
      "name": "getJSDocDeprecatedTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocDeprecatedTag | undefined;"
    },
    {
      "name": "getJSDocEnumTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocEnumTag | undefined;"
    },
    {
      "name": "getJSDocThisTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocThisTag | undefined;"
    },
    {
      "name": "getJSDocReturnTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocReturnTag | undefined;"
    },
    {
      "name": "getJSDocTemplateTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocTemplateTag | undefined;"
    },
    {
      "name": "getJSDocSatisfiesTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocSatisfiesTag | undefined;"
    },
    {
      "name": "getJSDocTypeTag",
      "args": [
        "node"
      ],
      "returnType": "JSDocTypeTag | undefined;"
    },
    {
      "name": "getJSDocType",
      "args": [
        "node"
      ],
      "returnType": "TypeNode | undefined;"
    },
    {
      "name": "getJSDocReturnType",
      "args": [
        "node"
      ],
      "returnType": "TypeNode | undefined;"
    },
    {
      "name": "getJSDocTags",
      "args": [
        "node"
      ],
      "returnType": "readonly JSDocTag[];"
    },
    {
      "name": "getAllJSDocTagsOfKind",
      "args": [
        "node",
        "kind"
      ],
      "returnType": "readonly JSDocTag[];"
    },
    {
      "name": "getTextOfJSDocComment",
      "args": [
        "comment?"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "id",
      "args": [
        "x"
      ]
    },
    {
      "name": "getEffectiveTypeParameterDeclarations",
      "args": [
        "node"
      ],
      "returnType": "readonly TypeParameterDeclaration[];"
    },
    {
      "name": "getEffectiveConstraintOfTypeParameter",
      "args": [
        "node"
      ],
      "returnType": "TypeNode | undefined;"
    },
    {
      "name": "isMemberName",
      "args": [
        "node"
      ],
      "returnType": "node is MemberName;"
    },
    {
      "name": "isPropertyAccessChain",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyAccessChain;"
    },
    {
      "name": "isElementAccessChain",
      "args": [
        "node"
      ],
      "returnType": "node is ElementAccessChain;"
    },
    {
      "name": "isCallChain",
      "args": [
        "node"
      ],
      "returnType": "node is CallChain;"
    },
    {
      "name": "isOptionalChain",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyAccessChain | ElementAccessChain | CallChain | NonNullChain;"
    },
    {
      "name": "isNullishCoalesce",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isConstTypeReference",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "skipPartiallyEmittedExpressions",
      "args": [
        "node"
      ],
      "returnType": "Expression;"
    },
    {
      "name": "skipPartiallyEmittedExpressions",
      "args": [
        "node"
      ],
      "returnType": "Node;"
    },
    {
      "name": "isNonNullChain",
      "args": [
        "node"
      ],
      "returnType": "node is NonNullChain;"
    },
    {
      "name": "isBreakOrContinueStatement",
      "args": [
        "node"
      ],
      "returnType": "node is BreakOrContinueStatement;"
    },
    {
      "name": "isNamedExportBindings",
      "args": [
        "node"
      ],
      "returnType": "node is NamedExportBindings;"
    },
    {
      "name": "isUnparsedTextLike",
      "args": [
        "node"
      ],
      "returnType": "node is UnparsedTextLike;"
    },
    {
      "name": "isUnparsedNode",
      "args": [
        "node"
      ],
      "returnType": "node is UnparsedNode;"
    },
    {
      "name": "isJSDocPropertyLikeTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocPropertyLikeTag;"
    },
    {
      "name": "isTokenKind",
      "args": [
        "kind"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isToken",
      "args": [
        "n"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isLiteralExpression",
      "args": [
        "node"
      ],
      "returnType": "node is LiteralExpression;"
    },
    {
      "name": "isTemplateLiteralToken",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateLiteralToken;"
    },
    {
      "name": "isTemplateMiddleOrTemplateTail",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateMiddle | TemplateTail;"
    },
    {
      "name": "isImportOrExportSpecifier",
      "args": [
        "node"
      ],
      "returnType": "node is ImportSpecifier | ExportSpecifier;"
    },
    {
      "name": "isTypeOnlyImportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is TypeOnlyImportDeclaration;"
    },
    {
      "name": "isTypeOnlyExportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is TypeOnlyExportDeclaration;"
    },
    {
      "name": "isTypeOnlyImportOrExportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is TypeOnlyAliasDeclaration;"
    },
    {
      "name": "isStringTextContainingNode",
      "args": [
        "node"
      ],
      "returnType": "node is StringLiteral | TemplateLiteralToken;"
    },
    {
      "name": "isImportAttributeName",
      "args": [
        "node"
      ],
      "returnType": "node is ImportAttributeName;"
    },
    {
      "name": "isModifier",
      "args": [
        "node"
      ],
      "returnType": "node is Modifier;"
    },
    {
      "name": "isEntityName",
      "args": [
        "node"
      ],
      "returnType": "node is EntityName;"
    },
    {
      "name": "isPropertyName",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyName;"
    },
    {
      "name": "isBindingName",
      "args": [
        "node"
      ],
      "returnType": "node is BindingName;"
    },
    {
      "name": "isFunctionLike",
      "args": [
        "node"
      ],
      "returnType": "node is SignatureDeclaration;"
    },
    {
      "name": "isClassElement",
      "args": [
        "node"
      ],
      "returnType": "node is ClassElement;"
    },
    {
      "name": "isClassLike",
      "args": [
        "node"
      ],
      "returnType": "node is ClassLikeDeclaration;"
    },
    {
      "name": "isAccessor",
      "args": [
        "node"
      ],
      "returnType": "node is AccessorDeclaration;"
    },
    {
      "name": "isAutoAccessorPropertyDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is AutoAccessorPropertyDeclaration;"
    },
    {
      "name": "isModifierLike",
      "args": [
        "node"
      ],
      "returnType": "node is ModifierLike;"
    },
    {
      "name": "isTypeElement",
      "args": [
        "node"
      ],
      "returnType": "node is TypeElement;"
    },
    {
      "name": "isClassOrTypeElement",
      "args": [
        "node"
      ],
      "returnType": "node is ClassElement | TypeElement;"
    },
    {
      "name": "isObjectLiteralElementLike",
      "args": [
        "node"
      ],
      "returnType": "node is ObjectLiteralElementLike;"
    },
    {
      "name": "isTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypeNode;"
    },
    {
      "name": "isFunctionOrConstructorTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is FunctionTypeNode | ConstructorTypeNode;"
    },
    {
      "name": "isArrayBindingElement",
      "args": [
        "node"
      ],
      "returnType": "node is ArrayBindingElement;"
    },
    {
      "name": "isPropertyAccessOrQualifiedName",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyAccessExpression | QualifiedName;"
    },
    {
      "name": "isCallLikeExpression",
      "args": [
        "node"
      ],
      "returnType": "node is CallLikeExpression;"
    },
    {
      "name": "isCallOrNewExpression",
      "args": [
        "node"
      ],
      "returnType": "node is CallExpression | NewExpression;"
    },
    {
      "name": "isTemplateLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateLiteral;"
    },
    {
      "name": "isLeftHandSideExpression",
      "args": [
        "node"
      ],
      "returnType": "node is LeftHandSideExpression;"
    },
    {
      "name": "isLiteralTypeLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is NullLiteral | BooleanLiteral | LiteralExpression | PrefixUnaryExpression;"
    },
    {
      "name": "isExpression",
      "args": [
        "node"
      ],
      "returnType": "node is Expression;"
    },
    {
      "name": "isAssertionExpression",
      "args": [
        "node"
      ],
      "returnType": "node is AssertionExpression;"
    },
    {
      "name": "isIterationStatement",
      "args": [
        "node",
        "lookInLabeledStatements"
      ],
      "returnType": "node is IterationStatement;"
    },
    {
      "name": "isIterationStatement",
      "args": [
        "node",
        "lookInLabeledStatements"
      ],
      "returnType": "node is IterationStatement | LabeledStatement;"
    },
    {
      "name": "isConciseBody",
      "args": [
        "node"
      ],
      "returnType": "node is ConciseBody;"
    },
    {
      "name": "isForInitializer",
      "args": [
        "node"
      ],
      "returnType": "node is ForInitializer;"
    },
    {
      "name": "isModuleBody",
      "args": [
        "node"
      ],
      "returnType": "node is ModuleBody;"
    },
    {
      "name": "isNamedImportBindings",
      "args": [
        "node"
      ],
      "returnType": "node is NamedImportBindings;"
    },
    {
      "name": "isDeclarationStatement",
      "args": [
        "node"
      ],
      "returnType": "node is DeclarationStatement;"
    },
    {
      "name": "isStatement",
      "args": [
        "node"
      ],
      "returnType": "node is Statement;"
    },
    {
      "name": "isModuleReference",
      "args": [
        "node"
      ],
      "returnType": "node is ModuleReference;"
    },
    {
      "name": "isJsxTagNameExpression",
      "args": [
        "node"
      ],
      "returnType": "node is JsxTagNameExpression;"
    },
    {
      "name": "isJsxChild",
      "args": [
        "node"
      ],
      "returnType": "node is JsxChild;"
    },
    {
      "name": "isJsxAttributeLike",
      "args": [
        "node"
      ],
      "returnType": "node is JsxAttributeLike;"
    },
    {
      "name": "isStringLiteralOrJsxExpression",
      "args": [
        "node"
      ],
      "returnType": "node is StringLiteral | JsxExpression;"
    },
    {
      "name": "isJsxOpeningLikeElement",
      "args": [
        "node"
      ],
      "returnType": "node is JsxOpeningLikeElement;"
    },
    {
      "name": "isCaseOrDefaultClause",
      "args": [
        "node"
      ],
      "returnType": "node is CaseOrDefaultClause;"
    },
    {
      "name": "isJSDocCommentContainingNode",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isSetAccessor",
      "args": [
        "node"
      ],
      "returnType": "node is SetAccessorDeclaration;"
    },
    {
      "name": "isGetAccessor",
      "args": [
        "node"
      ],
      "returnType": "node is GetAccessorDeclaration;"
    },
    {
      "name": "hasOnlyExpressionInitializer",
      "args": [
        "node"
      ],
      "returnType": "node is HasExpressionInitializer;"
    },
    {
      "name": "isObjectLiteralElement",
      "args": [
        "node"
      ],
      "returnType": "node is ObjectLiteralElement;"
    },
    {
      "name": "isStringLiteralLike",
      "args": [
        "node"
      ],
      "returnType": "node is StringLiteralLike;"
    },
    {
      "name": "isJSDocLinkLike",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocLink | JSDocLinkCode | JSDocLinkPlain;"
    },
    {
      "name": "hasRestParameter",
      "args": [
        "s"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isRestParameter",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isInternalDeclaration",
      "args": [
        "node",
        "sourceFile?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isPartOfTypeNode",
      "args": [
        "node"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "b",
      "args": [
        "/** JSDoc will be returned for `c` *\\/ c"
      ]
    },
    {
      "name": "getJSDocCommentsAndTags",
      "args": [
        "hostNode"
      ],
      "returnType": "readonly (JSDoc | JSDocTag)[];"
    },
    {
      "name": "createUnparsedSourceFile",
      "args": [
        "text"
      ],
      "returnType": "UnparsedSource;"
    },
    {
      "name": "createUnparsedSourceFile",
      "args": [
        "inputFile",
        "type",
        "stripInternal?"
      ],
      "returnType": "UnparsedSource;"
    },
    {
      "name": "createUnparsedSourceFile",
      "args": [
        "text",
        "mapPath",
        "map"
      ],
      "returnType": "UnparsedSource;"
    },
    {
      "name": "createInputFiles",
      "args": [
        "javascriptText",
        "declarationText"
      ],
      "returnType": "InputFiles;"
    },
    {
      "name": "createInputFiles",
      "args": [
        "javascriptText",
        "declarationText",
        "javascriptMapPath",
        "javascriptMapText",
        "declarationMapPath",
        "declarationMapText"
      ],
      "returnType": "InputFiles;"
    },
    {
      "name": "createInputFiles",
      "args": [
        "readFileText"
      ]
    },
    {
      "name": "createSourceMapSource",
      "args": [
        "fileName",
        "text",
        "skipTrivia?"
      ]
    },
    {
      "name": "disposeEmitNodes",
      "args": [
        "sourceFile"
      ],
      "returnType": "void;"
    },
    {
      "name": "getSourceMapRange",
      "args": [
        "node"
      ],
      "returnType": "SourceMapRange;"
    },
    {
      "name": "getTokenSourceMapRange",
      "args": [
        "node",
        "token"
      ],
      "returnType": "SourceMapRange | undefined;"
    },
    {
      "name": "getCommentRange",
      "args": [
        "node"
      ],
      "returnType": "TextRange;"
    },
    {
      "name": "getSyntheticLeadingComments",
      "args": [
        "node"
      ],
      "returnType": "SynthesizedComment[] | undefined;"
    },
    {
      "name": "getSyntheticTrailingComments",
      "args": [
        "node"
      ],
      "returnType": "SynthesizedComment[] | undefined;"
    },
    {
      "name": "getConstantValue",
      "args": [
        "node"
      ],
      "returnType": "string | number | undefined;"
    },
    {
      "name": "setConstantValue",
      "args": [
        "node",
        "value"
      ],
      "returnType": "AccessExpression;"
    },
    {
      "name": "removeEmitHelper",
      "args": [
        "node",
        "helper"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "getEmitHelpers",
      "args": [
        "node"
      ],
      "returnType": "EmitHelper[] | undefined;"
    },
    {
      "name": "moveEmitHelpers",
      "args": [
        "source",
        "target",
        "predicate"
      ]
    },
    {
      "name": "isNumericLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is NumericLiteral;"
    },
    {
      "name": "isBigIntLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is BigIntLiteral;"
    },
    {
      "name": "isStringLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is StringLiteral;"
    },
    {
      "name": "isJsxText",
      "args": [
        "node"
      ],
      "returnType": "node is JsxText;"
    },
    {
      "name": "isRegularExpressionLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is RegularExpressionLiteral;"
    },
    {
      "name": "isNoSubstitutionTemplateLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is NoSubstitutionTemplateLiteral;"
    },
    {
      "name": "isTemplateHead",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateHead;"
    },
    {
      "name": "isTemplateMiddle",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateMiddle;"
    },
    {
      "name": "isTemplateTail",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateTail;"
    },
    {
      "name": "isDotDotDotToken",
      "args": [
        "node"
      ],
      "returnType": "node is DotDotDotToken;"
    },
    {
      "name": "isPlusToken",
      "args": [
        "node"
      ],
      "returnType": "node is PlusToken;"
    },
    {
      "name": "isMinusToken",
      "args": [
        "node"
      ],
      "returnType": "node is MinusToken;"
    },
    {
      "name": "isAsteriskToken",
      "args": [
        "node"
      ],
      "returnType": "node is AsteriskToken;"
    },
    {
      "name": "isExclamationToken",
      "args": [
        "node"
      ],
      "returnType": "node is ExclamationToken;"
    },
    {
      "name": "isQuestionToken",
      "args": [
        "node"
      ],
      "returnType": "node is QuestionToken;"
    },
    {
      "name": "isColonToken",
      "args": [
        "node"
      ],
      "returnType": "node is ColonToken;"
    },
    {
      "name": "isQuestionDotToken",
      "args": [
        "node"
      ],
      "returnType": "node is QuestionDotToken;"
    },
    {
      "name": "isEqualsGreaterThanToken",
      "args": [
        "node"
      ],
      "returnType": "node is EqualsGreaterThanToken;"
    },
    {
      "name": "isIdentifier",
      "args": [
        "node"
      ],
      "returnType": "node is Identifier;"
    },
    {
      "name": "isPrivateIdentifier",
      "args": [
        "node"
      ],
      "returnType": "node is PrivateIdentifier;"
    },
    {
      "name": "isAssertsKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is AssertsKeyword;"
    },
    {
      "name": "isAwaitKeyword",
      "args": [
        "node"
      ],
      "returnType": "node is AwaitKeyword;"
    },
    {
      "name": "isQualifiedName",
      "args": [
        "node"
      ],
      "returnType": "node is QualifiedName;"
    },
    {
      "name": "isComputedPropertyName",
      "args": [
        "node"
      ],
      "returnType": "node is ComputedPropertyName;"
    },
    {
      "name": "isTypeParameterDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is TypeParameterDeclaration;"
    },
    {
      "name": "isParameter",
      "args": [
        "node"
      ],
      "returnType": "node is ParameterDeclaration;"
    },
    {
      "name": "isDecorator",
      "args": [
        "node"
      ],
      "returnType": "node is Decorator;"
    },
    {
      "name": "isPropertySignature",
      "args": [
        "node"
      ],
      "returnType": "node is PropertySignature;"
    },
    {
      "name": "isPropertyDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyDeclaration;"
    },
    {
      "name": "isMethodSignature",
      "args": [
        "node"
      ],
      "returnType": "node is MethodSignature;"
    },
    {
      "name": "isMethodDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is MethodDeclaration;"
    },
    {
      "name": "isClassStaticBlockDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ClassStaticBlockDeclaration;"
    },
    {
      "name": "isConstructorDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ConstructorDeclaration;"
    },
    {
      "name": "isGetAccessorDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is GetAccessorDeclaration;"
    },
    {
      "name": "isSetAccessorDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is SetAccessorDeclaration;"
    },
    {
      "name": "isCallSignatureDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is CallSignatureDeclaration;"
    },
    {
      "name": "isConstructSignatureDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ConstructSignatureDeclaration;"
    },
    {
      "name": "isIndexSignatureDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is IndexSignatureDeclaration;"
    },
    {
      "name": "isTypePredicateNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypePredicateNode;"
    },
    {
      "name": "isTypeReferenceNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypeReferenceNode;"
    },
    {
      "name": "isFunctionTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is FunctionTypeNode;"
    },
    {
      "name": "isConstructorTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ConstructorTypeNode;"
    },
    {
      "name": "isTypeQueryNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypeQueryNode;"
    },
    {
      "name": "isTypeLiteralNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypeLiteralNode;"
    },
    {
      "name": "isArrayTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ArrayTypeNode;"
    },
    {
      "name": "isTupleTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is TupleTypeNode;"
    },
    {
      "name": "isNamedTupleMember",
      "args": [
        "node"
      ],
      "returnType": "node is NamedTupleMember;"
    },
    {
      "name": "isOptionalTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is OptionalTypeNode;"
    },
    {
      "name": "isRestTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is RestTypeNode;"
    },
    {
      "name": "isUnionTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is UnionTypeNode;"
    },
    {
      "name": "isIntersectionTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is IntersectionTypeNode;"
    },
    {
      "name": "isConditionalTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ConditionalTypeNode;"
    },
    {
      "name": "isInferTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is InferTypeNode;"
    },
    {
      "name": "isParenthesizedTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ParenthesizedTypeNode;"
    },
    {
      "name": "isThisTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ThisTypeNode;"
    },
    {
      "name": "isTypeOperatorNode",
      "args": [
        "node"
      ],
      "returnType": "node is TypeOperatorNode;"
    },
    {
      "name": "isIndexedAccessTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is IndexedAccessTypeNode;"
    },
    {
      "name": "isMappedTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is MappedTypeNode;"
    },
    {
      "name": "isLiteralTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is LiteralTypeNode;"
    },
    {
      "name": "isImportTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is ImportTypeNode;"
    },
    {
      "name": "isTemplateLiteralTypeSpan",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateLiteralTypeSpan;"
    },
    {
      "name": "isTemplateLiteralTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateLiteralTypeNode;"
    },
    {
      "name": "isObjectBindingPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ObjectBindingPattern;"
    },
    {
      "name": "isArrayBindingPattern",
      "args": [
        "node"
      ],
      "returnType": "node is ArrayBindingPattern;"
    },
    {
      "name": "isBindingElement",
      "args": [
        "node"
      ],
      "returnType": "node is BindingElement;"
    },
    {
      "name": "isArrayLiteralExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ArrayLiteralExpression;"
    },
    {
      "name": "isObjectLiteralExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ObjectLiteralExpression;"
    },
    {
      "name": "isPropertyAccessExpression",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyAccessExpression;"
    },
    {
      "name": "isElementAccessExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ElementAccessExpression;"
    },
    {
      "name": "isCallExpression",
      "args": [
        "node"
      ],
      "returnType": "node is CallExpression;"
    },
    {
      "name": "isNewExpression",
      "args": [
        "node"
      ],
      "returnType": "node is NewExpression;"
    },
    {
      "name": "isTaggedTemplateExpression",
      "args": [
        "node"
      ],
      "returnType": "node is TaggedTemplateExpression;"
    },
    {
      "name": "isTypeAssertionExpression",
      "args": [
        "node"
      ],
      "returnType": "node is TypeAssertion;"
    },
    {
      "name": "isParenthesizedExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ParenthesizedExpression;"
    },
    {
      "name": "isFunctionExpression",
      "args": [
        "node"
      ],
      "returnType": "node is FunctionExpression;"
    },
    {
      "name": "isArrowFunction",
      "args": [
        "node"
      ],
      "returnType": "node is ArrowFunction;"
    },
    {
      "name": "isDeleteExpression",
      "args": [
        "node"
      ],
      "returnType": "node is DeleteExpression;"
    },
    {
      "name": "isTypeOfExpression",
      "args": [
        "node"
      ],
      "returnType": "node is TypeOfExpression;"
    },
    {
      "name": "isVoidExpression",
      "args": [
        "node"
      ],
      "returnType": "node is VoidExpression;"
    },
    {
      "name": "isAwaitExpression",
      "args": [
        "node"
      ],
      "returnType": "node is AwaitExpression;"
    },
    {
      "name": "isPrefixUnaryExpression",
      "args": [
        "node"
      ],
      "returnType": "node is PrefixUnaryExpression;"
    },
    {
      "name": "isPostfixUnaryExpression",
      "args": [
        "node"
      ],
      "returnType": "node is PostfixUnaryExpression;"
    },
    {
      "name": "isBinaryExpression",
      "args": [
        "node"
      ],
      "returnType": "node is BinaryExpression;"
    },
    {
      "name": "isConditionalExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ConditionalExpression;"
    },
    {
      "name": "isTemplateExpression",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateExpression;"
    },
    {
      "name": "isYieldExpression",
      "args": [
        "node"
      ],
      "returnType": "node is YieldExpression;"
    },
    {
      "name": "isSpreadElement",
      "args": [
        "node"
      ],
      "returnType": "node is SpreadElement;"
    },
    {
      "name": "isClassExpression",
      "args": [
        "node"
      ],
      "returnType": "node is ClassExpression;"
    },
    {
      "name": "isOmittedExpression",
      "args": [
        "node"
      ],
      "returnType": "node is OmittedExpression;"
    },
    {
      "name": "isExpressionWithTypeArguments",
      "args": [
        "node"
      ],
      "returnType": "node is ExpressionWithTypeArguments;"
    },
    {
      "name": "isAsExpression",
      "args": [
        "node"
      ],
      "returnType": "node is AsExpression;"
    },
    {
      "name": "isSatisfiesExpression",
      "args": [
        "node"
      ],
      "returnType": "node is SatisfiesExpression;"
    },
    {
      "name": "isNonNullExpression",
      "args": [
        "node"
      ],
      "returnType": "node is NonNullExpression;"
    },
    {
      "name": "isMetaProperty",
      "args": [
        "node"
      ],
      "returnType": "node is MetaProperty;"
    },
    {
      "name": "isSyntheticExpression",
      "args": [
        "node"
      ],
      "returnType": "node is SyntheticExpression;"
    },
    {
      "name": "isPartiallyEmittedExpression",
      "args": [
        "node"
      ],
      "returnType": "node is PartiallyEmittedExpression;"
    },
    {
      "name": "isCommaListExpression",
      "args": [
        "node"
      ],
      "returnType": "node is CommaListExpression;"
    },
    {
      "name": "isTemplateSpan",
      "args": [
        "node"
      ],
      "returnType": "node is TemplateSpan;"
    },
    {
      "name": "isSemicolonClassElement",
      "args": [
        "node"
      ],
      "returnType": "node is SemicolonClassElement;"
    },
    {
      "name": "isBlock",
      "args": [
        "node"
      ],
      "returnType": "node is Block;"
    },
    {
      "name": "isVariableStatement",
      "args": [
        "node"
      ],
      "returnType": "node is VariableStatement;"
    },
    {
      "name": "isEmptyStatement",
      "args": [
        "node"
      ],
      "returnType": "node is EmptyStatement;"
    },
    {
      "name": "isExpressionStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ExpressionStatement;"
    },
    {
      "name": "isIfStatement",
      "args": [
        "node"
      ],
      "returnType": "node is IfStatement;"
    },
    {
      "name": "isDoStatement",
      "args": [
        "node"
      ],
      "returnType": "node is DoStatement;"
    },
    {
      "name": "isWhileStatement",
      "args": [
        "node"
      ],
      "returnType": "node is WhileStatement;"
    },
    {
      "name": "isForStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ForStatement;"
    },
    {
      "name": "isForInStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ForInStatement;"
    },
    {
      "name": "isForOfStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ForOfStatement;"
    },
    {
      "name": "isContinueStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ContinueStatement;"
    },
    {
      "name": "isBreakStatement",
      "args": [
        "node"
      ],
      "returnType": "node is BreakStatement;"
    },
    {
      "name": "isReturnStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ReturnStatement;"
    },
    {
      "name": "isWithStatement",
      "args": [
        "node"
      ],
      "returnType": "node is WithStatement;"
    },
    {
      "name": "isSwitchStatement",
      "args": [
        "node"
      ],
      "returnType": "node is SwitchStatement;"
    },
    {
      "name": "isLabeledStatement",
      "args": [
        "node"
      ],
      "returnType": "node is LabeledStatement;"
    },
    {
      "name": "isThrowStatement",
      "args": [
        "node"
      ],
      "returnType": "node is ThrowStatement;"
    },
    {
      "name": "isTryStatement",
      "args": [
        "node"
      ],
      "returnType": "node is TryStatement;"
    },
    {
      "name": "isDebuggerStatement",
      "args": [
        "node"
      ],
      "returnType": "node is DebuggerStatement;"
    },
    {
      "name": "isVariableDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is VariableDeclaration;"
    },
    {
      "name": "isVariableDeclarationList",
      "args": [
        "node"
      ],
      "returnType": "node is VariableDeclarationList;"
    },
    {
      "name": "isFunctionDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is FunctionDeclaration;"
    },
    {
      "name": "isClassDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ClassDeclaration;"
    },
    {
      "name": "isInterfaceDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is InterfaceDeclaration;"
    },
    {
      "name": "isTypeAliasDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is TypeAliasDeclaration;"
    },
    {
      "name": "isEnumDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is EnumDeclaration;"
    },
    {
      "name": "isModuleDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ModuleDeclaration;"
    },
    {
      "name": "isModuleBlock",
      "args": [
        "node"
      ],
      "returnType": "node is ModuleBlock;"
    },
    {
      "name": "isCaseBlock",
      "args": [
        "node"
      ],
      "returnType": "node is CaseBlock;"
    },
    {
      "name": "isNamespaceExportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is NamespaceExportDeclaration;"
    },
    {
      "name": "isImportEqualsDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ImportEqualsDeclaration;"
    },
    {
      "name": "isImportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ImportDeclaration;"
    },
    {
      "name": "isImportClause",
      "args": [
        "node"
      ],
      "returnType": "node is ImportClause;"
    },
    {
      "name": "isImportTypeAssertionContainer",
      "args": [
        "node"
      ],
      "returnType": "node is ImportTypeAssertionContainer;"
    },
    {
      "name": "isAssertClause",
      "args": [
        "node"
      ],
      "returnType": "node is AssertClause;"
    },
    {
      "name": "isAssertEntry",
      "args": [
        "node"
      ],
      "returnType": "node is AssertEntry;"
    },
    {
      "name": "isImportAttributes",
      "args": [
        "node"
      ],
      "returnType": "node is ImportAttributes;"
    },
    {
      "name": "isImportAttribute",
      "args": [
        "node"
      ],
      "returnType": "node is ImportAttribute;"
    },
    {
      "name": "isNamespaceImport",
      "args": [
        "node"
      ],
      "returnType": "node is NamespaceImport;"
    },
    {
      "name": "isNamespaceExport",
      "args": [
        "node"
      ],
      "returnType": "node is NamespaceExport;"
    },
    {
      "name": "isNamedImports",
      "args": [
        "node"
      ],
      "returnType": "node is NamedImports;"
    },
    {
      "name": "isImportSpecifier",
      "args": [
        "node"
      ],
      "returnType": "node is ImportSpecifier;"
    },
    {
      "name": "isExportAssignment",
      "args": [
        "node"
      ],
      "returnType": "node is ExportAssignment;"
    },
    {
      "name": "isExportDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is ExportDeclaration;"
    },
    {
      "name": "isNamedExports",
      "args": [
        "node"
      ],
      "returnType": "node is NamedExports;"
    },
    {
      "name": "isExportSpecifier",
      "args": [
        "node"
      ],
      "returnType": "node is ExportSpecifier;"
    },
    {
      "name": "isMissingDeclaration",
      "args": [
        "node"
      ],
      "returnType": "node is MissingDeclaration;"
    },
    {
      "name": "isNotEmittedStatement",
      "args": [
        "node"
      ],
      "returnType": "node is NotEmittedStatement;"
    },
    {
      "name": "isExternalModuleReference",
      "args": [
        "node"
      ],
      "returnType": "node is ExternalModuleReference;"
    },
    {
      "name": "isJsxElement",
      "args": [
        "node"
      ],
      "returnType": "node is JsxElement;"
    },
    {
      "name": "isJsxSelfClosingElement",
      "args": [
        "node"
      ],
      "returnType": "node is JsxSelfClosingElement;"
    },
    {
      "name": "isJsxOpeningElement",
      "args": [
        "node"
      ],
      "returnType": "node is JsxOpeningElement;"
    },
    {
      "name": "isJsxClosingElement",
      "args": [
        "node"
      ],
      "returnType": "node is JsxClosingElement;"
    },
    {
      "name": "isJsxFragment",
      "args": [
        "node"
      ],
      "returnType": "node is JsxFragment;"
    },
    {
      "name": "isJsxOpeningFragment",
      "args": [
        "node"
      ],
      "returnType": "node is JsxOpeningFragment;"
    },
    {
      "name": "isJsxClosingFragment",
      "args": [
        "node"
      ],
      "returnType": "node is JsxClosingFragment;"
    },
    {
      "name": "isJsxAttribute",
      "args": [
        "node"
      ],
      "returnType": "node is JsxAttribute;"
    },
    {
      "name": "isJsxAttributes",
      "args": [
        "node"
      ],
      "returnType": "node is JsxAttributes;"
    },
    {
      "name": "isJsxSpreadAttribute",
      "args": [
        "node"
      ],
      "returnType": "node is JsxSpreadAttribute;"
    },
    {
      "name": "isJsxExpression",
      "args": [
        "node"
      ],
      "returnType": "node is JsxExpression;"
    },
    {
      "name": "isJsxNamespacedName",
      "args": [
        "node"
      ],
      "returnType": "node is JsxNamespacedName;"
    },
    {
      "name": "isCaseClause",
      "args": [
        "node"
      ],
      "returnType": "node is CaseClause;"
    },
    {
      "name": "isDefaultClause",
      "args": [
        "node"
      ],
      "returnType": "node is DefaultClause;"
    },
    {
      "name": "isHeritageClause",
      "args": [
        "node"
      ],
      "returnType": "node is HeritageClause;"
    },
    {
      "name": "isCatchClause",
      "args": [
        "node"
      ],
      "returnType": "node is CatchClause;"
    },
    {
      "name": "isPropertyAssignment",
      "args": [
        "node"
      ],
      "returnType": "node is PropertyAssignment;"
    },
    {
      "name": "isShorthandPropertyAssignment",
      "args": [
        "node"
      ],
      "returnType": "node is ShorthandPropertyAssignment;"
    },
    {
      "name": "isSpreadAssignment",
      "args": [
        "node"
      ],
      "returnType": "node is SpreadAssignment;"
    },
    {
      "name": "isEnumMember",
      "args": [
        "node"
      ],
      "returnType": "node is EnumMember;"
    },
    {
      "name": "isUnparsedPrepend",
      "args": [
        "node"
      ],
      "returnType": "node is UnparsedPrepend;"
    },
    {
      "name": "isSourceFile",
      "args": [
        "node"
      ],
      "returnType": "node is SourceFile;"
    },
    {
      "name": "isBundle",
      "args": [
        "node"
      ],
      "returnType": "node is Bundle;"
    },
    {
      "name": "isUnparsedSource",
      "args": [
        "node"
      ],
      "returnType": "node is UnparsedSource;"
    },
    {
      "name": "isJSDocTypeExpression",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocTypeExpression;"
    },
    {
      "name": "isJSDocNameReference",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocNameReference;"
    },
    {
      "name": "isJSDocMemberName",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocMemberName;"
    },
    {
      "name": "isJSDocLink",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocLink;"
    },
    {
      "name": "isJSDocLinkCode",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocLinkCode;"
    },
    {
      "name": "isJSDocLinkPlain",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocLinkPlain;"
    },
    {
      "name": "isJSDocAllType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocAllType;"
    },
    {
      "name": "isJSDocUnknownType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocUnknownType;"
    },
    {
      "name": "isJSDocNullableType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocNullableType;"
    },
    {
      "name": "isJSDocNonNullableType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocNonNullableType;"
    },
    {
      "name": "isJSDocOptionalType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocOptionalType;"
    },
    {
      "name": "isJSDocFunctionType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocFunctionType;"
    },
    {
      "name": "isJSDocVariadicType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocVariadicType;"
    },
    {
      "name": "isJSDocNamepathType",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocNamepathType;"
    },
    {
      "name": "isJSDoc",
      "args": [
        "node"
      ],
      "returnType": "node is JSDoc;"
    },
    {
      "name": "isJSDocTypeLiteral",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocTypeLiteral;"
    },
    {
      "name": "isJSDocSignature",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocSignature;"
    },
    {
      "name": "isJSDocAugmentsTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocAugmentsTag;"
    },
    {
      "name": "isJSDocAuthorTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocAuthorTag;"
    },
    {
      "name": "isJSDocClassTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocClassTag;"
    },
    {
      "name": "isJSDocCallbackTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocCallbackTag;"
    },
    {
      "name": "isJSDocPublicTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocPublicTag;"
    },
    {
      "name": "isJSDocPrivateTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocPrivateTag;"
    },
    {
      "name": "isJSDocProtectedTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocProtectedTag;"
    },
    {
      "name": "isJSDocReadonlyTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocReadonlyTag;"
    },
    {
      "name": "isJSDocOverrideTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocOverrideTag;"
    },
    {
      "name": "isJSDocOverloadTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocOverloadTag;"
    },
    {
      "name": "isJSDocDeprecatedTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocDeprecatedTag;"
    },
    {
      "name": "isJSDocSeeTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocSeeTag;"
    },
    {
      "name": "isJSDocEnumTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocEnumTag;"
    },
    {
      "name": "isJSDocParameterTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocParameterTag;"
    },
    {
      "name": "isJSDocReturnTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocReturnTag;"
    },
    {
      "name": "isJSDocThisTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocThisTag;"
    },
    {
      "name": "isJSDocTypeTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocTypeTag;"
    },
    {
      "name": "isJSDocTemplateTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocTemplateTag;"
    },
    {
      "name": "isJSDocTypedefTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocTypedefTag;"
    },
    {
      "name": "isJSDocUnknownTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocUnknownTag;"
    },
    {
      "name": "isJSDocPropertyTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocPropertyTag;"
    },
    {
      "name": "isJSDocImplementsTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocImplementsTag;"
    },
    {
      "name": "isJSDocSatisfiesTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocSatisfiesTag;"
    },
    {
      "name": "isJSDocThrowsTag",
      "args": [
        "node"
      ],
      "returnType": "node is JSDocThrowsTag;"
    },
    {
      "name": "isQuestionOrExclamationToken",
      "args": [
        "node"
      ],
      "returnType": "node is QuestionToken | ExclamationToken;"
    },
    {
      "name": "isIdentifierOrThisTypeNode",
      "args": [
        "node"
      ],
      "returnType": "node is Identifier | ThisTypeNode;"
    },
    {
      "name": "isReadonlyKeywordOrPlusOrMinusToken",
      "args": [
        "node"
      ],
      "returnType": "node is ReadonlyKeyword | PlusToken | MinusToken;"
    },
    {
      "name": "isQuestionOrPlusOrMinusToken",
      "args": [
        "node"
      ],
      "returnType": "node is QuestionToken | PlusToken | MinusToken;"
    },
    {
      "name": "isModuleName",
      "args": [
        "node"
      ],
      "returnType": "node is ModuleName;"
    },
    {
      "name": "isBinaryOperatorToken",
      "args": [
        "node"
      ],
      "returnType": "node is BinaryOperatorToken;"
    },
    {
      "name": "canHaveModifiers",
      "args": [
        "node"
      ],
      "returnType": "node is HasModifiers;"
    },
    {
      "name": "canHaveDecorators",
      "args": [
        "node"
      ],
      "returnType": "node is HasDecorators;"
    },
    {
      "name": "createSourceFile",
      "args": [
        "fileName",
        "sourceText",
        "languageVersionOrOptions",
        "setParentNodes?",
        "scriptKind?"
      ],
      "returnType": "SourceFile;"
    },
    {
      "name": "parseIsolatedEntityName",
      "args": [
        "text",
        "languageVersion"
      ],
      "returnType": "EntityName | undefined;"
    },
    {
      "name": "parseJsonText",
      "args": [
        "fileName",
        "sourceText"
      ],
      "returnType": "JsonSourceFile;"
    },
    {
      "name": "isExternalModule",
      "args": [
        "file"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "updateSourceFile",
      "args": [
        "sourceFile",
        "newText",
        "textChangeRange",
        "aggressiveChecks?"
      ],
      "returnType": "SourceFile;"
    },
    {
      "name": "parseCommandLine",
      "args": [
        "commandLine",
        "readFile?"
      ]
    },
    {
      "name": "getParsedCommandLineOfConfigFile",
      "args": [
        "configFileName",
        "optionsToExtend",
        "host",
        "extendedConfigCache?",
        "ExtendedConfigCacheEntry>",
        "watchOptionsToExtend?",
        "extraFileExtensions?"
      ],
      "returnType": "ParsedCommandLine | undefined;"
    },
    {
      "name": "readConfigFile",
      "args": [
        "fileName",
        "readFile"
      ]
    },
    {
      "name": "parseConfigFileTextToJson",
      "args": [
        "fileName",
        "jsonText"
      ],
      "returnType": ""
    },
    {
      "name": "readJsonConfigFile",
      "args": [
        "fileName",
        "readFile"
      ]
    },
    {
      "name": "convertToObject",
      "args": [
        "sourceFile",
        "errors"
      ],
      "returnType": "any;"
    },
    {
      "name": "parseJsonConfigFileContent",
      "args": [
        "json",
        "host",
        "basePath",
        "existingOptions?",
        "configFileName?",
        "resolutionStack?",
        "extraFileExtensions?",
        "extendedConfigCache?",
        "ExtendedConfigCacheEntry>",
        "existingWatchOptions?"
      ],
      "returnType": "ParsedCommandLine;"
    },
    {
      "name": "parseJsonSourceFileConfigFileContent",
      "args": [
        "sourceFile",
        "host",
        "basePath",
        "existingOptions?",
        "configFileName?",
        "resolutionStack?",
        "extraFileExtensions?",
        "extendedConfigCache?",
        "ExtendedConfigCacheEntry>",
        "existingWatchOptions?"
      ],
      "returnType": "ParsedCommandLine;"
    },
    {
      "name": "convertCompilerOptionsFromJson",
      "args": [
        "jsonOptions",
        "basePath",
        "configFileName?"
      ],
      "returnType": ""
    },
    {
      "name": "convertTypeAcquisitionFromJson",
      "args": [
        "jsonOptions",
        "basePath",
        "configFileName?"
      ],
      "returnType": ""
    },
    {
      "name": "getEffectiveTypeRoots",
      "args": [
        "options",
        "host"
      ],
      "returnType": "string[] | undefined;"
    },
    {
      "name": "resolveTypeReferenceDirective",
      "args": [
        "typeReferenceDirectiveName",
        "containingFile",
        "options",
        "host",
        "redirectedReference?",
        "cache?",
        "resolutionMode?"
      ],
      "returnType": "ResolvedTypeReferenceDirectiveWithFailedLookupLocations;"
    },
    {
      "name": "getAutomaticTypeDirectiveNames",
      "args": [
        "options",
        "host"
      ],
      "returnType": "string[];"
    },
    {
      "name": "createModuleResolutionCache",
      "args": [
        "currentDirectory",
        "getCanonicalFileName"
      ]
    },
    {
      "name": "createTypeReferenceDirectiveResolutionCache",
      "args": [
        "currentDirectory",
        "getCanonicalFileName"
      ]
    },
    {
      "name": "resolveModuleNameFromCache",
      "args": [
        "moduleName",
        "containingFile",
        "cache",
        "mode?"
      ],
      "returnType": "ResolvedModuleWithFailedLookupLocations | undefined;"
    },
    {
      "name": "resolveModuleName",
      "args": [
        "moduleName",
        "containingFile",
        "compilerOptions",
        "host",
        "cache?",
        "redirectedReference?",
        "resolutionMode?"
      ],
      "returnType": "ResolvedModuleWithFailedLookupLocations;"
    },
    {
      "name": "bundlerModuleNameResolver",
      "args": [
        "moduleName",
        "containingFile",
        "compilerOptions",
        "host",
        "cache?",
        "redirectedReference?"
      ],
      "returnType": "ResolvedModuleWithFailedLookupLocations;"
    },
    {
      "name": "nodeModuleNameResolver",
      "args": [
        "moduleName",
        "containingFile",
        "compilerOptions",
        "host",
        "cache?",
        "redirectedReference?"
      ],
      "returnType": "ResolvedModuleWithFailedLookupLocations;"
    },
    {
      "name": "classicNameResolver",
      "args": [
        "moduleName",
        "containingFile",
        "compilerOptions",
        "host",
        "cache?",
        "redirectedReference?"
      ],
      "returnType": "ResolvedModuleWithFailedLookupLocations;"
    },
    {
      "name": "visitLexicalEnvironment",
      "args": [
        "statements",
        "visitor",
        "context",
        "start?",
        "ensureUseStrict?",
        "nodesVisitor?"
      ],
      "returnType": "NodeArray<Statement>;"
    },
    {
      "name": "visitParameterList",
      "args": [
        "nodes",
        "visitor",
        "context",
        "nodesVisitor?"
      ],
      "returnType": "NodeArray<ParameterDeclaration>;"
    },
    {
      "name": "visitParameterList",
      "args": [
        "nodes",
        "visitor",
        "context",
        "nodesVisitor?"
      ],
      "returnType": "NodeArray<ParameterDeclaration> | undefined;"
    },
    {
      "name": "visitFunctionBody",
      "args": [
        "node",
        "visitor",
        "context"
      ],
      "returnType": "FunctionBody;"
    },
    {
      "name": "visitFunctionBody",
      "args": [
        "node",
        "visitor",
        "context"
      ],
      "returnType": "FunctionBody | undefined;"
    },
    {
      "name": "visitFunctionBody",
      "args": [
        "node",
        "visitor",
        "context"
      ],
      "returnType": "ConciseBody;"
    },
    {
      "name": "visitIterationBody",
      "args": [
        "body",
        "visitor",
        "context"
      ],
      "returnType": "Statement;"
    },
    {
      "name": "visitCommaListElements",
      "args": [
        "elements",
        "visitor",
        "discardVisitor?"
      ],
      "returnType": "NodeArray<Expression>;"
    },
    {
      "name": "getTsBuildInfoEmitOutputFilePath",
      "args": [
        "options"
      ],
      "returnType": "string | undefined;"
    },
    {
      "name": "getOutputFileNames",
      "args": [
        "commandLine",
        "inputFileName",
        "ignoreCase"
      ],
      "returnType": "readonly string[];"
    },
    {
      "name": "createPrinter",
      "args": [
        "printerOptions?",
        "handlers?"
      ],
      "returnType": "Printer;"
    },
    {
      "name": "findConfigFile",
      "args": [
        "searchPath",
        "fileExists"
      ]
    },
    {
      "name": "resolveTripleslashReference",
      "args": [
        "moduleName",
        "containingFile"
      ],
      "returnType": "string;"
    },
    {
      "name": "createCompilerHost",
      "args": [
        "options",
        "setParentNodes?"
      ],
      "returnType": "CompilerHost;"
    },
    {
      "name": "getPreEmitDiagnostics",
      "args": [
        "program",
        "sourceFile?",
        "cancellationToken?"
      ],
      "returnType": "readonly Diagnostic[];"
    },
    {
      "name": "formatDiagnostics",
      "args": [
        "diagnostics",
        "host"
      ],
      "returnType": "string;"
    },
    {
      "name": "formatDiagnostic",
      "args": [
        "diagnostic",
        "host"
      ],
      "returnType": "string;"
    },
    {
      "name": "formatDiagnosticsWithColorAndContext",
      "args": [
        "diagnostics",
        "host"
      ],
      "returnType": "string;"
    },
    {
      "name": "flattenDiagnosticMessageText",
      "args": [
        "diag",
        "newLine",
        "indent?"
      ],
      "returnType": "string;"
    },
    {
      "name": "getModeForFileReference",
      "args": [
        "ref",
        "containingFileMode"
      ],
      "returnType": "ResolutionMode;"
    },
    {
      "name": "getModeForResolutionAtIndex",
      "args": [
        "file",
        "index",
        "compilerOptions"
      ],
      "returnType": "ResolutionMode;"
    },
    {
      "name": "getModeForUsageLocation",
      "args": [
        "file\n            impliedNodeFormat?: ResolutionMode;\n        }",
        "usage",
        "compilerOptions"
      ],
      "returnType": "ModuleKind.CommonJS | ModuleKind.ESNext | undefined;"
    },
    {
      "name": "getConfigFileParsingDiagnostics",
      "args": [
        "configFileParseResult"
      ],
      "returnType": "readonly Diagnostic[];"
    },
    {
      "name": "getImpliedNodeFormatForFile",
      "args": [
        "fileName",
        "packageJsonInfoCache",
        "host",
        "options"
      ],
      "returnType": "ResolutionMode;"
    },
    {
      "name": "createProgram",
      "args": [
        "createProgramOptions"
      ],
      "returnType": "Program;"
    },
    {
      "name": "createProgram",
      "args": [
        "rootNames",
        "options",
        "host?",
        "oldProgram?",
        "configFileParsingDiagnostics?"
      ],
      "returnType": "Program;"
    },
    {
      "name": "resolveProjectReferencePath",
      "args": [
        "ref"
      ],
      "returnType": "ResolvedConfigFileName;"
    },
    {
      "name": "createSemanticDiagnosticsBuilderProgram",
      "args": [
        "newProgram",
        "host",
        "oldProgram?",
        "configFileParsingDiagnostics?"
      ],
      "returnType": "SemanticDiagnosticsBuilderProgram;"
    },
    {
      "name": "createSemanticDiagnosticsBuilderProgram",
      "args": [
        "rootNames",
        "options",
        "host?",
        "oldProgram?",
        "configFileParsingDiagnostics?",
        "projectReferences?"
      ],
      "returnType": "SemanticDiagnosticsBuilderProgram;"
    },
    {
      "name": "createEmitAndSemanticDiagnosticsBuilderProgram",
      "args": [
        "newProgram",
        "host",
        "oldProgram?",
        "configFileParsingDiagnostics?"
      ],
      "returnType": "EmitAndSemanticDiagnosticsBuilderProgram;"
    },
    {
      "name": "createEmitAndSemanticDiagnosticsBuilderProgram",
      "args": [
        "rootNames",
        "options",
        "host?",
        "oldProgram?",
        "configFileParsingDiagnostics?",
        "projectReferences?"
      ],
      "returnType": "EmitAndSemanticDiagnosticsBuilderProgram;"
    },
    {
      "name": "createAbstractBuilder",
      "args": [
        "newProgram",
        "host",
        "oldProgram?",
        "configFileParsingDiagnostics?"
      ],
      "returnType": "BuilderProgram;"
    },
    {
      "name": "createAbstractBuilder",
      "args": [
        "rootNames",
        "options",
        "host?",
        "oldProgram?",
        "configFileParsingDiagnostics?",
        "projectReferences?"
      ],
      "returnType": "BuilderProgram;"
    },
    {
      "name": "readBuilderProgram",
      "args": [
        "compilerOptions",
        "host"
      ],
      "returnType": "EmitAndSemanticDiagnosticsBuilderProgram | undefined;"
    },
    {
      "name": "createIncrementalCompilerHost",
      "args": [
        "options",
        "system?"
      ],
      "returnType": "CompilerHost;"
    },
    {
      "name": "createBuilderStatusReporter",
      "args": [
        "system",
        "pretty?"
      ],
      "returnType": "DiagnosticReporter;"
    },
    {
      "name": "getDefaultFormatCodeSettings",
      "args": [
        "newLineCharacter?"
      ],
      "returnType": "FormatCodeSettings;"
    },
    {
      "name": "fromString",
      "args": [
        "text"
      ],
      "returnType": "IScriptSnapshot;"
    },
    {
      "name": "f",
      "args": []
    },
    {
      "name": "foo",
      "args": [
        "*Y*"
      ]
    },
    {
      "name": "createClassifier",
      "args": [],
      "returnType": "Classifier;"
    },
    {
      "name": "createDocumentRegistry",
      "args": [
        "useCaseSensitiveFileNames?",
        "currentDirectory?",
        "jsDocParsingMode?"
      ],
      "returnType": "DocumentRegistry;"
    },
    {
      "name": "preProcessFile",
      "args": [
        "sourceText",
        "readImportFiles?",
        "detectJavaScriptImports?"
      ],
      "returnType": "PreProcessedFileInfo;"
    },
    {
      "name": "transpileModule",
      "args": [
        "input",
        "transpileOptions"
      ],
      "returnType": "TranspileOutput;"
    },
    {
      "name": "transpile",
      "args": [
        "input",
        "compilerOptions?",
        "fileName?",
        "diagnostics?",
        "moduleName?"
      ],
      "returnType": "string;"
    },
    {
      "name": "toEditorSettings",
      "args": [
        "options"
      ],
      "returnType": "EditorSettings;"
    },
    {
      "name": "displayPartsToString",
      "args": [
        "displayParts"
      ],
      "returnType": "string;"
    },
    {
      "name": "getDefaultCompilerOptions",
      "args": [],
      "returnType": "CompilerOptions;"
    },
    {
      "name": "getSupportedCodeFixes",
      "args": [],
      "returnType": "readonly string[];"
    },
    {
      "name": "createLanguageServiceSourceFile",
      "args": [
        "fileName",
        "scriptSnapshot",
        "scriptTargetOrOptions",
        "version",
        "setNodeParents",
        "scriptKind?"
      ],
      "returnType": "SourceFile;"
    },
    {
      "name": "updateLanguageServiceSourceFile",
      "args": [
        "sourceFile",
        "scriptSnapshot",
        "version",
        "textChangeRange",
        "aggressiveChecks?"
      ],
      "returnType": "SourceFile;"
    },
    {
      "name": "createLanguageService",
      "args": [
        "host",
        "documentRegistry?",
        "syntaxOnlyOrLanguageServiceMode?"
      ],
      "returnType": "LanguageService;"
    },
    {
      "name": "getDefaultLibFilePath",
      "args": [
        "options"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\undici-types\\api.d.ts": [
    {
      "name": "request",
      "args": [
        "url",
        "options?",
        "'origin' | 'path' | 'method'> & Partial<Pick<Dispatcher.RequestOptions",
        "'method'>>"
      ],
      "returnType": "Promise<Dispatcher.ResponseData>;"
    },
    {
      "name": "stream",
      "args": [
        "url",
        "options",
        "'origin' | 'path'>",
        "factory"
      ],
      "returnType": "Promise<Dispatcher.StreamData>;"
    },
    {
      "name": "pipeline",
      "args": [
        "url",
        "options",
        "'origin' | 'path'>",
        "handler"
      ],
      "returnType": "Duplex;"
    },
    {
      "name": "connect",
      "args": [
        "url",
        "options?",
        "'origin' | 'path'>"
      ],
      "returnType": "Promise<Dispatcher.ConnectData>;"
    },
    {
      "name": "upgrade",
      "args": [
        "url",
        "options?",
        "'origin' | 'path'>"
      ],
      "returnType": "Promise<Dispatcher.UpgradeData>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\undici-types\\global-dispatcher.d.ts": [
    {
      "name": "getGlobalDispatcher",
      "args": [],
      "returnType": "Dispatcher;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\undici-types\\global-origin.d.ts": [
    {
      "name": "setGlobalOrigin",
      "args": [
        "origin"
      ],
      "returnType": "void;"
    },
    {
      "name": "getGlobalOrigin",
      "args": [],
      "returnType": "URL | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\update-browserslist-db\\index.d.ts": [
    {
      "name": "updateDb",
      "args": [
        "print?"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\uri-js\\dist\\es5\\uri.all.d.ts": [
    {
      "name": "pctEncChar",
      "args": [
        "chr"
      ],
      "returnType": "string;"
    },
    {
      "name": "pctDecChars",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "parse",
      "args": [
        "uriString",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "removeDotSegments",
      "args": [
        "input"
      ],
      "returnType": "string;"
    },
    {
      "name": "serialize",
      "args": [
        "components",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "resolveComponents",
      "args": [
        "base",
        "relative",
        "options?",
        "skipNormalization?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "resolve",
      "args": [
        "baseURI",
        "relativeURI",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "escapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "unescapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\uri-js\\dist\\es5\\uri.all.min.d.ts": [
    {
      "name": "pctEncChar",
      "args": [
        "chr"
      ],
      "returnType": "string;"
    },
    {
      "name": "pctDecChars",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "parse",
      "args": [
        "uriString",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "removeDotSegments",
      "args": [
        "input"
      ],
      "returnType": "string;"
    },
    {
      "name": "serialize",
      "args": [
        "components",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "resolveComponents",
      "args": [
        "base",
        "relative",
        "options?",
        "skipNormalization?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "resolve",
      "args": [
        "baseURI",
        "relativeURI",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "escapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "unescapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\uri-js\\dist\\esnext\\regexps-uri.d.ts": [
    {
      "name": "buildExps",
      "args": [
        "isIRI"
      ],
      "returnType": "URIRegExps;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\uri-js\\dist\\esnext\\uri.d.ts": [
    {
      "name": "pctEncChar",
      "args": [
        "chr"
      ],
      "returnType": "string;"
    },
    {
      "name": "pctDecChars",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "parse",
      "args": [
        "uriString",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "removeDotSegments",
      "args": [
        "input"
      ],
      "returnType": "string;"
    },
    {
      "name": "serialize",
      "args": [
        "components",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "resolveComponents",
      "args": [
        "base",
        "relative",
        "options?",
        "skipNormalization?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "resolve",
      "args": [
        "baseURI",
        "relativeURI",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "normalize",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "URIComponents;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "equal",
      "args": [
        "uriA",
        "uriB",
        "options?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "escapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    },
    {
      "name": "unescapeComponent",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\uri-js\\dist\\esnext\\util.d.ts": [
    {
      "name": "merge",
      "args": [
        "...sets"
      ],
      "returnType": "string;"
    },
    {
      "name": "subexp",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "typeOf",
      "args": [
        "o"
      ],
      "returnType": "string;"
    },
    {
      "name": "toUpperCase",
      "args": [
        "str"
      ],
      "returnType": "string;"
    },
    {
      "name": "toArray",
      "args": [
        "obj"
      ],
      "returnType": "Array<any>;"
    },
    {
      "name": "assign",
      "args": [
        "target",
        "source"
      ],
      "returnType": "any;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\v8-to-istanbul\\index.d.ts": [
    {
      "name": "v8ToIstanbul",
      "args": [
        "scriptPath",
        "wrapperLength?",
        "sources?",
        "excludePath?"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\lib\\testrunner.d.ts": [
    {
      "name": "configure",
      "args": [
        "options"
      ],
      "returnType": "void;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\agent-base\\dist\\src\\index.d.ts": [
    {
      "name": "createAgent",
      "args": [
        "opts?"
      ],
      "returnType": "createAgent.Agent;"
    },
    {
      "name": "createAgent",
      "args": [
        "callback",
        "opts?"
      ],
      "returnType": "createAgent.Agent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\agent-base\\dist\\src\\promisify.d.ts": [
    {
      "name": "promisify",
      "args": [
        "fn"
      ],
      "returnType": "AgentCallbackPromise;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\agent-base\\src\\index.ts": [
    {
      "name": "isAgent",
      "args": [
        "v"
      ],
      "returnType": "v is createAgent.AgentLike"
    },
    {
      "name": "isSecureEndpoint",
      "args": [],
      "returnType": "boolean"
    },
    {
      "name": "createAgent",
      "args": [
        "opts?"
      ],
      "returnType": "createAgent.Agent;"
    },
    {
      "name": "createAgent",
      "args": [
        "callback",
        "opts?"
      ],
      "returnType": "createAgent.Agent;"
    },
    {
      "name": "createAgent",
      "args": [
        "callback?",
        "opts?"
      ]
    },
    {
      "name": "onerror",
      "args": [
        "err"
      ]
    },
    {
      "name": "ontimeout",
      "args": []
    },
    {
      "name": "callbackError",
      "args": [
        "err"
      ]
    },
    {
      "name": "onsocket",
      "args": [
        "socket"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\agent-base\\src\\promisify.ts": [
    {
      "name": "promisify",
      "args": [
        "fn"
      ],
      "returnType": "AgentCallbackPromise"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\http-proxy-agent\\dist\\index.d.ts": [
    {
      "name": "createHttpProxyAgent",
      "args": [
        "opts"
      ],
      "returnType": "_HttpProxyAgent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\https-proxy-agent\\dist\\index.d.ts": [
    {
      "name": "createHttpsProxyAgent",
      "args": [
        "opts"
      ],
      "returnType": "_HttpsProxyAgent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\node_modules\\https-proxy-agent\\dist\\parse-proxy-response.d.ts": [
    {
      "name": "parseProxyResponse",
      "args": [
        "socket"
      ],
      "returnType": "Promise<ProxyResponse>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode\\vscode.d.ts": [
    {
      "name": "registerTaskProvider",
      "args": [
        "type",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "fetchTasks",
      "args": [
        "filter?"
      ],
      "returnType": "Thenable<Task[]>;"
    },
    {
      "name": "executeTask",
      "args": [
        "task"
      ],
      "returnType": "Thenable<TaskExecution>;"
    },
    {
      "name": "openExternal",
      "args": [
        "target"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "registerCommand",
      "args": [
        "command",
        "callback"
      ]
    },
    {
      "name": "registerTextEditorCommand",
      "args": [
        "command",
        "callback",
        "edit",
        "...args"
      ]
    },
    {
      "name": "getCommands",
      "args": [
        "filterInternal?"
      ],
      "returnType": "Thenable<string[]>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "document",
        "column?",
        "preserveFocus?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "document",
        "options?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "showTextDocument",
      "args": [
        "uri",
        "options?"
      ],
      "returnType": "Thenable<TextEditor>;"
    },
    {
      "name": "createTextEditorDecorationType",
      "args": [
        "options"
      ],
      "returnType": "TextEditorDecorationType;"
    },
    {
      "name": "showInformationMessage",
      "args": [
        "message",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showInformationMessage",
      "args": [
        "message",
        "options",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showWarningMessage",
      "args": [
        "message",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showWarningMessage",
      "args": [
        "message",
        "options",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showErrorMessage",
      "args": [
        "message",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showErrorMessage",
      "args": [
        "message",
        "options",
        "...items"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showQuickPick",
      "args": [
        "items",
        "options",
        "token?"
      ],
      "returnType": "Thenable<string[] | undefined>;"
    },
    {
      "name": "showQuickPick",
      "args": [
        "items",
        "options?",
        "token?"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "showWorkspaceFolderPick",
      "args": [
        "options?"
      ],
      "returnType": "Thenable<WorkspaceFolder | undefined>;"
    },
    {
      "name": "showOpenDialog",
      "args": [
        "options"
      ],
      "returnType": "Thenable<Uri[] | undefined>;"
    },
    {
      "name": "showSaveDialog",
      "args": [
        "options"
      ],
      "returnType": "Thenable<Uri | undefined>;"
    },
    {
      "name": "showInputBox",
      "args": [
        "options?",
        "token?"
      ],
      "returnType": "Thenable<string | undefined>;"
    },
    {
      "name": "createInputBox",
      "args": [],
      "returnType": "InputBox;"
    },
    {
      "name": "createOutputChannel",
      "args": [
        "name"
      ],
      "returnType": "OutputChannel;"
    },
    {
      "name": "createWebviewPanel",
      "args": [
        "viewType",
        "title",
        "showOptions",
        "preserveFocus?",
        "options?"
      ],
      "returnType": "WebviewPanel;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text",
        "hideAfterTimeout"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text",
        "hideWhenDone"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setStatusBarMessage",
      "args": [
        "text"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "createStatusBarItem",
      "args": [
        "alignment?",
        "priority?"
      ],
      "returnType": "StatusBarItem;"
    },
    {
      "name": "createTerminal",
      "args": [
        "name?",
        "shellPath?",
        "shellArgs?"
      ],
      "returnType": "Terminal;"
    },
    {
      "name": "createTerminal",
      "args": [
        "options"
      ],
      "returnType": "Terminal;"
    },
    {
      "name": "registerUriHandler",
      "args": [
        "handler"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerWebviewPanelSerializer",
      "args": [
        "viewType",
        "serializer"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getWorkspaceFolder",
      "args": [
        "uri"
      ],
      "returnType": "WorkspaceFolder | undefined;"
    },
    {
      "name": "asRelativePath",
      "args": [
        "pathOrUri",
        "includeWorkspaceFolder?"
      ],
      "returnType": "string;"
    },
    {
      "name": "updateWorkspaceFolders",
      "args": [
        "start",
        "deleteCount",
        "...workspaceFoldersToAdd",
        "name?"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "createFileSystemWatcher",
      "args": [
        "globPattern",
        "ignoreCreateEvents?",
        "ignoreChangeEvents?",
        "ignoreDeleteEvents?"
      ],
      "returnType": "FileSystemWatcher;"
    },
    {
      "name": "findFiles",
      "args": [
        "include",
        "exclude?",
        "maxResults?",
        "token?"
      ],
      "returnType": "Thenable<Uri[]>;"
    },
    {
      "name": "saveAll",
      "args": [
        "includeUntitled?"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "applyEdit",
      "args": [
        "edit"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "uri"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "fileName"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "openTextDocument",
      "args": [
        "options?"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "registerTextDocumentContentProvider",
      "args": [
        "scheme",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getConfiguration",
      "args": [
        "section?",
        "resource?"
      ],
      "returnType": "WorkspaceConfiguration;"
    },
    {
      "name": "registerTaskProvider",
      "args": [
        "type",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerFileSystemProvider",
      "args": [
        "scheme",
        "provider",
        "options?",
        "isReadonly?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "getLanguages",
      "args": [],
      "returnType": "Thenable<string[]>;"
    },
    {
      "name": "setTextDocumentLanguage",
      "args": [
        "document",
        "languageId"
      ],
      "returnType": "Thenable<TextDocument>;"
    },
    {
      "name": "match",
      "args": [
        "selector",
        "document"
      ],
      "returnType": "number;"
    },
    {
      "name": "getDiagnostics",
      "args": [
        "resource"
      ],
      "returnType": "Diagnostic[];"
    },
    {
      "name": "getDiagnostics",
      "args": [],
      "returnType": "[Uri, Diagnostic[]][];"
    },
    {
      "name": "createDiagnosticCollection",
      "args": [
        "name?"
      ],
      "returnType": "DiagnosticCollection;"
    },
    {
      "name": "registerCompletionItemProvider",
      "args": [
        "selector",
        "provider",
        "...triggerCharacters"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerCodeActionsProvider",
      "args": [
        "selector",
        "provider",
        "metadata?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerCodeLensProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDefinitionProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerImplementationProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerTypeDefinitionProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDeclarationProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerHoverProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentHighlightProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentSymbolProvider",
      "args": [
        "selector",
        "provider",
        "metaData?"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerWorkspaceSymbolProvider",
      "args": [
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerReferenceProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerRenameProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentFormattingEditProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentRangeFormattingEditProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerOnTypeFormattingEditProvider",
      "args": [
        "selector",
        "provider",
        "firstTriggerCharacter",
        "...moreTriggerCharacter"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerSignatureHelpProvider",
      "args": [
        "selector",
        "provider",
        "...triggerCharacters"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerSignatureHelpProvider",
      "args": [
        "selector",
        "provider",
        "metadata"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDocumentLinkProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerColorProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerFoldingRangeProvider",
      "args": [
        "selector",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "setLanguageConfiguration",
      "args": [
        "language",
        "configuration"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "createSourceControl",
      "args": [
        "id",
        "label",
        "rootUri?"
      ],
      "returnType": "SourceControl;"
    },
    {
      "name": "registerDebugConfigurationProvider",
      "args": [
        "debugType",
        "provider"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDebugAdapterDescriptorFactory",
      "args": [
        "debugType",
        "factory"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "registerDebugAdapterTrackerFactory",
      "args": [
        "debugType",
        "factory"
      ],
      "returnType": "Disposable;"
    },
    {
      "name": "startDebugging",
      "args": [
        "folder",
        "nameOrConfiguration"
      ],
      "returnType": "Thenable<boolean>;"
    },
    {
      "name": "addBreakpoints",
      "args": [
        "breakpoints"
      ],
      "returnType": "void;"
    },
    {
      "name": "removeBreakpoints",
      "args": [
        "breakpoints"
      ],
      "returnType": "void;"
    },
    {
      "name": "activate",
      "args": [
        "context"
      ]
    },
    {
      "name": "getExtension",
      "args": [
        "extensionId"
      ],
      "returnType": "Extension<any> | undefined;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode-test\\node_modules\\agent-base\\index.d.ts": [
    {
      "name": "Agent",
      "args": [
        "opts?"
      ],
      "returnType": "Agent.Agent;"
    },
    {
      "name": "Agent",
      "args": [
        "callback",
        "opts?"
      ],
      "returnType": "Agent.Agent;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode-test\\out\\download.d.ts": [
    {
      "name": "downloadAndUnzipVSCode",
      "args": [
        "version?"
      ],
      "returnType": "Promise<string>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode-test\\out\\request.d.ts": [
    {
      "name": "getJSON",
      "args": [
        "api"
      ],
      "returnType": "Promise<any>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode-test\\out\\runTest.d.ts": [
    {
      "name": "run",
      "args": [
        "testsRoot",
        "cb",
        "failures?"
      ]
    },
    {
      "name": "runTests",
      "args": [
        "options"
      ],
      "returnType": "Promise<number>;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\vscode-test\\out\\util.d.ts": [
    {
      "name": "getVSCodeDownloadUrl",
      "args": [
        "version"
      ],
      "returnType": "string;"
    },
    {
      "name": "urlToOptions",
      "args": [
        "url"
      ],
      "returnType": "https.RequestOptions;"
    },
    {
      "name": "downloadDirToExecutablePath",
      "args": [
        "dir"
      ],
      "returnType": "string;"
    },
    {
      "name": "insidersDownloadDirToExecutablePath",
      "args": [
        "dir"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack\\types.d.ts": [
    {
      "name": "exports",
      "args": [
        "options",
        "callback?"
      ],
      "returnType": "Compiler;"
    },
    {
      "name": "exports",
      "args": [
        "options",
        "callback?"
      ],
      "returnType": "MultiCompiler;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-cli\\node_modules\\commander\\typings\\index.d.ts": [
    {
      "name": "createCommand",
      "args": [
        "name?"
      ],
      "returnType": "Command;"
    },
    {
      "name": "createOption",
      "args": [
        "flags",
        "description?"
      ],
      "returnType": "Option;"
    },
    {
      "name": "createArgument",
      "args": [
        "name",
        "description?"
      ],
      "returnType": "Argument;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-merge\\dist\\index.d.ts": [
    {
      "name": "customizeArray",
      "args": [
        "rules\n    [s: string]: CustomizeRule | CustomizeRuleString;\n}"
      ],
      "returnType": "(a: any, b: any, key: Key) => any;"
    },
    {
      "name": "mergeWithRules",
      "args": [
        "rules"
      ],
      "returnType": "(firstConfiguration: object | object[], ...configurations: object[]) => object;"
    },
    {
      "name": "customizeObject",
      "args": [
        "rules\n    [s: string]: CustomizeRule | CustomizeRuleString;\n}"
      ],
      "returnType": "(a: any, b: any, key: Key) => any;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-merge\\dist\\join-arrays.d.ts": [
    {
      "name": "joinArrays",
      "args": [
        "{ customizeArray",
        "customizeObject",
        "key",
        "}?\n    customizeArray?: Customize;\n    customizeObject?: Customize;\n    key?: Key;\n}"
      ],
      "returnType": "(a: any, b: any, k: Key) => any;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-merge\\dist\\merge-with.d.ts": [
    {
      "name": "mergeWith",
      "args": [
        "objects",
        "customizer"
      ],
      "returnType": "object;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-merge\\dist\\unique.d.ts": [
    {
      "name": "mergeUnique",
      "args": [
        "key",
        "uniques",
        "getter"
      ]
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\webpack-merge\\dist\\utils.d.ts": [
    {
      "name": "isRegex",
      "args": [
        "o"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isFunction",
      "args": [
        "functionToCheck"
      ],
      "returnType": "any;"
    },
    {
      "name": "isPlainObject",
      "args": [
        "a"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isUndefined",
      "args": [
        "a"
      ],
      "returnType": "boolean;"
    },
    {
      "name": "isSameCondition",
      "args": [
        "a",
        "b"
      ],
      "returnType": "boolean;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\word-wrap\\index.d.ts": [
    {
      "name": "wrap",
      "args": [
        "str",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\wrap-ansi\\index.d.ts": [
    {
      "name": "wrapAnsi",
      "args": [
        "string",
        "columns",
        "options?"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\wrap-ansi\\node_modules\\ansi-regex\\index.d.ts": [
    {
      "name": "ansiRegex",
      "args": [
        "options?"
      ],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\wrap-ansi\\node_modules\\strip-ansi\\index.d.ts": [
    {
      "name": "stripAnsi",
      "args": [
        "string"
      ],
      "returnType": "string;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\wrap-ansi-cjs\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\wrap-ansi-cjs\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\yargs\\node_modules\\emoji-regex\\index.d.ts": [
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    },
    {
      "name": "emojiRegex",
      "args": [],
      "returnType": "RegExp;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\node_modules\\yargs\\node_modules\\string-width\\index.d.ts": [
    {
      "name": "stringWidth",
      "args": [
        "string"
      ],
      "returnType": "number;"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\src\\extension.ts": [
    {
      "name": "activate",
      "args": [
        "context"
      ]
    },
    {
      "name": "deactivate",
      "args": []
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\src\\extensionsHelper\\helperFunctions\\getScriptHelper.ts": [
    {
      "name": "getScriptsHelper",
      "args": []
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\src\\llm\\openAiConnector.ts": [
    {
      "name": "openAIApiConnector",
      "args": [
        "query"
      ],
      "returnType": "Promise<any>"
    }
  ],
  "C:\\Users\\jespe\\OneDrive\\Dokumente\\GitHub\\24SS-DebugLLM\\debugLLMVsCodePlugin\\src\\tools\\createIndex.ts": [
    {
      "name": "saveDataStructureToJson",
      "args": [
        "data",
        "fileName"
      ],
      "returnType": "void"
    },
    {
      "name": "extractFunctionDetails",
      "args": [
        "filePath"
      ],
      "returnType": ""
    },
    {
      "name": "dfs",
      "args": [
        "dirPath",
        "result"
      ],
      "returnType": ""
    }
  ]
}